/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: zenTools
''    Author:  
''    Last Updated: Feb 13, 2008
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/curve_tools/4337.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//mirrors smooth skin influence weights, including non-joint influence objects
global proc int rigZenMirrorInfluences( int $axis, int $positiveToNegative, float $tol )
{
		DisableAll;
		
	int	$err;
		
	int	$connect=false;
		
	float	$timer=`timerX`;

	float	$weightTol=.001;

	string	$sel[]=`ls -sl`;

	string	$axisString;

		if($axis==1) $axisString="X";
		if($axis==2) $axisString="Y";
		if($axis==4) $axisString="Z";

	//find skinCluster node
	string	$skinClusterNode=$sel[0];
	
		if(`nodeType $skinClusterNode`!="skinCluster")
			$skinClusterNode=zenReturnFirstStringItem(`ls -type skinCluster (listHistory($skinClusterNode))`);
			
		if(!objExists($skinClusterNode))
			error("No skin cluster detected");
			
	string	$inputGeometry=zenReturnFirstStringItem(ls("-type","shape",(listHistory(listConnections($skinClusterNode+".input")))));
	string	$outputGeometry=zenReturnFirstStringItem(ls("-type","shape",(`listHistory -future true ($skinClusterNode+".outputGeometry[0]")`)));
									
	//get an array of influences and their opposing counterparts
	
	string	$influences[]=`listConnections -s 1 -d 0 ($skinClusterNode+".matrix")`;
	int	$opposites[]=`zenFillIntegerArray (size($influences)) -1`;
		
	string	$root=$influences[0];
	
	//this point matrix multiplier brings world space coordinates into the object space of the root joint

	string	$pointMatrixMultNode=`createNode pointMatrixMult`;
		
		if(`objExists ($root+".worldInverseMatrix")`)
			connectAttr ($root+".worldInverseMatrix[0]") ($pointMatrixMultNode+".inMatrix");
			
		setAttr ($pointMatrixMultNode+".vectorMultiply") 1;
		
	//save current dag pose & go to bind pose
	
	string	$poseNode=`dagPose -s $root`;
	
		$err=1;
	
	//this part gives errors sometimes even though it shouldn't
	//so we loop through it a few times to make sure everything goes as planned
	
		for( $i=0; $i<10 && $err ; $i++ )
		{
			$err=catchQuiet(`dagPose -r -g -bp $root`);
		}
		
		if($err) error("Could not go to bind pose.");
	
	string	$similarNodes[];
	
	float	$boundingBox_influenceObj[];
	float	$boundingBox_opposingObj[];

	vector	$bbCenter_influenceObj;
	vector	$bbCenter_opposingObj;
	
	vector	$tempVector;
	
	string	$type;
	string	$jointType;

	int	$side;
	int	$ancestorCount;
	int	$sideNameID;
	
	float	$rp[];
	float	$distances[];
	float	$rootSpaceRP[];
	float	$rootSpaceBBCenter[];
	float	$tempFloatArray[];
	
	float	$rootSpaceRP_relevantAxis;
	float	$rootSpaceBB_relevantAxis;
		
	string	$tempStringArray[];
	
	string	$tempString;
	string	$shapeNodeType;
	string	$shapeNode;
	string	$sideName;
	string	$replaceString;
	
	
	//progress window
	
		progressWindow -isInterruptable 1 -title "Working" -status "Sorting Influence Objects" -max (size($influences)/2) -progress 0;


		for($i=0;$i<(size($influences));$i++)
		{
			if($opposites[$i]==-1)
			//if there is an opposite already for this node, skip the rest
			{
				$side=3;
						
				$type=nodeType($influences[$i]);
				
				//narrow possible matches to nodes of the same type
				
				$similarNodes=stringArrayRemove({$influences[$i]},`ls -et $type $influences`);
					
				//narrow possible matches to objects with same number of ancestors (parents)
				
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$similarNodes={};
					$ancestorCount=size(stringToStringArray(zenReturnFirstStringItem(`ls -l $influences[$i]`),"|"));
					
					for($obj in $tempStringArray)
					{
						if($ancestorCount==size(stringToStringArray(zenReturnFirstStringItem(`ls -l $obj`),"|"))) 
							$similarNodes[(size($similarNodes))]=$obj;
					}
					
					if(! size($similarNodes))
						$similarNodes=$tempStringArray;					
				}
				
				//see if a side is indicated in the object name
				
				$sideNameID=0;
				$sideName="";
				
				if(`gmatch ($influences[$i]) "*[Ll][Ee][Ff][Tt]*"`)
				{
					$sideNameID=1;
					$sideName=match("[Ll][Ee][Ff][Tt]",($influences[$i]));
				}
				
				if(`gmatch ($influences[$i]) "*[Rr][Ii][Gg][Hh][Tt]*"`)
				{
					$sideNameID=2;
					$sideName=match("[Rr][Ii][Gg][Hh][Tt]",($influences[$i]));
				}

				//see if an opposingly named influence exists
				
				if($sideNameID)
				{
					if($sideNameID=1)
					{
						if(`substring $sideName 1 1`=="L") 
							$replaceString="R";
						else
							$replaceString="r";

						if(`substring $sideName 2 2`=="E")
							$replaceString=$replaceString+"IGHT";
						else
							$replaceString=$replaceString+"ight";
					}
					else
					if($sideNameID=2)
					{
						if(`substring $sideName 1 1`=="R") 
							$replaceString="L";
						else
							$replaceString="l";

						if(`substring $sideName 2 2`=="I") 
							$replaceString=$replaceString+"EFT";
						else
							$replaceString=$replaceString+"eft";
					}
					
					$tempString=`substitute $sideName $influences[$i] $replaceString`;
					
					if(`stringArrayContains $tempString $influences`) 
						$similarNodes={$tempString};
				}
				
				//if influence is a joint, find similarly labeled joints if present
				
				if($type=="joint" && size($similarNodes)>1)
				{
					$jointType=getAttr($influences[$i]+".type");
					$side=getAttr($influences[$i]+".side");
					
					if($side == 0)
					//object is a center joint
						$similarNodes={$influences[$i]};
					else
					if($jointType != 0 || $side == 1 || $side == 2)
					{
						$tempStringArray=$similarNodes;
						$similarNodes={};

						for($j in $tempStringArray)
							if((getAttr($j+".type"))==$jointType) $similarNodes[(size($similarNodes))]=$j;

						if(! size($similarNodes)) $similarNodes=$tempStringArray;
					}				
				}				
				
				//see if object is a center influence
				if(size($similarNodes)>1)
				{			
					$bbCenter_influenceObj=
					<<
						float((`getAttr ($influences[$i]+".boundingBoxMinX")`+`getAttr ($influences[$i]+".boundingBoxMaxX")`)/2),
						float((`getAttr ($influences[$i]+".boundingBoxMinY")`+`getAttr ($influences[$i]+".boundingBoxMaxY")`)/2),
						float((`getAttr ($influences[$i]+".boundingBoxMinZ")`+`getAttr ($influences[$i]+".boundingBoxMaxZ")`)/2)
					>>;
					
					$rp=`xform -q -ws -rp ($influences[$i])`;
					setAttr ($pointMatrixMultNode+".inPoint") $rp[0] $rp[1] $rp[2];
					$rootSpaceRP=`getAttr ($pointMatrixMultNode+".output")`;
					$rootSpaceRP_relevantAxis=`getAttr ($pointMatrixMultNode+".output"+$axisString)`;
					
					setAttr ($pointMatrixMultNode+".inPoint") ($bbCenter_influenceObj.x) ($bbCenter_influenceObj.y) ($bbCenter_influenceObj.z);
					$rootSpaceBBCenter=`getAttr ($pointMatrixMultNode+".output")`;
					$bbCenter_influenceObj=zenArrayToVector($rootSpaceBBCenter);
					$rootSpaceBB_relevantAxis=`getAttr ($pointMatrixMultNode+".output"+$axisString)`;
					
					//test to see if object is centered

					if(abs($rootSpaceRP_relevantAxis) <= $tol && abs($rootSpaceBB_relevantAxis) <= $tol)
					{
							$similarNodes={$influences[$i]};
					}
				}
				
				//narrow possible matches to objects with reflecting rotate pivots
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$similarNodes={};
					
					for($obj in $tempStringArray)
					{
						$tempFloatArray=`xform -q -ws -rp $obj`;
						$tempFloatArray[($axis-1)]=-$tempFloatArray[($axis-1)];
						
						setAttr ($pointMatrixMultNode+".inPoint") $tempFloatArray[0] $tempFloatArray[1] $tempFloatArray[2];
												
						if(mag((zenArrayToVector($rootSpaceRP))-(zenArrayToVector(`getAttr ($pointMatrixMultNode+".output")`))) <= $tol)
							$similarNodes[(size($similarNodes))]=$obj;
					}
					
					if(! size($similarNodes)) $similarNodes=$tempStringArray;
				}
								
				//narrow possible matches to objects with reflecting bounding box centers
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$similarNodes={};
					
					for($s in $tempStringArray)
					{
						$bbCenter_opposingObj=
						<<
							float((`getAttr ($s+".boundingBoxMinX")`+`getAttr ($s+".boundingBoxMaxX")`)/2),
							float((`getAttr ($s+".boundingBoxMinY")`+`getAttr ($s+".boundingBoxMaxY")`)/2),
							float((`getAttr ($s+".boundingBoxMinZ")`+`getAttr ($s+".boundingBoxMaxZ")`)/2)
						>>;
						
						$tempFloatArray=(zenVectorToArray($bbCenter_opposingObj));
						setAttr ($pointMatrixMultNode+".inPoint") $tempFloatArray[0] $tempFloatArray[1] $tempFloatArray[2];
						
						$bbCenter_opposingObj=zenArrayToVector(`getAttr ($pointMatrixMultNode+".output")`);
						
						switch($axis)
						{
							case 1:

								$bbCenter_opposingObj=<<(-$bbCenter_opposingObj.x),($bbCenter_opposingObj.y),($bbCenter_opposingObj.z)>>;
								break;

							case 2:

								$bbCenter_opposingObj=<<($bbCenter_opposingObj.x),(-$bbCenter_opposingObj.y),($bbCenter_opposingObj.z)>>;
								break;

							case 3:

								$bbCenter_opposingObj=<<($bbCenter_opposingObj.x),($bbCenter_opposingObj.y),(-$bbCenter_opposingObj.z)>>;
								break;
						}
						
						if(mag($bbCenter_influenceObj-$bbCenter_opposingObj)<$tol) $similarNodes[(size($similarNodes))]=$s;
					}
					
					if(! size($similarNodes)) $similarNodes=$tempStringArray;
				}
				
				if(size($similarNodes)>1) warning("Multiple matches for "+($influences[$i])+". Using "+$similarNodes[0]+".");
				
				if(size($similarNodes)==0) warning("No matches for "+($influences[$i])+".");
				else
				{
					$opposites[$i]=`zenFirstIndexOfStringInArray ($similarNodes[0]) $influences`;
					$opposites[($opposites[$i])]=$i;
				}	
				
				if(`progressWindow -q -ic`)
				{
					undoInfo -swf 1;
					delete $pointMatrixMultNode;
					progressWindow -ep;
					EnableAll;
					error "User Interupt.";
				}

				progressWindow -e -s 1;	
			}
		}
		
		progressWindow -ep;
		
		delete $pointMatrixMultNode;

	//find	opposing vertices

	int	$intermediateObj=`getAttr ($inputGeometry+".intermediateObject")`;
		
		setAttr ($inputGeometry+".intermediateObject") 0;
		
	int	$undoInfoState=`undoInfo -q -swf`;

	int	$opposingVerts[];
		
		$err=catch($opposingVerts=zenVertexSymmetryNode(0,$axis,$inputGeometry,$root));
	
		if($err)
		{
			setAttr ($inputGeometry+".intermediateObject") $intermediateObj;
			error("Error sorting reflecting vertices.");
		}
				
	float	$weight;
	
	int	$npSwitch=-1;
	
		if($positiveToNegative) $npSwitch=1;
			
	//set weights
	
		progressWindow -isInterruptable 1 -title "Working" -status "Setting Influence Weights" -max (size($opposingVerts)/2) -progress 0;
	
	int	$normalizeWeights=`getAttr ($skinClusterNode+".normalizeWeights")`;
	
		setAttr ($skinClusterNode+".normalizeWeights") true;
		
	string	$vertInfluences[];
	float	$vertInfluenceWeights[];

	int	$influenceIndex;
	int	$oppositeIndex;
	
	string	$oppositeInfluence;
	string	$sourceConnection;
	string	$targetConnection;
	
		for($i=0;$i<(size($opposingVerts));$i++)
		{
			if($opposingVerts[$i]*$npSwitch<0)
			{
				for($n=0;$n<(size($opposites));$n++)
				{
					$sourceConnection=($skinClusterNode+".weightList["+(string($i))+"].weights["+(string($n))+"]");
					$targetConnection=($skinClusterNode+".weightList["+(string(abs($opposingVerts[$i])))+"].weights["+(string($opposites[$n]))+"]");
					
					if($sourceConnection!=$targetConnection)
					{
						if($connect)
							connectAttr -f $sourceConnection $targetConnection;
						else
						{
							$weight=`getAttr $sourceConnection`;
							setAttr $targetConnection $weight;
						}
					}
				}
				

				if(`progressWindow -q -ic`)
				{
					setAttr ($inputGeometry+".intermediateObject") $intermediateObj;
					setAttr ($skinClusterNode+".normalizeWeights") $normalizeWeights;
					progressWindow -ep;
					skinPercent -nrm true $skinClusterNode (`polyListComponentConversion -tv $outputGeometry`);
					undoInfo -swf 1;
					EnableAll;;
					error "User Interupt.";
				}

				progressWindow -e -s 1;
			}
		}
			
		progressWindow -ep;
		
		skinPercent -nrm true $skinClusterNode (polyListComponentConversion("-tv",$outputGeometry));
				
		setAttr ($skinClusterNode+".normalizeWeights") $normalizeWeights;
		
		dagPose -r -g $poseNode;
		
		setAttr ($inputGeometry+".intermediateObject") $intermediateObj;
		
		print("Operation took "+`timerX -st $timer`+" seconds.");
		
		EnableAll;
				
	return	1;
}


