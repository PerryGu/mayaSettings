/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: zenTools
''    Author:  
''    Last Updated: Feb 13, 2008
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/curve_tools/4337.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//test to make sure zenTools is loaded
if(!`exists zenLoop`) source zenTools;
requires "decomposeMatrix";

global proc string zenSoftModsOnMesh
(
	string	$edges,
	int	$handleNum,
	float	$falloff,
	int	$maintainOffset
)
{
	//create a surfaceNode for the rivet
	string	$zenLoftArray[]=`zenLoftBetweenEdgeLoopPathRings 3`;
	
	//delete unwanted transform, evalDefferred prevents deletion of surfaceNode before it can be used
		$surfaceNode=$zenLoftArray[0];
		zenDeferCommand("delete "+$zenLoftArray[1]);
		
	string	$mesh=zenReturnFirstStringItem(`ls -o $edges`);

	string	$target=`createNode transform`;	

	string	$pointOnSurfaceInfoNode = `createNode -n "pointOnSurfaceInfo#" pointOnSurfaceInfo`;
		setAttr ".turnOnPercentage" 1;
		setAttr ".parameterU" 0.5;
		setAttr ".parameterV" 0.5;
		setAttr ".caching" true;

		//////
		// make poly average vertex node to average the vertices surrounding the face, 
		// so that  rotations of mesh constraint won't cause flipping on extreme single 
		// face vertex creases (such as the wrinkle in a brow furrow, for example):
		//
		string $face_verts[] = ls( "-l", "-fl", 
			`polyListComponentConversion -tv {$edgeA,$edgeB}`);
		select $face_verts ;

		// must be non negative:
		if( $falloff <=0 ) $falloff = 1;
		int $i;
		for($i=0;$i<$falloff; $i++)
		{
			// weird args, eh!? Ask Alias, not me:
			polySelectConstraint -pp 1 -t 0x0001 ;	//expand verts
		}			

		$face_verts = `ls -l -fl -sl` ;
		string $pAvgNode[] = `polyAverageVertex -i ($falloff*2) $face_verts`;
		string $pAvg = `rename $pAvgNode[0] "averageDerivatives#"`;
		string $geomOrigDgIn[] = `listConnections  -s 1 -d 0 -p 1 ($pAvg+".inputPolymesh")`;
		string $geomOrigDgOut[] = `listConnections  -s 0 -d 1 -p 1 ($pAvg+".output")`;	

		/////
		// determine if transform requested to constraint onto mesh
		// is connected to a deformer that is in the history of the mesh 
		// we are constraining onto. if this is the case, then we need
		// to do some additional dg vo-doo so that the resultant graph
		// is no longer cyclic, and in result, this is the first step 
		// that allows us to "parent" deformers (like clusters or joints)
		// directly onto the geometry that they are deforming...
		//
		string $historicTransforms[] = ls("-type", "transform", `listHistory -il 2 -gl 1 $geomOrigDgIn[0]`);
		int $isCyclic = false;
		for($node in $historicTransforms){
			if( $node == $orig_target ){  
				$isCyclic = true ;  
				break;
			}
		}
		string $cyclicDeformer;
		if( $isCyclic )
		{
			string $futureDeformers[] = ls( "-type", "geometryFilter", 
					`listHistory -future 1 -il 2 -pdo 1 -lv 1 $orig_target`);

			string $historicDeformers[] = ls("-type", "geometryFilter", 
						`listHistory -il 2 -gl 1 -pdo 1 $geomOrigDgIn[0]`);

			for($past in $historicDeformers){
				for($future in $futureDeformers){
					if($future == $past){
						$cyclicDeformer = $future ;
						break;
					}
				}
			}
			if(`objExists $cyclicDeformer`)
			{
				int $defSize = `getAttr -size ($cyclicDeformer+".input")`;
				int $dindex = 0;
				for($i=0; $i<$defSize; $i++){
					string $conn[] = `listConnections -s 0 -d 1 ($cyclicDeformer+".outputGeometry["+$i+"]")`;
					string $meshUpStream[] = 
						ls( "-type", "mesh", 
						`listHistory -future true $conn[0]`);				
					for($upmsh in $meshUpStream){
						string $meshDaddy[] = ls("-type","transform",`listRelatives -p $upmsh`);
						if($meshDaddy[0] == $mesh || $upmsh == $mesh){
							$dindex = $i;
							break;
						}
					}
				}
				string $incoming[] = 
					`listConnections -scn 1 
						-p 1 -s 1 -d 0 ($cyclicDeformer+".input["+$dindex+"].inputGeometry")`;
				string $groupParts[] = `ls -o -type groupParts $incoming`;
				if(`size $groupParts`)
				{
					$incoming = `listConnections -scn 1 
						-p 1 -s 1 -d 0 ($groupParts[0]+".inputGeometry")`;
				}
				//
				// note: if you don't disconnect, turn off node state, 
				// and reconnect, and attach these attrs in this order, 
				// then, ka-blam, maya poops out and insta-crashes:
				//
				disconnectAttr ($pAvg+".output") $geomOrigDgOut[0] ;
				disconnectAttr $geomOrigDgIn[0] ($pAvg+".inputPolymesh") ;
				setAttr ($pAvg+".nodeState") 1 ;
				connectAttr $incoming[0] ($pAvg+".inputPolymesh");
				string $incomingNode[] = `ls -o $incoming[0]`;
				setAttr ($incomingNode[0]+".caching") 1 ; // <- big speed improvement! (uses a bit more ram though)
			}	
		}
		else{
			disconnectAttr ($pAvg+".output") $geomOrigDgOut[0] ;
			disconnectAttr $geomOrigDgIn[0] ($pAvg+".inputPolymesh") ;
			setAttr ($pAvg+".nodeState") 1 ;
			connectAttr ($objName[0]+".w") ($pAvg+".inputPolymesh") ; 
		}

		connectAttr $geomOrigDgIn[0]  $geomOrigDgOut[0] ;	
		setAttr ($pAvg+".nodeState") 0 ;
		setAttr ($pAvg+".alpha") 0.25;
		setAttr ($pAvg+".beta") 0.50;
		setAttr ($pAvg+".caching") true;

		/////	
		// connect up the rest of the attrs that output the
		// nurbs surface from the polygon face:
		//
		connectAttr -f ($surfaceNode+".outputSurface") ($pointOnSurfaceInfoNode+".inputSurface");
		connectAttr -f ($curve1+ ".outputCurve") ($surfaceNode+ ".inputCurve[0]");
		connectAttr -f ($curve2+ ".outputCurve") ($surfaceNode + ".inputCurve[1]");
		connectAttr -f ($pAvg+".output") ($curve1+ ".inputMesh");
		connectAttr -f ($pAvg+".output") ($curve2+ ".inputMesh");

		///
		// hook in some higher level attr controls if needed for user:
		//
		addAttr -ln "uValue" -at double  -min 0 -max 1 -dv .5 $constrainPt[0];
		setAttr -e -keyable true ($constrainPt[0]+".uValue");
		connectAttr -f ($constrainPt[0]+".uValue") ($pointOnSurfaceInfoNode+".parameterU");		
		addAttr -ln "vValue" -at double  -min 0 -max 1 -dv .5 $constrainPt[0];
		setAttr -e -keyable true ($constrainPt[0]+".vValue");
		connectAttr -f ($constrainPt[0]+".vValue") ($pointOnSurfaceInfoNode+".parameterV");

		/////	
		// compute proper complete transformation using a surface 
		// derivative constructed world space transform matrix
		// so that rotations and translations are completely stable :
		//
		string $matrix = `createNode fourByFourMatrix -n "fourByFourMatrix#"`;
		string $dcmat = `createNode decomposeMatrix -n "decomposeMatrix#"`;
		connectAttr ($pointOnSurfaceInfoNode+".nnx") ($matrix+".i00");
		connectAttr ($pointOnSurfaceInfoNode+".nny") ($matrix+".i01");
		connectAttr ($pointOnSurfaceInfoNode+".nnz") ($matrix+".i02");
		connectAttr ($pointOnSurfaceInfoNode+".nux") ($matrix+".i10");
		connectAttr ($pointOnSurfaceInfoNode+".nuy") ($matrix+".i11");
		connectAttr ($pointOnSurfaceInfoNode+".nuz") ($matrix+".i12");
		connectAttr ($pointOnSurfaceInfoNode+".nvx") ($matrix+".i20");
		connectAttr ($pointOnSurfaceInfoNode+".nvx") ($matrix+".i21");
		connectAttr ($pointOnSurfaceInfoNode+".nvx") ($matrix+".i22");
		connectAttr ($pointOnSurfaceInfoNode+".px")  ($matrix+".i30");
		connectAttr ($pointOnSurfaceInfoNode+".py")  ($matrix+".i31");
		connectAttr ($pointOnSurfaceInfoNode+".pz")  ($matrix+".i32");
		connectAttr ($matrix+".o") ($dcmat+".imat");
		connectAttr ($dcmat+".ot") ($constrainPt[0]+".t");
		connectAttr ($dcmat+".or") ($constrainPt[0]+".r");

		$attrs = {"t","tx","ty","tz","r","rx","ry","rz"};
		for($attr in $attrs) setAttr -k 0 -l 1 ($constrainPt[0]+"."+$attr);
		for($attr in $attrs) setAttr -k 1 -l 0 ($target+"."+$attr);

		string $group;
		if(`nodeType $orig_target` == "transform"){	
			string $bindIMatrix[] = `duplicate -rr -rc $orig_target`;
			delete `listRelatives -ad $bindIMatrix`;
			color -ud 8 $bindIMatrix[0] ;
			setAttr ($bindIMatrix[0]+".displayHandle") 0;		
			$group = `rename $bindIMatrix[0] "hyperRealMeshOffset#"`;		
		}else{
			$group = `createNode transform -name "hyperRealMeshOffset#"`;
			delete `pointConstraint $orig_target $group`;
			delete `orientConstraint $orig_target $group`;
			delete `scaleConstraint $orig_target $group`;				
		}
		$attrs = {"t","tx","ty","tz","r","rx","ry","rz","sx","sy","sz","s","v"};	
		for($attr in $attrs) setAttr -k 1 -l 0 ($group+"."+$attr);	
		parent $group $constrainPt[0];
		parent $target $group ;	

		/////  
		// here's the key part that allows us to parent 
		// the deformers to the geometry:
		//
		if($isCyclic == true && `objExists $cyclicDeformer` 
			&& size(`ls -type geometryFilter $cyclicDeformer`) )
		{
			print "// Connecting Mesh Pt's Inverse Matrix into Deformer's Bind Pre Matrix Attribute (thats how the magic happens):\n" ;
			if(`nodeType $cyclicDeformer` == "cluster" )
			{
				evalEcho("connectAttr "+$group+".worldInverseMatrix[0] "+$cyclicDeformer+".bindPreMatrix ;");
				setAttr ($cyclicDeformer+".relative") 0;
			}
			else if( `nodeType $cyclicDeformer` == "softMod" )
			{
				evalEcho("connectAttr "+$group+".worldInverseMatrix[0] "+$cyclicDeformer+".bindPreMatrix ;");
				connectAttr ($constrainPt[0]+".t") ($cyclicDeformer+".falloffCenter");
				addAttr -ln "radius" -at double -min 0 -dv 5 $orig_target;
				setAttr -e -keyable true ($orig_target+".radius");
				setAttr ($orig_target+".radius") `getAttr ($cyclicDeformer+".falloffRadius")`;
				connectAttr -f ($orig_target+".radius") ($cyclicDeformer+".falloffRadius");
				setAttr ($cyclicDeformer+".relative") 0;
			}
			else if( `nodeType $cyclicDeformer` == "skinCluster" )
			{
				string $scMatrix[] = `listConnections -s 0 -d 1 -p 1 ($orig_target+".worldMatrix")`;
				if(`size $scMatrix`)
				{
					int $matrix_index = substitute( "\\]$", ((string)`match "[0-9]+\\]$" $scMatrix[0]`), "");
					evalEcho("connectAttr "+$group+".worldInverseMatrix[0] "+$cyclicDeformer+".bindPreMatrix["+$matrix_index+"] ;");
				}
			}
		}
		select $sel ;
		return "";

}