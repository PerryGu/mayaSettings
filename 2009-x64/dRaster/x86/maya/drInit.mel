// Copyright 2007 dRaster, Inc.
// dRaster.com
{
	global proc int dR_stringArrayIdx(string $arr[], string $findStr) {
		int $curIdx;
		for($curIdx = 0; $curIdx < size($arr); $curIdx++) {
			if($arr[$curIdx] == $findStr) {
				return $curIdx;
			}
		}

		return -1;
	}

	global proc dR_quaDrawPrompt(string $msg) {
		string $thisDlg = `setParent -q`;

		string $label = `text -label $msg`;
		string $confirmChkBox = `checkBox -l "Do not show this message again" -h 24 -cc "nexOpt -e -s skipQuaDrawWarning #1; DRPrefsUpdateSwitcher;"`;
		string $okBtn = `button -l "Ok" -w 50 -c "layoutDialog -dismiss \"ok\""`;
		string $cancelBtn = `button -l "Cancel" -w 50 -c "layoutDialog -dismiss \"cancel\""`;

		formLayout -e
			-attachForm $label "top" 0
			-attachForm $label "left" 0
			-attachForm $label "right" 0

			-attachControl $confirmChkBox "top" 6 $label
			-attachForm $confirmChkBox "right" 0

			-attachControl $cancelBtn "top" 6 $confirmChkBox
			-attachForm    $cancelBtn "right" 6

			-attachControl $okBtn "top" 6 $confirmChkBox
			-attachControl $okBtn "right" 6 $cancelBtn

			$thisDlg;

		setFocus $okBtn;
	}

	global proc string[] dR_execObjStrings(string $objStrings[], string $cmd, string $extraCmd)
	{
		string $allResults[];
		string $theseResults[];
		int $numObjStrings = size($objStrings);

		if( $numObjStrings > 0 ) {
			int $i;
			string $thisCmd;
			for( $i=0; $i<$numObjStrings; $i+=1 ) {
				$thisCmd = `substitute "%s" $cmd $objStrings[$i]`;
				if( !catch( $theseResults = evalEcho( $thisCmd ) )) {
					int $numResults = size( $theseResults );
					int $numTotalResults = size( $allResults );
					for( $n = 0; $n < $numResults; $n ++ ) {
						$allResults[$numTotalResults + $n] = $theseResults[$n];
					}
				}
			}
		}

		if($extraCmd != "") {
			eval($extraCmd);
		}

		return $allResults;
	}

	global proc dR_extrudePrompt(string $extrudeNode, string $extrudeNodesStr) {
		global string $nexRefreshCmd;
		string $thisDlg = `setParent -q`;
		//formLayout -e -width 260 $thisDlg;

		float $curExtrudeVal = `getAttr ($extrudeNode + ".localTranslateZ")`;
		string $setTranslateCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.localTranslateZ #1; " + $nexRefreshCmd + "\", \"\")";
		string $extrudeField = `floatSliderGrp -pre 3 -minValue 0 -maxValue 5 -fieldMinValue -1000 -fieldMaxValue 1000 -step .01 -field true -label "Local Z: " -dc $setTranslateCmd -cc $setTranslateCmd -v $curExtrudeVal -cw3 60 60 120 -p $thisDlg`;

		string $setOffsetCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.offset #1; " + $nexRefreshCmd + "\", \"\")";
		string $offsetField = `floatSliderGrp -pre 4 -minValue 0 -maxValue 1 -fieldMinValue -1000 -fieldMaxValue 1000 -step .001 -field true -label "Offset: " -dc $setOffsetCmd -cc $setOffsetCmd -v 0 -cw3 60 60 120 -p $thisDlg`;

		string $setDivCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.divisions #1; " + $nexRefreshCmd + "\", \"\")";
		string $divisionsField = `intSliderGrp -min 1 -max 10 -fieldMinValue 1 -fieldMaxValue 1000 -step 1 -field true -label "Divisions: " -cw3 60 60 120 -v 1 -p $thisDlg -cc $setDivCmd -dc $setDivCmd`;

		float $kftValue = `getAttr ($extrudeNode + ".keepFacesTogether")`;
		string $kftCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.keepFacesTogether #1; " + $nexRefreshCmd + "\", \"\")";
		string $kftCheckbox = `checkBox -l "Keep faces together" -cc $kftCmd -v $kftValue`;

		string $extrudeBtn = `button -l "Ok" -w 50 -c "layoutDialog -dismiss \"extrude\""`;
		string $cancelBtn = `button -l "Cancel" -w 50 -c "layoutDialog -dismiss \"\""`;

		formLayout -e
			-attachForm $extrudeField "left" 0
			-attachForm $extrudeField "right" 6

			-attachControl $offsetField "top"   0 $extrudeField
			-attachForm $offsetField    "left"  0
			-attachForm $offsetField    "right" 6

			-attachControl $divisionsField "top"   0 $offsetField
			-attachForm $divisionsField    "left"  0
			-attachForm $divisionsField    "right" 6

			-attachControl $kftCheckbox "top"   4 $divisionsField
			-attachForm $kftCheckbox    "left"  61
			-attachForm $kftCheckbox    "right" 6
			
			-attachControl $cancelBtn "top" 6 $kftCheckbox
			-attachForm    $cancelBtn "right" 6

			-attachControl $extrudeBtn "top" 6 $kftCheckbox
			-attachControl $extrudeBtn "right" 6 $cancelBtn

			$thisDlg;

		setFocus $extrudeField;
	}

	global proc dR_updatePrompt() {
		string $thisDlg = `setParent -q`;
		//formLayout -e -height 20 $thisDlg;

		string $updateTxt = `text -align "center" -l "A new version of NEX is available!"`;
		string $downloadBtn = `button -l "Download Update" -w 100 -c "layoutDialog -dismiss \"download\""`;
		string $closeBtn = `button -l "Close" -w 100 -c "layoutDialog -dismiss \"\""`;
		string $changeLog = `iconTextButton -w 88 -h 18 -mw 0 -mh 0 -st "iconOnly" -i "nex/changeLogUp.xpm" -hi "nex/changeLogDown.xpm" -si "nex/changeLogDown.xpm"`;
		string $changeLogCmd = "system(\"Load http://draster.com/changelog_NEX\")";
		iconTextButton -e -c $changeLogCmd $changeLog;

		formLayout -e
			-attachForm $updateTxt "left" 0
			-attachForm $updateTxt "right" 6

			-attachForm    $changeLog "left" 0
			-attachForm    $changeLog "right" 0
			-attachControl $changeLog "top" 6 $updateTxt

			-attachControl $closeBtn "top" 6 $changeLog
			-attachForm $closeBtn "right" 6

			-attachControl $downloadBtn "top" 6 $changeLog
			-attachControl $downloadBtn "right" 6 $closeBtn

			$thisDlg;
	}

	global proc dR_bevelPrompt(string $bevelNode, string $bevelNodesStr) {
		global string $nexRefreshCmd;
		string $thisDlg = `setParent -q`;
		//formLayout -e -width 120 $thisDlg;

		float $curOffsetVal = `getAttr ($bevelNode + ".offset")`;
		string $setOffsetCmd = "dR_execObjStrings(" + $bevelNodesStr + ",  \"setAttr %s.offset #1; " + $nexRefreshCmd + "\", \"\")";
		string $bevelField = `floatSliderGrp -pre 3 -minValue 0 -maxValue 1 -step .01 -field true -label "Offset: " -dc $setOffsetCmd -cc $setOffsetCmd -v $curOffsetVal -cw3 70 60 120 -p $thisDlg`;

		string $setDivCmd = "dR_execObjStrings(" + $bevelNodesStr + ",  \"setAttr %s.segments #1; " + $nexRefreshCmd + "\", \"\")";
		string $divisionsField = `intSliderGrp -min 1 -max 10 -fieldMinValue 1 -fieldMaxValue 1000 -step 1 -field true -label "Segments: " -cw3 70 60 120 -v 1 -p $thisDlg -cc $setDivCmd -dc $setDivCmd`;

		string $bevelBtn = `button -l "Ok" -w 50 -c "layoutDialog -dismiss \"bevel\""`;
		string $cancelBtn = `button -l "Cancel" -w 50 -c "layoutDialog -dismiss \"\""`;

		formLayout -e
			-attachForm $bevelField "left" 0
			-attachForm $bevelField "right" 6

			-attachControl 	$divisionsField 	"top" 0 $bevelField
			-attachForm 	$divisionsField 	"left" 0
			-attachForm 	$divisionsField 	"right" 6

			-attachControl $cancelBtn "top" 6 $divisionsField
			-attachForm    $cancelBtn "right" 6

			-attachControl $bevelBtn "top" 6 $divisionsField
			-attachControl $bevelBtn "right" 6 $cancelBtn

			$thisDlg;

		setFocus $bevelField;
	}

	global proc dR_vertExtrudePrompt(string $extrudeNode, string $extrudeNodesStr) {
		global string $nexRefreshCmd;
		string $thisDlg = `setParent -q`;
		//formLayout -e -width 120 $thisDlg;

		float $curWidthVal = `getAttr ($extrudeNode + ".width")`;
		string $setWidthCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.width #1; " + $nexRefreshCmd + "\", \"\")";
		string $widthField = `floatSliderGrp -pre 3 -field true -min 0 -max 1 -label "Width: " -dc $setWidthCmd -cc $setWidthCmd -v $curWidthVal -cw3 60 60 120 -p $thisDlg`;


		float $curLengthVal = `getAttr ($extrudeNode + ".length")`;
		string $setLengthCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.length #1; " + $nexRefreshCmd + "\", \"\")";
		string $lengthField = `floatSliderGrp -pre 3 -minValue -2 -maxValue 5 -fieldMinValue -1000 -fieldMaxValue 1000 -step .01 -field true -label "Length: " -cw3 60 60 120 -v $curLengthVal -dc $setLengthCmd -cc $setLengthCmd -p $thisDlg`;

		float $curDivisionsVal = `getAttr ($extrudeNode + ".divisions")`;
		string $setDivCmd = "dR_execObjStrings(" + $extrudeNodesStr + ",  \"setAttr %s.divisions #1; " + $nexRefreshCmd + "\", \"\")";
		string $divisionsField = `intSliderGrp -min 1 -max 10 -fieldMinValue 1 -fieldMaxValue 1000 -step 1 -field true -label "Divisions: " -cw3 60 60 120 -dc $setDivCmd -cc $setDivCmd -v $curDivisionsVal -p $thisDlg`;

		string $vertExtrudeBtn = `button -l "Ok" -w 50 -c "layoutDialog -dismiss \"extrude\""`;
		string $cancelBtn = `button -l "Cancel" -w 50 -c "layoutDialog -dismiss \"\""`;

		formLayout -e
			-attachForm $widthField "left" 0
			-attachForm $widthField "right" 6

			-attachControl $lengthField "top"   0 $widthField
			-attachForm $lengthField    "left"  0
			-attachForm $lengthField    "right" 6

			-attachControl $divisionsField "top"   0 $lengthField
			-attachForm $divisionsField    "left"  0
			-attachForm $divisionsField    "right" 6

			-attachControl $cancelBtn "top" 6 $divisionsField
			-attachForm $cancelBtn "right" 6

			-attachControl $vertExtrudeBtn "top" 6 $divisionsField
			-attachControl $vertExtrudeBtn "right" 6 $cancelBtn

			$thisDlg;

		setFocus $widthField;
	}

	global proc string dR_getNextCustomCam(string $thisCamera) {
		string $cameras[] = `listCameras`;

		// Reduce to custom cameras only
		string $camera;
		string $customCams[];
		for($camera in $cameras) {
			if(!startsWith($camera, "persp") &&
			   !startsWith($camera, "left") &&
			   !startsWith($camera, "right") &&
			   !startsWith($camera, "bottom") &&
			   !startsWith($camera, "front") &&
			   !startsWith($camera, "top") &&
			   !startsWith($camera, "side")) {
				$customCams[size($customCams)] = $camera;
			}
		}

		// If there are no custom cameras, just cycle through all cameras
		if(size($customCams) == 0) {
			$customCams = $cameras;
		}

		int $thisIdx = dR_stringArrayIdx($customCams, $thisCamera);
		if($thisIdx == -1) {
			$thisIdx = 0;
		}
		int $nextIdx = ($thisIdx+1) % size($customCams);
		return $customCams[$nextIdx];
	}

	global proc dR_cycleCustomCams()
	{
		string $curPanel = `getPanel -wf`;
		string $panelType = `getPanel -typeOf $curPanel`;

		if($panelType == "modelPanel") {
			string $selectedCam = `modelPanel -q -cam $curPanel`;
			string $nextCam = `dR_getNextCustomCam $selectedCam`;
			lookThroughModelPanel $nextCam $curPanel;
		}
	}

	global proc nexUpdateStatusLine()
	{
		global string $gNexStatusIntegration;
		iconTextCheckBox -e -v `nexOpt -q useNexOnSelModeChange` $gNexStatusIntegration;
	}

	global proc float gbl_float_round(float $f, int $n)
	{
		if($n > 0) {
			float $roundScale = pow(10, $n);
			if($f > 0) {
				return(((float)(int)($f * $roundScale + 0.5)) / $roundScale);
			} else {
				return(((float)(int)($f * $roundScale - 0.5)) / $roundScale);
			}
		} else {
			float $roundScale = pow(10, -$n);
			if($f > 0) {
				return(((float)(int)($f/$roundScale + 0.5)) * $roundScale);
			} else {
				return(((float)(int)($f/$roundScale - 0.5)) * $roundScale);
			}
		}
	}


	global proc int dR_createHUDElements()
	{
		int $didCreate = false;

		if(!`isTrue nexHUDCondition`) {
			condition -st true nexHUDCondition;
		}

		if(!`headsUpDisplay -q -ex HUDNEXCurMode`) {
			headsUpDisplay -s 2
				-b (`headsUpDisplay -lastOccupiedBlock 2` + 1)
				-vis false
				-label "NEX Tool:"
				-lw 90
				-dw 90
				-c "interToUI(`nexOpt -q manipType`)"
				-cc "nexHUDCondition"
				HUDNEXCurMode;
			$didCreate = true;
		}

		if(!`headsUpDisplay -q -ex HUDNEXCoordSpace`) {
			headsUpDisplay -s 2
				-b (`headsUpDisplay -lastOccupiedBlock 2` + 1)
				-vis false
				-label "Coord Space:"
				-lw 90
				-dw 90
				-c "interToUI(`nexOpt -q manipCoordSpace`)"
				-cc "nexHUDCondition"
				HUDNEXCoordSpace;
			$didCreate = true;
		}

		if(!`headsUpDisplay -q -ex HUDNEXSoftSel`) {
			headsUpDisplay -s 2
				-b (`headsUpDisplay -lastOccupiedBlock 2` + 1)
				-vis false
				-label "Soft Selection:"
				-lw 90
				-dw 90
				-dp 3
				-c "dR_getSoftSelHUD"
				-cc "nexHUDCondition"
				HUDNEXSoftSel;
			$didCreate = true;
		}

		return $didCreate;
	}

	global proc string dR_getSoftSelHUD()
	{
		string $str;

		if(`nexOpt -q useSoftSel`) {
			$str = "ON";
			$str += " (" + gbl_float_round(`nexOpt -q softSelFalloff`, 3) + ")";
		} else {
			$str = "OFF";
		}

		return $str;
	}


	global proc dR_refreshHUD()
	{
		dR_createHUDElements;

		if(`headsUpDisplay -q -ex HUDNEXCurMode`) {
			if(`currentCtx` != "nexCtx1") {
				headsUpDisplay -e -vis false HUDNEXCurMode;
			} else {
				headsUpDisplay -e -vis (`nexOpt -q hudShowMode`) HUDNEXCurMode;
			}
		}

		if(`headsUpDisplay -q -ex HUDNEXCoordSpace`) {
			if(`currentCtx` != "nexCtx1") {
				headsUpDisplay -e -vis false HUDNEXCoordSpace;
			} else {
				headsUpDisplay -e -vis (`nexOpt -q hudShowCoordSpace`) HUDNEXCoordSpace;
			}
		}

		if(`headsUpDisplay -q -ex HUDNEXSoftSel`) {
			if(`currentCtx` != "nexCtx1") {
				headsUpDisplay -e -vis false HUDNEXSoftSel;
			} else {
				headsUpDisplay -e -vis (`nexOpt -q hudShowSoftSel`) HUDNEXSoftSel;
			}
		}
	}

	global proc dR_updateHUD()
	{
		if(`dR_createHUDElements`) {
			dR_refreshHUD;
		}

		if(`headsUpDisplay -q -ex HUDNEXCurMode`) {
			headsUpDisplay -refresh HUDNEXCurMode;
		}

		if(`headsUpDisplay -q -ex HUDNEXCoordSpace`) {
			headsUpDisplay -refresh HUDNEXCoordSpace;
		}

		if(`headsUpDisplay -q -ex HUDNEXSoftSel`) {
			headsUpDisplay -refresh HUDNEXSoftSel;
		}
	}

	/*
	if(`headsUpDisplay -ex HUDNEXCurMode`) {
		headsUpDisplay -remove HUDNEXCurMode;
	}
	if(`headsUpDisplay -ex HUDNEXCoordSpace`) {
		headsUpDisplay -remove HUDNEXCoordSpace;
	}
	if(`headsUpDisplay -ex HUDNEXSoftSel`) {
		headsUpDisplay -remove HUDNEXSoftSel;
	}
	*/

	global proc int dR_isCtrlHeld()
	{
		return (getModifiers()/4) % 2;
	}

	global proc int dR_isShiftHeld()
	{
		return (getModifiers()/1) % 2;
	}

	global proc dR_updateSymField()
	{
		global string $nexSymText;
		global string $nexSymName;
		global string $nexSymBtn;

		string $name = `nameField -q -object $nexSymName`;
		if($name == "") {
			textField -edit -tx "Symmetry: Select Edge" $nexSymText;
			checkBox -e -v false $nexSymBtn;
		} else {
			string $shortNames[] = `ls $name`;
			textField -edit -tx $shortNames[0] $nexSymText;
			checkBox -e -v true $nexSymBtn;
		}
	}

	global proc dR_updateRefMeshField()
	{
		global string $nexRefSurfaceText;
		global string $nexRefSurfaceName;

		string $name = `nameField -q -object $nexRefSurfaceName`;
		if($name == "") {
			textField -edit -tx "Grid" $nexRefSurfaceText;
		} else {
			string $shortNames[] = `ls $name`;
			textField -edit -tx $shortNames[0] $nexRefSurfaceText;
		}
	}

	global proc dR_setSymMesh(string $dagPath)
	{
		global string $nexSymName;
		nameField -e -object $dagPath $nexSymName;
		dR_updateSymField();
	}

	global proc dR_setRefMesh(string $dagPath)
	{
		global string $nexRefSurfaceName;

		if($dagPath == "") {
			nexCtx -e -curRefMesh "";
			nameField -e -object "" $nexRefSurfaceName;
		} else {
			nexCtx -e -curRefMesh $dagPath;
			nameField -e -object $dagPath $nexRefSurfaceName;
		}
		dR_updateRefMeshField;
		dR_updateCommandPanel();
	}


	global proc dR_setRefGrid()
	{
		dR_setRefMesh("");
	}

	global proc string dR_getParent(string $child) {
		string $parent;
		string $parents[] = `listRelatives -f -p $child`;
		return $parents[0];
	}

	global proc dR_setRefMeshFromSel()
	{
		string $sel[] = `ls -sl -l`;
		string $transformNode;
		string $useShape = "";

		string $meshTransforms[] = `filterExpand -fp true -sm 12`;
		int $numTransforms = size($meshTransforms);
		if($numTransforms) {
			dR_setRefMesh(dR_getParent($meshTransforms[$numTransforms - 1]));
		}
	}

	global proc dR_setSlideMeshFromSel()
	{
		string $sel[] = `ls -sl -l`;
		string $transformNode;
		string $useShape = "";

		string $meshTransforms[] = `filterExpand -fp true -sm 12`;
		int $numTransforms = size($meshTransforms);
		if($numTransforms) {
			dR_setSlideMesh(dR_getParent($meshTransforms[$numTransforms - 1]));
		}
	}

	global proc dR_setSlideMesh(string $dagPath)
	{
		global string $nexSlideName;

		if($dagPath == "") {
			nexCtx -e -curSlideMesh "";
			nameField -e -object "" $nexSlideName;
		} else {
			nexCtx -e -curSlideMesh $dagPath;
			nameField -e -object $dagPath $nexSlideName;
		}

		dR_setRefMesh($dagPath);

		dR_updateSlideField;
		dR_updateCommandPanel();
	}

	global proc dR_setSlideType(string $slideType)
	{
		global string $nexSlideText; 

		if($slideType == "Surface") {
			nexOpt -e slideType surface;
			textField -edit -tx "Surface" $nexSlideText;
		} else {
			nexOpt -e slideType edge;
			textField -edit -tx "Edge" $nexSlideText;
		}
	}

	global proc dR_updateSlideField()
	{
		global string $nexSlideText;
		global string $nexSlideName;

		string $name = `nameField -q -object $nexSlideName`;
		if($name == "") {
			dR_setSlideType("Edge");
		} else {
			string $shortNames[] = `ls $name`;
			textField -edit -tx $shortNames[0] $nexSlideText;
		}
	}

	global proc dR_buildSlideMenu(string $menu)
	{
		menu -e -dai $menu;

		string $transforms[] = `ls -l -type transform`;
		string $fullObjNames[] = `filterExpand -sm 12 -fp true $transforms`;
		$fullObjNames = stringArrayRemoveDuplicates($fullObjNames);
		string $shortObjNames[] = `filterExpand -sm 12 $fullObjNames`;

		int $numPolyNames = size($fullObjNames);

		menuItem -label "Edge" -p $menu -c ("dR_setSlideType(\"Edge\")");
		menuItem -label "Surface" -p $menu -c ("dR_setSlideType(\"Surface\")");

		string $oMenu = `menuItem -label "Other Surface" -p $menu -sm true`;
		if($numPolyNames > 0) {
			int $i;
			for($i = 0; $i < $numPolyNames; $i++) {
				string $fullName = dR_getParent($fullObjNames[$i]);
				string $shortName = $shortObjNames[$i];

				menuItem -label $shortName -c ("dR_setSlideMesh " + $fullName) -p $oMenu;
			}
		}
	}

	global proc dR_buildRefMeshMenu(string $menu)
	{
		menu -e -dai $menu;

		string $hiliteList[] = `ls -hilite -l -type transform`;
		string $selList[] = `ls -sl -l -type transform`;

		string $transforms[] = `ls -l -type transform`;
		string $fullObjNames[] = `filterExpand -sm 12 -fp true $transforms`;
		$fullObjNames = stringArrayRemoveDuplicates($fullObjNames);
		string $shortObjNames[] = `filterExpand -sm 12 $fullObjNames`;

		int $numPolyNames = size($fullObjNames);
		menuItem -p $menu -label "Grid" -c ("dR_setRefMesh \"\"");

		if($numPolyNames > 0) {
			menuItem -p $menu -d true;

			int $i;
			for($i = 0; $i < $numPolyNames; $i++) {
				string $fullName = dR_getParent($fullObjNames[$i]);
				string $shortName = $shortObjNames[$i];

				if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "quadraw") {
					if($fullName == `nexCtx -q -apm`) {
						menuItem -label ($shortName + " (Build Mesh)") -p $menu -en false;
						continue;
					}
				} else {
					if(stringArrayCount($fullName, $hiliteList) > 0) {
						menuItem -label ($shortName + " (Hilited)") -p $menu -en false;
						continue;
					} else if(stringArrayCount($fullName, $selList) > 0) {
						menuItem -label ($shortName + " (Selected)") -p $menu -en false;
						continue;
					}
				}

				menuItem -label $shortName -p $menu -c ("dR_setRefMesh " + $fullName);
			}
		}
	}

	global proc string dR_addModeBtn(string $modeBtn)
	{
		global string $dRModeBtns[];
		$dRModeBtns[size($dRModeBtns)] = $modeBtn;
		return $modeBtn;
	}

	proc int dR_isSelCtx()
	{
		string $currentCtx = `currentCtx`;

		if($currentCtx == "selectSuperContext" || $currentCtx == "moveSuperContext" || $currentCtx == "RotateSuperContext" || $currentCtx == "scaleSuperContext" || $currentCtx == "draggerContext" || $currentCtx == "manipMoveContext" || $currentCtx == "manipRotateContext" || $currentCtx == "manipScaleContext" || $currentCtx == "dragAttrContext") {
			return true;
		}

		return false;
	}

	global proc dR_tglSafeFrame() {
		string $curPanel = `getPanel -wf`;
		if(`getPanel -typeOf $curPanel` == "modelPanel") {
			string $camera = `modelPanel -q -cam $curPanel`;

			if(!`attributeQuery -node $camera -ex nexSafeFrame`) {
				addAttr -longName nexSafeFrame -at bool $camera;
			}

			int $showSafeFrame = (!getAttr($camera + ".nexSafeFrame"));
			setAttr ($camera + ".nexSafeFrame") $showSafeFrame;
			camera -e -displayResolution $showSafeFrame $camera;

			if(`nexOpt -q setSafeFrameOverscan`) {
				if($showSafeFrame) {
					camera -e -overscan `nexOpt -q safeFrameOverscan` $camera;
				} else {
					camera -e -overscan 1.0 $camera;
				}
			}
		}
	}

	global proc dR_exitNex()
	{
		if(`currentCtx` == "nexCtx1") {
			invokeLastAction;
			if(`currentCtx` == "nexCtx1") {
				setToolTo selectSuperContext;
			}
		}
	}

	global proc dR_smartExitNex()
	{
		if(`currentCtx` == "nexCtx1") {
			string $nexManipType = `nexOpt -q manipType`;
			
			// Deferring these prevents crashes in Maya 2008
			switch($nexManipType)
			{
				case "move":
					evalDeferred "setToolTo moveSuperContext";
					break;

				case "rotate":
					evalDeferred "setToolTo RotateSuperContext";
					break;

				case "scale":
					evalDeferred "setToolTo scaleSuperContext";
					break;

				default:
					evalDeferred "setToolTo selectSuperContext";
					break;
			}
		}
	}

	global proc dR_exitForSnap()
	{
		global string $nexLastSnapManipType;
		global int $nexLastMoveManipMode;
		global int $nexLastMoveManipHandle;
		$nexLastSnapManipType = "";

		if(`currentCtx` == "nexCtx1") {
			string $manipType = `nexOpt -q manipType`;
			switch($manipType)
			{
				case "move":
					float $manipPos[] = `nexCtx -q -mp`;
					string $curUnit = `currentUnit -q -l`;
					$manipPos[0] = `convertUnit -fromUnit "cm" -toUnit $curUnit (" " + ((string) $manipPos[0]))`;
					$manipPos[1] = `convertUnit -fromUnit "cm" -toUnit $curUnit (" " + ((string) $manipPos[1]))`;
					$manipPos[2] = `convertUnit -fromUnit "cm" -toUnit $curUnit (" " + ((string) $manipPos[2]))`;

					$nexLastSnapManipType = "move";
					$nexLastMoveManipMode = `manipMoveContext -q -mode Move`;
					$nexLastMoveManipHandle = `manipMoveContext -q -ah Move`;

					int $activeHandle = 3;
					int $nexActiveHandle = `nexOpt -q activeMoveHandle`;
					if($nexActiveHandle >= 1 && $nexActiveHandle <= 3) {
						$activeHandle = $nexActiveHandle - 1;
					}
					manipMoveContext -e -mode 2 Move;
					manipMoveContext -e -ah $activeHandle Move;
					setToolTo moveSuperContext;
					ctxEditMode;
					if(size(`ls -sl`)) {
						scmh -a $manipPos[0] $manipPos[1] $manipPos[2];
					}
					ctxEditMode;
					break;
			}
		}
	}


	global proc dR_setActiveHandle(int $newAxis)
	{
		string $manipType = `nexOpt -q manipType`;
		switch($manipType)
		{
			case "move":
				nexOpt -e activeMoveHandle $newAxis;
				break;

			case "rotate":
				nexOpt -e activeRotateHandle $newAxis;
				break;

			case "scale":
				nexOpt -e activeScaleHandle $newAxis;
				break;
		}
	}

	global proc int dR_getActiveHandle()
	{
		string $manipType = `nexOpt -q manipType`;
		switch($manipType)
		{
			case "move":
				return `nexOpt -q activeMoveHandle`;

			case "rotate":
				return `nexOpt -q activeRotateHandle`;

			case "scale":
				return `nexOpt -q activeScaleHandle`;
		}

		return false;
	}

	global proc int[] dR_getAxisStates(int $activeHandle)
	{
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;

		int $axisStates[3] = { 0, 0, 0 };
		if($activeHandle == $nexHandleX) {
			$axisStates[0] = 1;
		} else if($activeHandle == $nexHandleY) {
			$axisStates[1] = 1;
		} else if($activeHandle == $nexHandleZ) {
			$axisStates[2] = 1;
		} else if($activeHandle == $nexHandleXY) {
			$axisStates[0] = 1;
			$axisStates[1] = 1;
		} else if($activeHandle == $nexHandleYZ) {
			$axisStates[1] = 1;
			$axisStates[2] = 1;
		} else if($activeHandle == $nexHandleXZ) {
			$axisStates[0] = 1;
			$axisStates[2] = 1;
		} else if($activeHandle == $nexHandleXYZ) {
			$axisStates[0] = 1;
			$axisStates[1] = 1;
			$axisStates[2] = 1;
		}
		return $axisStates;
	}

	global proc int dR_getHandleFromAxisStates(int $axis[], string $manipType, int $axisChange)
	{
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;

		if($axis[0] && !$axis[1] && !$axis[2]) {
			return $nexHandleX;
		} else if($axis[1] && !$axis[0] && !$axis[2]) {
			return $nexHandleY;
		} else if($axis[2] && !$axis[0] && !$axis[1]) {
			return $nexHandleZ;
		} else if($axis[0] && $axis[1] && !$axis[2]) {
			if($manipType == "rotate") {
				if($axisChange == $nexHandleX) {
					return $nexHandleX;
				}
				return $nexHandleY;
			} else {
				return $nexHandleXY;
			}
		} else if($axis[1] && $axis[2] && !$axis[0]) {
			if($manipType == "rotate") {
				if($axisChange == $nexHandleY) {
					return $nexHandleY;
				}
				return $nexHandleZ;
			} else {
				return $nexHandleYZ;
			}
		} else if($axis[0] && $axis[2] && !$axis[1]) {
			if($manipType == "rotate") {
				if($axisChange == $nexHandleX) {
					return $nexHandleX;
				}
				return $nexHandleZ;
			} else {
				return $nexHandleXZ;
			}
		} else if($axis[0] && $axis[1] && $axis[2]) {
			return $nexHandleXYZ;
		}

		return 0;
	}

	global proc dR_setActiveAxis(int $axisChange)
	{
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;

		string $curManip = `nexOpt -q manipType`;
		if((getModifiers()/4) % 2 && $curManip != "rotate") {
			int $activeHandle = `dR_getActiveHandle`;
			int $axisStates[] = dR_getAxisStates($activeHandle);

			if($axisChange == $nexHandleX) {
				$axisStates[0] = !$axisStates[0];
			} else if($axisChange == $nexHandleY) {
				$axisStates[1] = !$axisStates[1];
			} else if($axisChange == $nexHandleZ) {
				$axisStates[2] = !$axisStates[2];
			}
			int $newHandle = `dR_getHandleFromAxisStates $axisStates $curManip $axisChange`;
			if($newHandle) {
				dR_setActiveHandle($newHandle);
			}
		} else {
			dR_setActiveHandle($axisChange);
		}

		dR_updateCommandPanel;
	}

	global proc int dR_isAxisActive(int $axis)
	{
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;
		int $activeHandle = `dR_getActiveHandle`;

		if($activeHandle == $nexHandleXYZ) {
			return true;
		} else {
			if($axis == $nexHandleX) {
				if($activeHandle == $nexHandleX || $activeHandle == $nexHandleXY || $activeHandle == $nexHandleXZ) {
					return true;
				}
			} else if($axis == $nexHandleY) {
				if($activeHandle == $nexHandleY || $activeHandle == $nexHandleXY || $activeHandle == $nexHandleYZ) {
					return true;
				}
			} else if($axis == $nexHandleZ) {
				if($activeHandle == $nexHandleZ || $activeHandle == $nexHandleXZ || $activeHandle == $nexHandleYZ) {
					return true;
				}
			}
		}

		return false;
	}

	global proc dR_enterForSnap()
	{
		global string $nexLastSnapManipType;
		global int $nexLastMoveManipMode;
		global int $nexLastMoveManipHandle;

		if($nexLastSnapManipType != "") {
			// Restore the handles to their previous values
			manipMoveContext -e -m $nexLastMoveManipMode Move;
			manipMoveContext -e -ah $nexLastMoveManipHandle Move;
			setToolTo nexCtx1;
			nexOpt -e manipType $nexLastSnapManipType;
		}

		$nexLastSnapManipType = "";
	}

	global proc dR_updateCommandPanel() {
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;
		global string $dRModeBtns[];
		int $i;
		for($i = 0; $i < size($dRModeBtns); $i++)
		{
			string $controlLabel = `control -q -ann $dRModeBtns[$i]`;
			switch($controlLabel)
			{

				case "Select":
					string $selectOpt = `nexOpt -q selectOption`;	

					switch($selectOpt)
					{
						case "hybrid":
							if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "select") {
								iconTextButton -e -i "nex/hybridOn.xpm" -si "nex/hybridOn.xpm" $dRModeBtns[$i];
							} else {
								iconTextButton -e -i "nex/hybridOff.xpm" -si "nex/hybridOn.xpm" $dRModeBtns[$i];
							}
							break;

						case "raycast":
							if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "select") {
								iconTextButton -e -i "nex/paintOn.xpm" -si "nex/paintOn.xpm" $dRModeBtns[$i];
							} else {
								iconTextButton -e -i "nex/paintOff.xpm" -si "nex/paintOn.xpm" $dRModeBtns[$i];
							}
							break;

						default:
							if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "select") {
								iconTextButton -e -i "nex/selectOn.xpm" -si "nex/selectOn.xpm" $dRModeBtns[$i];
							} else {
								iconTextButton -e -i "nex/selectOff.xpm" -si "nex/selectOn.xpm" $dRModeBtns[$i];
							}
							break;
					}

					break;

				case "Paint Select":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "paint") {
						iconTextButton -e -i "nex/paintOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/paintOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "Move":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "move") {
						iconTextButton -e -i "nex/translateOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/translateOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "Rotate":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "rotate") {
						iconTextButton -e -i "nex/rotateOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/rotateOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "Scale":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "scale") {
						iconTextButton -e -i "nex/scaleOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/scaleOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "weldBtn":
				{
					// Only visible when in vertex or edge mode
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "weld") {
						iconTextButton -e -i "nex/targetWeldOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/targetWeldOff.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "Slide":
				{
					checkBox -e -v `nexOpt -q slide` $dRModeBtns[$i];
					break;
				}

				case "Connect Slide Radio":
				{
					radioButtonGrp -e -sl (`nexOpt -q connectCurLmbMap` == "slide") nexConnectSlide;
					radioButtonGrp -e -sl (`nexOpt -q connectCurLmbMap` == "segments") nexConnectSegments;
					radioButtonGrp -e -sl (`nexOpt -q connectCurLmbMap` == "pinch") nexConnectPinch;
					break;
				}

				case "Bridge Divisions Radio":
				{
					radioButtonGrp -e -sl (`nexOpt -q bridgeCurLmbMap` == "divisions") nexBridgeDivisions;
					radioButtonGrp -e -sl (`nexOpt -q bridgeCurLmbMap` == "taper") nexBridgeTaper;
					radioButtonGrp -e -sl (`nexOpt -q bridgeCurLmbMap` == "twist") nexBridgeTwist;
					radioButtonGrp -e -sl (`nexOpt -q bridgeCurLmbMap` == "offset") nexBridgeOffset;
					break;
				}

				case "Vertex Extrude Divisions Radio":
				{
					radioButtonGrp -e -sl (`nexOpt -q extrudeVertexCurLmbMap` == "divisions") nexVertExtrudeDivisions;
					radioButtonGrp -e -sl (`nexOpt -q extrudeVertexCurLmbMap` == "width") nexVertExtrudeWidth;
					radioButtonGrp -e -sl (`nexOpt -q extrudeVertexCurLmbMap` == "length") nexVertExtrudeHeight;
					break;
				}

				case "Face Extrude Divisions Radio":
				{

					radioButtonGrp -e -sl (`nexOpt -q extrudeFaceCurLmbMap` == "divisions") nexFaceExtrudeDivisions;
					radioButtonGrp -e -sl (`nexOpt -q extrudeFaceCurLmbMap` == "localz") nexFaceExtrudeLocalZ;
					radioButtonGrp -e -sl (`nexOpt -q extrudeFaceCurLmbMap` == "offset") nexFaceExtrudeOffset;
					break;
				}

				case "Bevel Divisions Radio":
				{
					radioButtonGrp -e -sl (`nexOpt -q polyBevelCurLmbMap` == "segments") nexBevelDivisions;
					radioButtonGrp -e -sl (`nexOpt -q polyBevelCurLmbMap` == "offset") nexBevelOffset;
					break;
				}


				case "cutBtn":
				{
					// Only visible when in vertex or edge mode
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "cut") {
						iconTextButton -e -i "nex/mcutOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/mcutOff.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "connectBtn":
				{
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "connect") {
						iconTextButton -e -si "nex/mConnectOn.xpm" -i "nex/mConnectOn.xpm" $dRModeBtns[$i];
					} else if(`nexCtx -q -cdc`) {
						iconTextButton -e -si "nex/mConnectOn.xpm" -i "nex/mConnectOff.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -si "nex/mConnectOn.xpm" -i "nex/mConnectOffE.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "bridgeBtn":
				{
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "bridge") {
						iconTextButton -e -si "nex/NEXBridgeOn.xpm" -i "nex/NEXBridgeOn.xpm" $dRModeBtns[$i];
						iconTextButton -e -en true $dRModeBtns[$i];
					} else if(`nexCtx -q -gfb`) {
						iconTextButton -e -si "nex/NEXBridgeOn.xpm" -i "nex/NEXBridgeOff.xpm" $dRModeBtns[$i];
						iconTextButton -e -en true $dRModeBtns[$i];
					} else {
						iconTextButton -e -si "nex/NEXBridgeOffE.xpm" -i "nex/NEXBridgeOffE.xpm" $dRModeBtns[$i];
						iconTextButton -e -en false $dRModeBtns[$i];
					}

					break;
				}

				case "bevelBtn":
				{
					// Only visible when in vertex or edge mode
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "bevel") {
						iconTextButton -e -si "nex/NEXBevelOn.xpm" -i "nex/NEXBevelOn.xpm" $dRModeBtns[$i];
					} else if(`nexCtx -q -gbe`) {
						iconTextButton -e -si "nex/NEXBevelOn.xpm" -i "nex/NEXBevelOff.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -si "nex/NEXBevelOn.xpm" -i "nex/NEXBevelOffE.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "extrudeBtn":
				{
					// Only visible when in vertex or edge mode
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "extrude") {
						iconTextButton -e -si "nex/extrudeOn.xpm" -i "nex/extrudeOn.xpm" $dRModeBtns[$i];
					} else if(`nexCtx -q -gfe`) {
						iconTextButton -e -si "nex/extrudeOn.xpm" -i "nex/extrudeOff.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -si "nex/extrudeOn.xpm" -i "nex/extrudeOffE.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "Shrink Wrap":
				{
					if(`nexCtx -q -curRefMesh` != "") {
						button -e -en true $dRModeBtns[$i];
					} else {
						button -e -en false $dRModeBtns[$i];
					}
					break;
				}

				case "quaDrawBtn":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "quadraw") {
						iconTextButton -e -i "nex/quadDrawOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/quadDrawOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "lockSelBtn":
					string $manipType = `nexOpt -q manipType`;

					if($manipType != "move" && $manipType != "rotate" && $manipType != "scale") {
						button -e -en false -l "Lock Selected" $dRModeBtns[$i];
					} else {
						if(`nexCtx -q -hs`) {
							button -e -en true -l "Lock Selected" $dRModeBtns[$i];
						} else {
							button -e -en false -l "Lock Selected" $dRModeBtns[$i];
						}
					}

					break;

				case "selLockedBtn":
					string $axisLockSets[] = `ls "nexAxisLockSet_*"`;
					if(size($axisLockSets) == 1) {
						string $vertList[] = `sets -q $axisLockSets[0]`;
						$vertList = `ls -flatten $vertList`;
						string $axisConstraint = `substring $axisLockSets[0] 16 (size($axisLockSets[0]))`;
						button -e -en true -l ("Select Locked (" + size($vertList) + " - " + $axisConstraint + ")")  $dRModeBtns[$i];
					} else {
						button -e -en false -l ("Select Locked")  $dRModeBtns[$i];
					}
					break;

				case "unlockAllBtn":
					string $axisLockSets[] = `ls "nexAxisLockSet_*"`;
					if(size($axisLockSets)) {
						button -e -en true $dRModeBtns[$i];
					} else {
						button -e -en false $dRModeBtns[$i];
					}
					break;

				case "pivotBtn":
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "pivot") {
						iconTextButton -e -i "nex/adjustPivotOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/adjustPivotOff.xpm" $dRModeBtns[$i];
					}
					break;

				case "manipCoordSpaceDrop":
					{
						if(`nexOpt -q manipType` == "pivot") {
							optionMenu -e -en false $dRModeBtns[$i];
						} else {
							optionMenu -e -en true $dRModeBtns[$i];
						}

						string $menuItems[] = `optionMenu -q -ill $dRModeBtns[$i]`;
						int $itemNum;
						for($itemNum = 0; $itemNum < size($menuItems); $itemNum++) {
							string $menuLabel = `menuItem -q -l $menuItems[$itemNum]`;
							if(`nexOpt -q manipCoordSpace` == `tolower $menuLabel`) {
								optionMenu -e -sl ($itemNum + 1) $dRModeBtns[$i];
								break;
							}
						}
					}
					break;

				case "X Field":
				case "Y Field":
				case "Z Field":
					string $manipType = `nexOpt -q manipType`;
					if($manipType == "pivot" || (`nexCtx -q -hs` && ($manipType == "move" || $manipType == "rotate" || $manipType == "scale"))) {
						floatField -e -en 1 $dRModeBtns[$i];
						if($manipType == "pivot") {
							int $activePivotHandle = `nexOpt -q activePivotHandle`;
							if($activePivotHandle >= 8 && $activePivotHandle <= 10) {
								$manipType = "rotate";
							}
						}
						switch($manipType)
						{
							case "move":
							case "pivot":
								float $pos[] = `nexCtx -q -mp`;
								if($controlLabel == "X Field") {
									floatField -e -v $pos[0] $dRModeBtns[$i];
								} else if($controlLabel == "Y Field") {
									floatField -e -v $pos[1] $dRModeBtns[$i];
								} else if($controlLabel == "Z Field") {
									floatField -e -v $pos[2] $dRModeBtns[$i];
								}
								break;

							case "rotate":
								float $orient[] = `nexCtx -q -mo`;
								if($controlLabel == "X Field") {
									floatField -e -v $orient[0] $dRModeBtns[$i];
								} else if($controlLabel == "Y Field") {
									floatField -e -v $orient[1] $dRModeBtns[$i];
								} else if($controlLabel == "Z Field") {
									floatField -e -v $orient[2] $dRModeBtns[$i];
								}
								break;

							case "scale":
								floatField -e -v 1.0 $dRModeBtns[$i];
								break;
						}
					} else {
						floatField -e -v 0 $dRModeBtns[$i];
						floatField -e -en 0 $dRModeBtns[$i];
					}
					break;


				/*
				case "Target Weld":
					if(`currentCtx` == "tWeldCtx1") {
						iconTextCheckBox -e -v true $dRModeBtns[$i];
					} else {
						iconTextCheckBox -e -v false $dRModeBtns[$i];
					}
					break;
				*/

				case "Tweak":
				{
					checkBox -e -v `nexOpt -q useClickDrag` $dRModeBtns[$i];

					if(`nexOpt -q selectOption` == "") {
						checkBox -e -en true $dRModeBtns[$i];
					} else {
						checkBox -e -en false $dRModeBtns[$i];
					}

					break;
				}

				case "Highlight Backfaces":
					checkBox -e -v `nexOpt -q highlightBackfacing` $dRModeBtns[$i];
					break;


				case "Pick/Marquee":
				case "Raycast":
				case "Hybrid Raycast/Marquee":
					radioButtonGrp -e -sl (`nexOpt -q selectOption` == "") nexPickMarqueeGrp;
					radioButtonGrp -e -sl (`nexOpt -q selectOption` == "raycast") nexRaycastGrp;
					radioButtonGrp -e -sl (`nexOpt -q selectOption` == "hybrid") nexHybridRayGrp;
					break;


				case "previewLoopRingBtn":
					checkBox -e -v `nexOpt -q previewLoopRing` $dRModeBtns[$i];
					break;

				case "selConstField":
					if(`nexOpt -q selectOption` == "" && `nexOpt -q useSpecialSelType` && `nexOpt -q specialSelType` == "angle") {
						control -e -en true $dRModeBtns[$i];
					} else {
						control -e -en false $dRModeBtns[$i];
					}

					break;


				case "selConstChk":
					checkBox -e -v `nexOpt -q useSpecialSelType` $dRModeBtns[$i];

					if(`nexOpt -q selectOption` != "") {
						checkBox -e -en false $dRModeBtns[$i];
					} else {
						checkBox -e -en true $dRModeBtns[$i];
					}

					break;

				case "selConstDropdown":
					if(`nexOpt -q selectOption` != "" || !`nexOpt -q useSpecialSelType`) {
						optionMenu -e -en false $dRModeBtns[$i];
					} else {
						optionMenu -e -en true $dRModeBtns[$i];
					}

					string $menuItems[] = `optionMenu -q -ill $dRModeBtns[$i]`;
					int $itemNum;
					int $setItem = false;
					for($itemNum = 0; $itemNum < size($menuItems); $itemNum++) {
						string $menuLabel = `menuItem -q -l $menuItems[$itemNum]`;
						if(`nexOpt -q specialSelType` == strip(tolower($menuLabel))) {
							optionMenu -e -sl ($itemNum + 1) $dRModeBtns[$i];
							break;
						}
					}

					break;

				case "Soft Selection":
					checkBox -e -v `nexOpt -q useSoftSel` $dRModeBtns[$i];
					break;

				case "falloffBubbleBtn":
				{
					int $falloffType = `nexOpt -q softSelFalloffType`;
					if($falloffType != 1 && $falloffType != 2) {
						iconTextButton -e -i "nex/bubbleOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/bubbleOff.xpm" $dRModeBtns[$i];
					}
					break;
				}

				case "falloffPinchBtn":
				{
					if(`nexOpt -q softSelFalloffType` == 1) {
						iconTextButton -e -i "nex/pinchOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/pinchOff.xpm" $dRModeBtns[$i];
					}
					break;
				}


				case "XYZ Axis":

				{
					string $manipType = `nexOpt -q manipType`;
					if($manipType == "move" || $manipType == "rotate" || $manipType == "scale") {
						if(`dR_isAxisActive $nexHandleXYZ`) {
							iconTextButton -e -en true -i "nex/xyzOn.xpm" $dRModeBtns[$i];
						} else {
							iconTextButton -e -en true -i "nex/xyzOff.xpm" $dRModeBtns[$i];
						}
					} else {
						iconTextButton -e -en false -i "nex/xyzDisable.xpm" $dRModeBtns[$i];
					}
					break;
				}

				case "Connect Slide Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "connect") {
						floatField -e -v `nexCtx -gmv connect slide` $dRModeBtns[$i];
					}
					break;
				}

				case "Connect Segments Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "connect") {
						intField -e -v `nexCtx -gmv connect segments` $dRModeBtns[$i];
					}
					break;
				}

				case "Connect Pinch Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexOpt -q manipType` == "connect") {
						floatField -e -v `nexCtx -gmv connect pinch` $dRModeBtns[$i];
					}
					break;
				}

				case "Bridge Divisions Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bridge") {
						intField -e -v `nexCtx -gmv bridge divisions` $dRModeBtns[$i];
					}
					break;
				}

				case "Bridge Taper Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bridge") {
						floatField -e -v `nexCtx -gmv bridge taper` $dRModeBtns[$i];
					}
					break;
				}

				case "Bridge Twist Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bridge") {
						floatField -e -v `nexCtx -gmv bridge twist` $dRModeBtns[$i];
					}
					break;
				}

				case "Bridge Offset Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bridge") {
						intField -e -v `nexCtx -gmv bridge offset` $dRModeBtns[$i];
					}
					break;
				}

				case "VertExtrude Divisions Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudevertex") {
						intField -e -v `nexCtx -gmv extrudeVertex divisions` $dRModeBtns[$i];
					}
					break;
				}

				case "VertExtrude Width Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudevertex") {
						floatField -e -v `nexCtx -gmv extrudeVertex width` $dRModeBtns[$i];
					}
					break;
				}

				case "VertExtrude Height Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudevertex") {
						floatField -e -v `nexCtx -gmv extrudeVertex height` $dRModeBtns[$i];
					}
					break;
				}

				case "Face Extrude Divisions Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudeface") {
						intField -e -v `nexCtx -gmv extrudeface divisions` $dRModeBtns[$i];
					}
					break;
				}
				
				case "Face Extrude Local Z Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudeface") {
						floatField -e -v `nexCtx -gmv extrudeface localz` $dRModeBtns[$i];
					}
					break;
				}

				case "Face Extrude Offset Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "extrudeface") {
						floatField -e -v `nexCtx -gmv extrudeface offset` $dRModeBtns[$i];
					}
					break;
				}

				case "Bevel Divisions Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bevel") {
						intField -e -v `nexCtx -gmv bevel divisions` $dRModeBtns[$i];
					}
					break;
				}

				case "Bevel Offset Field":
				{
					if(`currentCtx` == "nexCtx1" && `nexCtx -q -sm` == "bevel") {
						floatField -e -v `nexCtx -gmv bevel offset` $dRModeBtns[$i];
					}
					break;
				}

				case "X Axis":
				{
					string $manipType = `nexOpt -q manipType`;
					if($manipType == "move" || $manipType == "rotate" || $manipType == "scale") {
						if(`dR_isAxisActive $nexHandleX`) {
							iconTextButton -e -en true -i "nex/xOn.xpm" $dRModeBtns[$i];
						} else {
							iconTextButton -e -en true -i "nex/xOff.xpm" $dRModeBtns[$i];
						}
					} else {
						iconTextButton -e -en false -i "nex/xDisable.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "Y Axis":
				{
					string $manipType = `nexOpt -q manipType`;
					if($manipType == "move" || $manipType == "rotate" || $manipType == "scale") {
						if(`dR_isAxisActive $nexHandleY`) {
							iconTextButton -e -en true -i "nex/yOn.xpm" $dRModeBtns[$i];
						} else {
							iconTextButton -e -en true -i "nex/yOff.xpm" $dRModeBtns[$i];
						}
					} else {
						iconTextButton -e -en false -i "nex/yDisable.xpm" $dRModeBtns[$i];
					}

					break;
				}

				case "Z Axis":
				{
					string $manipType = `nexOpt -q manipType`;
					if($manipType == "move" || $manipType == "rotate" || $manipType == "scale") {
						if(`dR_isAxisActive $nexHandleZ`) {
							iconTextButton -e -en true -i "nex/zOn.xpm" $dRModeBtns[$i];
						} else {
							iconTextButton -e -en true -i "nex/zOff.xpm" $dRModeBtns[$i];
						}
					} else {
						iconTextButton -e -en false -i "nex/zDisable.xpm" $dRModeBtns[$i];
					}
					break;
				}

				case "falloffLinearBtn":
				{
					if(`nexOpt -q softSelFalloffType` == 2) {
						iconTextButton -e -i "nex/linearOn.xpm" $dRModeBtns[$i];
					} else {
						iconTextButton -e -i "nex/linearOff.xpm" $dRModeBtns[$i];
					}
					break;
				}

				case "Snap %":
				{
					intField -e -v `nexOpt -q cutSnapAngle` $dRModeBtns[$i];
					break;
				}

				case "Soft Selection Child":
				case "Soft Selection Falloff":
				case "Soft Selection Show Move":
				case "Soft Selection Show Rotate":
				case "Soft Selection Show Scale":
				case "Soft Selection Use Edge Distance":
				case "Soft Selection Hide Hilites":
				case "distTypeDropdown":
				{
					switch($controlLabel) {
						case "Soft Selection Falloff":
						{
							floatField -e -v `nexOpt -q softSelFalloff` $dRModeBtns[$i];
							break;
						}

						case "distTypeDropdown":
						{
							optionMenu -e -sl `nexOpt -q softSelDistanceType` $dRModeBtns[$i];
							break;
						}
					}

					string $manipType = `nexOpt -q manipType`;
					if(`nexOpt -q useSoftSel` && ($manipType == "move" || $manipType == "rotate" || $manipType == "scale")) {
						control -e -en true $dRModeBtns[$i];
					} else {
						control -e -en false $dRModeBtns[$i];
					}
				}

				break;
			}
		}

		global int $dRCompBtnCount;
		global string $gdRCompBtns[], $gdRCompBtns_UpImages[], $gdRCompBtns_DownImages[], $gdRCompBtns_Names[], $gdRCompBtns_MultiImages[];
		int $isTrueComponentMode = `selectMode -q -co`;
		int $isMultiComponentMode = `nexCtx -q -mcm`;
		string $curSelType = `nexOpt -q selType`;
		for($i = 0; $i < $dRCompBtnCount; $i++) {
			if($isMultiComponentMode) {
				iconTextButton -e -i $gdRCompBtns_MultiImages[$i] $gdRCompBtns[$i];
			} else if($isTrueComponentMode && $curSelType == $gdRCompBtns_Names[$i]) {
				iconTextButton -e -i $gdRCompBtns_DownImages[$i] $gdRCompBtns[$i];
			} else {
				iconTextButton -e -i $gdRCompBtns_UpImages[$i] $gdRCompBtns[$i];
			}

			
		}

		global string $gDRPreferenceWindow;
		if (`window -exists $gDRPreferenceWindow`) {
			DRPrefsUpdateSwitcher;
		}
		
		dR_updateCounters;
		dR_contextPanel;
	}

	global proc dR_convertSelection(string $newSelectionMode)
	{
		switch($newSelectionMode) {
			case "vertex":
				ConvertSelectionToVertices;
				break;
			case "edge":
				ConvertSelectionToEdges;
				break;
			case "face":
				ConvertSelectionToFaces;
				break;
			case "uv":
				ConvertSelectionToUVs;
				break;
		}
	}

	global proc int dR_isTexturePanelVisible()
	{
		string $visPanels[] = `getPanel -vis`;
		string $thisPanel;
		for($thisPanel in $visPanels) {
			if($thisPanel == "polyTexturePlacementPanel1") {
				return true;
			}
		}
		return false;
	}

	global proc dR_selTypeChanged()
	{
		global string $nexLastSelType;
		string $newSelType = "";
		string $selTypeCmd = "selectType -q ";
		if(`selectMode -q -o`) {
			$selTypeCmd += "-ocm ";
		}
		string $compTypes[] = { "vertex", "edge", "facet", "polymeshUV" };
		int $i;
		for($i = 0; $i < size($compTypes); $i++) {
			string $cmd = $selTypeCmd + "-" + $compTypes[$i];
			if(`eval $cmd`) {
				$newSelType = $compTypes[$i];
			}
		}

		if($newSelType != "") {
			if($newSelType == "facet") {
				$newSelType = "face";
			} else if($newSelType == "polymeshUV") {
				$newSelType = "uv";
			}

			if($newSelType == "uv") {
				/*
				if(`currentCtx` == "nexCtx1") {
					dR_smartExitNex;
				}
				*/
			} else {
				if(`nexOpt -q useNexOnSelModeChange` /*&& $newSelType != $nexLastSelType && `dR_hasHilitedPoly`*/) {
					if(`dR_isSelCtx`) {
						if(`dR_isTexturePanelVisible`) {
							warning "The NEX tool cannot be automatically activated while UV Editor is open";
						} else {
							dR_nexTool();
						}
					} else if(`currentCtx` == "nexCtx1" && `dR_isTexturePanelVisible`) {
						dR_smartExitNex;
						warning "The NEX tool has been deactivated because a UV Editor window is open";
					}
				}
			}

		}

		if(`currentCtx` == "nexCtx1" && $newSelType != "vertex" && $newSelType != "edge" && `nexOpt -q manipType` == "weld") {
			nexOpt -e manipType "select";
		}

		nexCtx -e -mcm 0;
		nexOpt -e selType $newSelType;
		$nexLastSelType = $newSelType;

		nexOpt -e useSpecialSelType false;
		dR_updateCommandPanel();
	}

	global proc dR_toggleSpecialSelType(string $specialSelType) {
		string $newSelType;
		switch($specialSelType)
		{
			case "angle":
				$newSelType = "face";
				break;

			case "border":
				$newSelType = "edge";
				break;

			case "shell":
			default:
				$newSelType = "face";
				break;
		}

		int $wasNewSelType = (`nexOpt -q selType` == $newSelType);
		int $wasUseSelType = `nexOpt -q useSpecialSelType`;
		dR_toggleSelectionMode($newSelType, 0, 0);
		if($wasNewSelType && $wasUseSelType && `nexOpt -q specialSelType` == $specialSelType) {
			nexOpt -e useSpecialSelType 0;
		} else {
			nexOpt -e useSpecialSelType 1; 
		}
		nexOpt -e specialSelType $specialSelType; 
		dR_updateCommandPanel;
	}

	global proc dR_setSelType(string $newSelectionMode)
	{
		nexCtx -e -ssc true;
		switch($newSelectionMode) {
			case "vertex":
				selectMode -co; selectType -cv 1 -vertex 1 -subdivMeshPoint 1 -latticePoint 1 -particle 1;
				break;

			case "multi":
			case "edge":
				selectMode -co; selectType -polymeshEdge 1 -subdivMeshEdge 1 -isoparm 1 -surfaceEdge 1;
				break;

			case "face":
				selectMode -co; selectType -surfaceFace 1 -facet 1 -subdivMeshFace 1;
				break;

			case "uv":
				selectMode -co; selectType -locatorUV 1 -polymeshUV 1 -subdivMeshUV 1;
				break;
		}
		nexCtx -e -ssc false;
	}

	global proc int dR_toggleSelectionMode(string $newSelectionMode, int $convertSelection, int $allowToggle)
	{
		global string $nexLastSelType;
		int $hasMcm = `nexCtx -q -mcm`;

		if($newSelectionMode == "object" || ($allowToggle && `selectMode -q -co` && (($newSelectionMode == "multi" && $hasMcm) || (`nexOpt -q selType` == $newSelectionMode && (!$hasMcm || $newSelectionMode == "multi"))))) {
			if(`nexOpt -q useCompModeCustCmd`) {
				string $custCmd = `nexOpt -q compModeCustCmd`;
				//print ($custCmd + "\n");
				eval($custCmd);
			} else {
				//string $hilites[] = `ls -hilite`;
				selectMode -o;
				selectType -ocm -allComponents false;
				selectType -allComponents false;
				hilite -replace {};
				//select $hilites;
				nexOpt -e useSpecialSelType false;
				dR_exitNex;
			}
			return false;
		} else {
			dR_nexTool; 

			if($newSelectionMode != "multi" || !`selectMode -q -co` || `nexOpt -q selType` == "") {
				dR_setSelType($newSelectionMode);
			}

			if($newSelectionMode == "multi") {
				nexCtx -e -mcm 1;
				if($nexLastSelType == "") {
					$nexLastSelType = "edge";
				}
			} else {
				nexCtx -e -mcm 0;
				if($convertSelection) {
					dR_convertSelection($newSelectionMode);
				}
				$nexLastSelType = $newSelectionMode;
			}
			nexOpt -e selType $nexLastSelType;

			if(`nexOpt -q specialSelType` != "") {
				nexOpt -e useSpecialSelType false;
			}

			dR_updateCommandPanel;

			return true;
		}
	}

	global proc dR_updateCounters() {
		global string $nexVertexLabel, $nexEdgeLabel, $nexFaceLabel, $nexUVLabel, $gdRpanel, $gDRTopPane;

		string $selType = `nexOpt -q selType`;
		text -e -en ($selType == "vertex") $nexVertexLabel;
		text -e -en ($selType == "edge") $nexEdgeLabel;
		text -e -en ($selType == "face") $nexFaceLabel;
		text -e -en ($selType == "uv") $nexUVLabel;

		text -e -label `nexCtx -cnt vertex` $nexVertexLabel;
		text -e -label `nexCtx -cnt edge` $nexEdgeLabel;
		text -e -label `nexCtx -cnt face` $nexFaceLabel;
		text -e -label `nexCtx -cnt uv` $nexUVLabel;

		global string $gdRpanel;
/*
		if($selType != "" || size(`filterExpand -ex false -sm 31 -sm 32 -sm 34 -sm 35`)) {
			layout -e -m 1 $gdRpanel;
		} else {
			layout -e -m 0 $gdRpanel;
		}
*/

		dR_updateRefMeshField;
	}

	global proc int dR_isPanelVisible() {
		string $cmdPanel = `getUIComponent "NEX Panel"`;
		return `layout -q -m $cmdPanel`;
	}

	global proc setNexBarWidth() {
		global string $nexRightPanel, $nexLeftPanel;
		global int $dRCmdPanelWidth;

		// Adjust the width of the hide button appropriately
		int $i;
		for($i = 0; $i < 2; $i++) {
			string $cmdBarForm;
			if($i) {
				$cmdBarForm = `substitute "|[^|]*$" $nexRightPanel ""`;
				string $cmdBarChildren[] = `layout -q -ca $cmdBarForm`;
				string $cmdBarChild;
				for($cmdBarChild in $cmdBarChildren) {
					if(`control -q -ann $cmdBarChild` == "Hide NEX Panel" /* || `control -q -ann $cmdBarChild` == "Hide NEX Left Panel" */) {
						iconTextButton -e -width $dRCmdPanelWidth $cmdBarChild;
					}
				}
			} else {
				//$cmdBarForm = `substitute "|[^|]*$" $nexLeftPanel ""`;
			}
		}
	}

	global proc nexDockPanel(int $doDock) {
		global string $nexRightPanel, $nexLeftPanel, $nexFloatWin, $nexFloatForm;
		global int $dRCmdPanelWidth;

		nexOpt -s -e panelDock $doDock;
		
		global string $gDRBottomPane;
		if($gDRBottomPane != "" && catchQuiet(`objectTypeUI $gDRBottomPane`) == 0) {
			dRSaveShelves;
		}

		// Delete all children of the parent form
		string $fChildren[] = `layout -q -ca $nexRightPanel`;
		string $child;
		for($child in $fChildren) {
			deleteUI $child;
		}

		/*
		string $fChildren[] = `layout -q -ca $nexLeftPanel`;
		for($child in $fChildren) {
			deleteUI $child;
		}
		*/

		$fChildren = `layout -q -ca $nexFloatForm`;
		for($child in $fChildren) {
			deleteUI $child;
		}

		string $rightPanel = `getUIComponent "NEX Panel"`;
		//string $leftPanel = `getUIComponent "NEX Left Panel"`;
		int $wasVis = (`window -q -vis $nexFloatWin` || `layout -q -m $rightPanel` /* || `layout -q -m $leftPanel` */);

		switch($doDock)
		{
			case 0: // Float
				layout -e -m false $rightPanel;
				//layout -e -m false $leftPanel;
				nexBuildPanel($nexFloatForm);
				if($wasVis) {
					showWindow $nexFloatWin;
				}
				break;

			case 1: // Dock Right
				//layout -e -m false $leftPanel;
				window -e -vis false $nexFloatWin;
				nexBuildPanel($nexRightPanel);
				layout -e -m $wasVis `getUIComponent "NEX Panel"`;
				setNexBarWidth;
				break;

			case 2: // Dock Left
			/*
				layout -e -m false $rightPanel;
				window -e -vis false $nexFloatWin;
				nexBuildPanel($nexLeftPanel);
				layout -e -m $wasVis `getUIComponent "NEX Left Panel"`;
				setNexBarWidth;
				break;
			*/
		}
	}

	global proc dR_ToggleCommandPanel()
	{
		int $dockVal = `nexOpt -q panelDock`;
		switch($dockVal)
		{
			case 0: // Float
				global string $nexFloatWin;
				window -e -vis (!`window -q -vis $nexFloatWin`) $nexFloatWin;
				break;

			case 1: // Dock Right
				string $cmdPanel = `getUIComponent "NEX Panel"`;
				layout -e -m (!`layout -q -m $cmdPanel`) $cmdPanel;
				setNexBarWidth;
				break;

			case 2: // Dock Left
				/*
				string $cmdPanel = `getUIComponent "NEX Left Panel"`;
				layout -e -m (!`layout -q -m $cmdPanel`) $cmdPanel;
				setNexBarWidth;
				*/
				break;
		}
	}

	global proc DRRebuildMenus()
	{
		global string $gMainWindow;
		setParent $gMainWindow;
		buildHotboxMenus();
		hotBox -updateMenus; 
	}

	global proc DRSavePrefsChanges ()
	{
		global string $gDRPreferenceWindow;
		global int $DRPrefWndScriptJob;

		nexOpt -s;

		// Save optionVars to disk
		savePrefs();
		
		// Close the window, unless this is being called
		// because the window has already closed.
		//
		if (`window -exists $gDRPreferenceWindow`) {
		// Kill the script job that saves the preferences when
		// the window closes so we don't get recursive.
		    scriptJob -force -kill $DRPrefWndScriptJob;
			window -e -vis false $gDRPreferenceWindow;
		}

		$gDRPreferenceWindow = "";

		dR_updateCommandPanel;
	}

	global proc dR_adjustColorSliderOpt(string $colorSlider, string $optName)
	{
		float $newColor[] = `colorSliderGrp -q -rgb $colorSlider`;
		nexOpt -e $optName $newColor[0] $newColor[1] $newColor[2] 1;
	}

	global proc DRCancelPrefsChanges ()
	{
		global string $gDRPreferenceWindow;
		global int $DRPrefWndScriptJob;

		// Put the option vars back to what they were when 
		// the window was opened.
		nexOpt -r;

		// Kill the script job that saves the preferences when
		// the window closes.
		scriptJob -force -kill $DRPrefWndScriptJob;
		
		// Close the window
		window -e -vis false $gDRPreferenceWindow;
		$gDRPreferenceWindow = "";

		dR_updateCommandPanel;
	}

	global proc DRPrefsUpdateSwitcher() 
	{
		nexUpdateStatusLine;

		global string $gDRPreferenceWindow;

		if(`window -ex $gDRPreferenceWindow`) {
			setParent $gDRPreferenceWindow;

			if (`columnLayout -q -numberOfChildren "nexGeneralPrefsCol"` > 0) {
				checkBoxGrp -e
					-value1 `nexOpt -q useNexOnSelModeChange`
					nexUseNexOnSelModeChange;

				/*
				checkBoxGrp -e
					-value1 `nexOpt -q disableConstOnSTypeChange`
					nexDisableConstOnSTypeChange;
				*/

				intSliderGrp -e -v `nexOpt -q tweakDeadSpaceRange` nexTweakDeadSpaceRange;
				intSliderGrp -e -v `nexOpt -q selectDeadSpaceRange` nexSelectDeadSpaceRange;

				checkBoxGrp -e
					-value1 `nexOpt -q autoloadTextures`
					nexAutoloadTextures;

				checkBoxGrp -e
					-value1 `nexOpt -q customViewMM`
					nexCustomViewMM;

				checkBoxGrp -e
					-value1 (!`nexOpt -q skipQuaDrawWarning`)
					nexSkipQuaDrawWarning;

/*
				checkBoxGrp -e
					-value1 `nexOpt -q useMultiInWeld`
					nexUseMultiInWeld;
				checkBoxGrp -e
					-value1 `nexOpt -q tumblePivotOnSelChange`
					nexTumblePivotOnSelChange;
*/

				checkBoxGrp -e
					-value1 `nexOpt -q updateCheck`
					nexUpdateCheck;

				checkBoxGrp -e -v1 `nexOpt -q tweakFishingLine` nexTweakFishingLine;

				float $color[] = `nexOpt -q tweakFishingLineColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexTweakFishingLineColor;
			}

			if (`columnLayout -q -numberOfChildren "nexKbdMousePrefsCol"` > 0)  {
				checkBoxGrp -e
					-value1 `nexOpt -q rightClickUndo`
					switcherRightClickUndo;

				checkBoxGrp -e
					-value1 `nexOpt -q shiftCtrlCopy`
					nexShiftCtrlCopy;

				checkBoxGrp -e
					-value1 `nexOpt -q shiftCtrlExtrude`
					nexShiftCtrlExtrude;

				checkBoxGrp -e
					-value1 `nexOpt -q quaDrawMmbWeld`
					nexQuaDrawMmbWeld;

				checkBoxGrp -e
					-value1 `nexOpt -q paintReplaceNoMods`
					nexPaintReplaceNoMods;
				
				checkBoxGrp -e
					-value1 `nexOpt -q useSelTransformKeys`
					nexUseSelTransformKeys;

				checkBoxGrp -e
					-value1 `nexOpt -q useToolEditKeys`
					nexUseToolEditKeys;

				checkBoxGrp -e
					-value1 `nexOpt -q useSnapKeys`
					nexUseSnapKeys;

				checkBoxGrp -e
					-value1 `nexOpt -q useManipSizeKeys`
					nexUseManipSizeKeys;

				checkBoxGrp -e
					-value1 `nexOpt -q useBrushResizeKeys`
					nexUseBrushSizeKeys;

				checkBoxGrp -e
					-value1 `nexOpt -q hideManipOnCtrl`
					nexHideManipOnCtrl;

				checkBoxGrp -e
					-value1 `nexOpt -q hideManipOnShift`
					nexHideManipOnShift;

				checkBoxGrp -e
					-value1 `nexOpt -q hideManipOnShiftCtrl`
					nexHideManipOnShiftCtrl;

				radioButtonGrp -e -sl (`nexOpt -q shiftSlide` == 0) nexShiftSlideOff;
				radioButtonGrp -e -sl (`nexOpt -q shiftSlide` == 1) nexShiftSlideOn;
				radioButtonGrp -e -sl (`nexOpt -q shiftSlide` == 2) nexShiftSlideOnAxis;

				radioButtonGrp -e -sl (`nexOpt -q shiftCtrlExtrude` == 0) nexCtrlShiftSlide;
				radioButtonGrp -e -sl (`nexOpt -q shiftCtrlExtrude` == 1) nexCtrlShiftExtrude;
				radioButtonGrp -e -sl (`nexOpt -q shiftCtrlExtrude` == 2) nexCtrlShiftSlideOnAxis;

				radioButtonGrp -e -sl (`nexOpt -q useCompModeCustCmd` == 0) nexPressCompModeToggle;
				radioButtonGrp -e -sl (`nexOpt -q useCompModeCustCmd` == 1) nexPressCompModeUseCustCmd;

				textField -e -en `nexOpt -q useCompModeCustCmd` -tx (`nexOpt -q compModeCustCmd`) nexPressCompModeCustCmd;
			}

			if (`columnLayout -q -numberOfChildren "nexTabPrefsCol"` > 0)  {
				checkBoxGrp -e -v1 `nexOpt -q useTabPressCmd` nexUseTabPressCmd;
				textField -e -en `nexOpt -q useTabPressCmd` nexTabPressCmd;
				textField -e -tx `nexOpt -q tabPressCmd` nexTabPressCmd;
				checkBoxGrp -e -v1 `nexOpt -q useTabReleaseCmd` nexUseTabReleaseCmd;
				textField -e -en `nexOpt -q useTabReleaseCmd` nexTabReleaseCmd;
				textField -e -tx `nexOpt -q tabReleaseCmd` nexTabReleaseCmd;

				checkBoxGrp -e -v1 `nexOpt -q useTabCtrlPressCmd` nexUseTabCtrlPressCmd;
				textField -e -en `nexOpt -q useTabCtrlPressCmd` nexTabCtrlPressCmd;
				textField -e -tx `nexOpt -q tabCtrlPressCmd` nexTabCtrlPressCmd;
				checkBoxGrp -e -v1 `nexOpt -q useTabCtrlReleaseCmd` nexUseTabCtrlReleaseCmd;
				textField -e -en `nexOpt -q useTabCtrlReleaseCmd` nexTabCtrlReleaseCmd;
				textField -e -tx `nexOpt -q tabCtrlReleaseCmd` nexTabCtrlReleaseCmd;

				checkBoxGrp -e -v1 `nexOpt -q useTabShiftPressCmd` nexUseTabShiftPressCmd;
				textField -e -en `nexOpt -q useTabShiftPressCmd` nexTabShiftPressCmd;
				textField -e -tx `nexOpt -q tabShiftPressCmd` nexTabShiftPressCmd;
				checkBoxGrp -e -v1 `nexOpt -q useTabShiftReleaseCmd` nexUseTabShiftReleaseCmd;
				textField -e -en `nexOpt -q useTabShiftReleaseCmd` nexTabShiftReleaseCmd;
				textField -e -tx `nexOpt -q tabShiftReleaseCmd` nexTabShiftReleaseCmd;

				checkBoxGrp -e -v1 `nexOpt -q useTabShiftCtrlPressCmd` nexUseTabShiftCtrlPressCmd;
				textField -e -en `nexOpt -q useTabShiftCtrlPressCmd` nexTabShiftCtrlPressCmd;
				textField -e -tx `nexOpt -q tabShiftCtrlPressCmd` nexTabShiftCtrlPressCmd;
				checkBoxGrp -e -v1 `nexOpt -q useTabShiftCtrlReleaseCmd` nexUseTabShiftCtrlReleaseCmd;
				textField -e -en `nexOpt -q useTabShiftCtrlReleaseCmd` nexTabShiftCtrlReleaseCmd;
				textField -e -tx `nexOpt -q tabShiftCtrlReleaseCmd` nexTabShiftCtrlReleaseCmd;
			}

			/*
			if(`columnLayout -q -numberOfChildren "nexConnectPrefsCol"` > 0) {
				radioButtonGrp -e -sl (`nexOpt -q connectDefaultLmbMap ` == "segments") nexConnectLmbSegments;
				radioButtonGrp -e -sl (`nexOpt -q connectDefaultLmbMap ` == "slide") nexConnectLmbSlide;
				radioButtonGrp -e -sl (`nexOpt -q connectDefaultLmbMap ` == "pinch") nexConnectLmbPinch;

				radioButtonGrp -e -sl (`nexOpt -q connectDefaultMmbMap ` == "segments") nexConnectMmbSegments;
				radioButtonGrp -e -sl (`nexOpt -q connectDefaultMmbMap ` == "slide") nexConnectMmbSlide;
				radioButtonGrp -e -sl (`nexOpt -q connectDefaultMmbMap ` == "pinch") nexConnectMmbPinch;

				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultLmbMap` == "divisions") nexBridgeLmbDivisions;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultLmbMap` == "twist") nexBridgeLmbTwist;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultLmbMap` == "taper") nexBridgeLmbTaper;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultLmbMap` == "offset") nexBridgeLmbOffset;

				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultMmbMap` == "divisions") nexBridgeMmbDivisions;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultMmbMap` == "twist") nexBridgeMmbTwist;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultMmbMap` == "taper") nexBridgeMmbTaper;
				radioButtonGrp -e -sl (`nexOpt -q bridgeDefaultMmbMap` == "offset") nexBridgeMmbOffset;
			}
			*/

			if (`columnLayout -q -numberOfChildren "nexColorPrefsCol"` > 0) {
				float $color[];

				checkBoxGrp -e -v1 `nexOpt -q invertedCursors` nexUseInvertedCursorColors;

				$color = `nexOpt -q softSelInnerColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexSoftSelInnerColor;

				$color = `nexOpt -q softSelOuterColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexSoftSelOuterColor;

				$color = `nexOpt -q hiliteColorAdd`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexHiliteColorAdd;

				$color = `nexOpt -q hiliteColorSubtract`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexHiliteColorSubtract;

				$color = `nexOpt -q hiliteColorSymmetry`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexHiliteColorSymmetry;

				$color = `nexOpt -q paintColorAdd`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexPaintColorAdd;

				$color = `nexOpt -q activeManipColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexActiveManipColor;


				$color = `nexOpt -q paintColorSubtract`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexPaintColorSubtract;

				floatSliderGrp -e -v `nexOpt -q hiliteTransparency` nexHiliteTransparency;
			}

			if (`columnLayout -q -numberOfChildren "nexManipPrefsCol"` > 0) {
				checkBoxGrp -e
					-value1 `nexOpt -q freeRotate`
					nexFreeRotate;

				checkBoxGrp -e
					-value1 `nexOpt -q prohibitNegativeScale`
					nexProhibitNegativeScale;

				checkBoxGrp -e
					-value1 `nexOpt -q manipCenterCustomTranslate`
					nexManipCenterCustomTranslate;

				radioButtonGrp -e -sl `nexOpt -q resetManipOnToolSwitch` nexResetManipOnToolSwitchOn;
				radioButtonGrp -e -sl (!`nexOpt -q resetManipOnToolSwitch`) nexResetManipOnToolSwitchOff;

				radioButtonGrp -e -sl `nexOpt -q resetManipOnSelChange` nexResetManipOnSelChangeOn;
				radioButtonGrp -e -sl (!`nexOpt -q resetManipOnSelChange`) nexResetManipOnSelChangeOff;
				intSliderGrp -e -v `nexOpt -q manipPickRange` nexManipPickRange;

				checkBoxGrp -e
					-value1 `nexOpt -q refreshActiveOnly`
					nexRefreshAllViews;
			}

			if (`columnLayout -q -numberOfChildren "nexHUDPrefsCol"` > 0) {
				checkBoxGrp -e
					-value1 `nexOpt -q setSafeFrameOverscan`
					nexSetSafeFrameOverscan;
				floatSliderGrp -e -v `nexOpt -q safeFrameOverscan` nexSafeFrameOverscan;
				floatSliderGrp -e -en `nexOpt -q setSafeFrameOverscan` nexSafeFrameOverscan;

				float $color[] = `nexOpt -q safeFrameCustomColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexSafeFrameCustomColor;

				intSliderGrp -e -v `nexOpt -q safeFrameTransparency` nexSafeFrameTransparency;

				checkBoxGrp -e
					-value1 `nexOpt -q hudShowSoftSel`
					nexHudShowSoftSel;

				checkBoxGrp -e
					-value1 `nexOpt -q hudShowCoordSpace`
					nexHudShowCoordSpace;

				checkBoxGrp -e
					-value1 `nexOpt -q hudShowMode`
					nexHudShowMode;

				checkBoxGrp -e
					-value1 `nexOpt -q showCapsLock`
					nexHudShowCapsLock;

				checkBoxGrp -e -ncb 1
					-value1 `nexOpt -q showDynamicHUD`
					nexDynamicHUD;

				float $color[] = `nexOpt -q dynamicHUDColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexDynamicHUDColor;

				float $color[] = `nexOpt -q capsLockColor`;
				colorSliderGrp -e -rgb $color[0] $color[1] $color[2] nexCapsLockColor;
			}

			refresh -f;
		}
	}

	global proc DRPrefsUpdate()
	{
		DRPrefsUpdateSwitcher();
	}

	global proc dR_restartOptionDialog()
	{
		confirmDialog -t "NEX" -m "You may need to restart Maya for this change to take affect." -b "Ok";
	}

/*
	global proc DRPrefsCreateConnect()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexConnectPrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		frameLayout -l "Connect Default Mouse Mappings" -p $parent;
		    columnLayout -adj true;
			columnLayout -co "left" 8;
				text -label "" -height 4;
				text -label "Left Mouse Button:" -align "left";

				rowLayout -nc 3;
					string $shareRB;
					$shareRB = `radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Segments"
						-on1 "nexOpt -e connectDefaultLmbMap segments"
						nexConnectLmbSegments`;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Slide"
						-on1 "nexOpt -e connectDefaultLmbMap slide"
						-shareCollection $shareRB
						nexConnectLmbSlide;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Pinch"
						-on1 "nexOpt -e connectDefaultLmbMap pinch"
						-shareCollection $shareRB
						nexConnectLmbPinch;
					setParent ..;

				text -label "" -height 10;
				text -label "Middle Mouse Button:" -align "left";

				rowLayout -nc 3;
					$shareRB = `radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Segments"
						-on1 "nexOpt -e connectDefaultMmbMap segments"
						nexConnectMmbSegments`;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Slide"
						-on1 "nexOpt -e connectDefaultMmbMap slide"
						-shareCollection $shareRB
						nexConnectMmbSlide;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Pinch"
						-on1 "nexOpt -e connectDefaultMmbMap pinch"
						-shareCollection $shareRB
						nexConnectMmbPinch;

		text -label "" -h 10 -p $parent;

		frameLayout -l "Bridge Default Mouse Mappings" -p $parent;
		    columnLayout -adj true;
			columnLayout -co "left" 8;
				text -label "" -height 4;
				text -label "Left Mouse Button:" -align "left";

				rowLayout -nc 4;
					$shareRB = `radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Divisions"
						-on1 "nexOpt -e bridgeDefaultLmbMap divisions"
						nexBridgeLmbDivisions`;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Twist"
						-on1 "nexOpt -e bridgeDefaultLmbMap twist"
						-shareCollection $shareRB
						nexBridgeLmbTwist;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Taper"
						-on1 "nexOpt -e bridgeDefaultLmbMap taper"
						-shareCollection $shareRB
						nexBridgeLmbTaper;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Offset"
						-on1 "nexOpt -e bridgeDefaultLmbMap offset"
						-shareCollection $shareRB
						nexBridgeLmbOffset;

					setParent ..;

				text -label "" -height 10;
				text -label "Middle Mouse Button" -align "left";

				rowLayout -nc 4;
					$shareRB = `radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Divisions"
						-on1 "nexOpt -e bridgeDefaultMmbMap divisions"
						nexBridgeMmbDivisions`;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Twist"
						-on1 "nexOpt -e bridgeDefaultMmbMap twist"
						-shareCollection $shareRB
						nexBridgeMmbTwist;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Taper"
						-on1 "nexOpt -e bridgeDefaultMmbMap taper"
						-shareCollection $shareRB
						nexBridgeMmbTaper;

					radioButtonGrp -nrb 1
						-l "" 
						-cw2 1 100
						-l1 "Offset"
						-on1 "nexOpt -e bridgeDefaultMmbMap offset"
						-shareCollection $shareRB
						nexBridgeMmbOffset;

		setParent $parent;

		setUITemplate -popTemplate;

		DRPrefsUpdateSwitcher();
	}
*/

	global proc DRPrefsCreateTab()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexTabPrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		//separator -style "none" -h 1 -w 40;
		setParent $parent;
		frameLayout -l "Tab Key Mappings";
			columnLayout -adj true;
				text -label "NOTE: Tab Key Mappings only apply while in the NEX tool" -align "left";
				text -label "" -height 8;

				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Press" -cw2 20 100 -h 24 -cc "nexOpt -e useTabPressCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabPressCmd;
					textField -cc "nexOpt -e tabPressCmd \"#1\"" -width 280 nexTabPressCmd;
				setParent ..;
				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Release" -cw2 20 100 -h 24 -cc "nexOpt -e useTabReleaseCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabReleaseCmd;
					textField -cc "nexOpt -e tabReleaseCmd \"#1\"" -width 280 nexTabReleaseCmd;
				setParent ..;

				separator -h 10;
				text -label "" -h 4;

				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Ctrl Press" -cw2 20 100 -h 24 -cc "nexOpt -e useTabCtrlPressCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabCtrlPressCmd;
					textField -cc "nexOpt -e tabCtrlPressCmd \"#1\"" -width 280 nexTabCtrlPressCmd;
				setParent ..;
				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Ctrl Release" -cw2 20 100 -h 24 -cc "nexOpt -e useTabCtrlReleaseCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabCtrlReleaseCmd;
					textField -cc "nexOpt -e tabCtrlReleaseCmd \"#1\"" -width 280 nexTabCtrlReleaseCmd;
				setParent ..;

				separator -h 10;
				text -label "" -h 4;

				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Shift Press" -cw2 20 100 -h 24 -cc "nexOpt -e useTabShiftPressCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabShiftPressCmd;
					textField -cc "nexOpt -e tabShiftPressCmd \"#1\"" -width 280 nexTabShiftPressCmd;
				setParent ..;
				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Shift Release" -cw2 20 100 -h 24 -cc "nexOpt -e useTabShiftReleaseCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabShiftReleaseCmd;
					textField -cc "nexOpt -e tabShiftReleaseCmd \"#1\"" -width 280 nexTabShiftReleaseCmd;
				setParent ..;

				separator -h 10;
				text -label "" -h 4;

				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Ctrl+Shift Press" -cw2 20 100 -h 24 -cc "nexOpt -e useTabShiftCtrlPressCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabShiftCtrlPressCmd;
					textField -cc "nexOpt -e tabShiftCtrlPressCmd \"#1\"" -width 280 nexTabShiftCtrlPressCmd;
				setParent ..;
				rowLayout -nc 2 -cw2 120 280;
					checkBoxGrp -l1 "Ctrl+Shift Release" -cw2 20 100 -h 24 -cc "nexOpt -e useTabShiftCtrlReleaseCmd #1; DRPrefsUpdateSwitcher" -width 120 nexUseTabShiftCtrlReleaseCmd;
					textField -cc "nexOpt -e tabShiftCtrlReleaseCmd \"#1\"" -width 280 nexTabShiftCtrlReleaseCmd;
				setParent ..;


		setParent $parent;

		setUITemplate -popTemplate;

		DRPrefsUpdateSwitcher();
	}

	global proc DRPrefsCreateKbdMouse()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexKbdMousePrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		//separator -style "none" -h 1 -w 40;
		setParent $parent;
		frameLayout -l "Keyboard / Mouse";
		    columnLayout -adj true;
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Enable Right Click Undo Rocker"
				-cc "nexOpt -e rightClickUndo #1"
				switcherRightClickUndo;
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Use Ctrl+Shift+Middle Click-Drag to duplicate objects"
				-cc "nexOpt -e shiftCtrlCopy #1"
				nexShiftCtrlCopy;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Use Ctrl+Shift+Middle Click-Drag to Extrude Vertices, Edges, and Faces"
				-cc "nexOpt -e shiftCtrlExtrude #1; DRPrefsUpdateSwitcher"
				nexShiftCtrlExtrude;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Use Ctrl+Middle Click-Drag for Target Weld in Quad Draw"
				-cc "nexOpt -e quaDrawMmbWeld #1"
				nexQuaDrawMmbWeld;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 400
				-l1 "Replace selection when not using modifier keys (Tab, Ctrl, or Shift) in raycast"
				-cc "nexOpt -e paintReplaceNoMods #1"
				nexPaintReplaceNoMods;
 
/*
			columnLayout -co "left" 8;
				text -label "" -height 4;
				text -label "Hide manipulator when..." -align "left";
				rowLayout -nc 2 -cw2 10 120;
					checkBoxGrp -l1 "Shift+MMB" -cw2 20 100 -h 24 -cc "nexOpt -e useShiftMmbFunction #1;" -width 120 nexUseShiftMmbFunction;
					string $shiftMmbDrop =  `optionMenu -label "" -ann "distTypeDropdown"`;
					optionMenu -e -cc ("nexOpt -e softSelDistanceType `optionMenu -q -sl " + $shiftMmbDrop + "`") $shiftMmbDrop;
						menuItem -label "Slide";
						menuItem -label "Predictive Transform Handles";
			setParent ..;
*/

			columnLayout -co "left" 8;
				text -label "" -height 4;

				text -label "Shift + MMB Drag:" -align "left";
				string $shareRB;
				$shareRB = `radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Slides Components"
					-on1 "nexOpt -e shiftSlide 1"
					nexShiftSlideOn`;

				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Slides Components using active manipulator handle"
					-on1 "nexOpt -e shiftSlide 2"
					-shareCollection $shareRB
					nexShiftSlideOnAxis;

				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Engages Predictive Transformations"
					-on1 "nexOpt -e shiftSlide 0"
					-shareCollection $shareRB
					nexShiftSlideOff;

				text -label "" -height 4;
				text -label "Ctrl + Shift + MMB Drag:" -align "left";
				$shareRB = `radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Slides Components"
					-on1 "nexOpt -e shiftCtrlExtrude 0"
					nexCtrlShiftSlide`;

				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Slides Components using active manipulator handle"
					-on1 "nexOpt -e shiftCtrlExtrude 2"
					-shareCollection $shareRB
					nexCtrlShiftSlideOnAxis;

				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Bevel / Extrude"
					-on1 "nexOpt -e shiftCtrlExtrude 1"
					-shareCollection $shareRB
					nexCtrlShiftExtrude;

				text -label "" -height 4;
				text -label "Hide manipulator when..." -align "left";
					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Ctrl is held"
						-cc "nexOpt -e hideManipOnCtrl #1"
						nexHideManipOnCtrl;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Shift is held"
						-cc "nexOpt -e hideManipOnShift #1"
						nexHideManipOnShift;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Ctrl+Shift is held"
						-cc "nexOpt -e hideManipOnShiftCtrl #1"
						nexHideManipOnShiftCtrl;

				text -label "" -height 4;
				text -label "Adopt Maya hotkey settings for..." -align "left";
					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Select and Transform"
						-cc "nexOpt -e useSelTransformKeys #1"
						nexUseSelTransformKeys;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Pivot adjustment"
						-cc "nexOpt -e useToolEditKeys #1"
						nexUseToolEditKeys;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Grid, curve, and point snap"
						-cc "nexOpt -e useSnapKeys #1"
						nexUseSnapKeys;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Manipulator resizing"
						-cc "nexOpt -e useManipSizeKeys #1"
						nexUseManipSizeKeys;

					checkBoxGrp -ncb 1
						-l "" 
						-cw2 1 400
						-l1 "Brush resizing"
						-cc "nexOpt -e useBrushResizeKeys #1"
						nexUseBrushSizeKeys;

				text -label "" -height 4;
				text -label "When pressing active component mode button..." -align "left";
					string $frmLayout = `formLayout`;
						string $togCmpBtn = `radioButtonGrp -nrb 1
							-l "" 
							-cw2 1 300
							-l1 "Toggle out of Component Mode"
							-on1 "nexOpt -e useCompModeCustCmd 0; DRPrefsUpdateSwitcher"
							nexPressCompModeToggle`;

						string $useCustBtn = `radioButtonGrp -nrb 1
								-l "" 
								-cw2 1 150
								-w 151
								-l1 "Use Custom Command:"
								-on1 "nexOpt -e useCompModeCustCmd 1; DRPrefsUpdateSwitcher"
								-shareCollection $togCmpBtn
								nexPressCompModeUseCustCmd`;

						string $txtField = `textField -cc "nexOpt -e compModeCustCmd \"#1\"" -width 280 nexPressCompModeCustCmd`;

					formLayout -e 
						-attachForm $togCmpBtn "top" 0
						-attachForm $togCmpBtn "left" 0

						-attachControl 	$useCustBtn "top" 4 $togCmpBtn
						-attachForm 	$useCustBtn "left" 0

						-attachControl 	$txtField "top" 2 $togCmpBtn
						-attachControl 	$txtField "left" 0 $useCustBtn

						$frmLayout;

						setParent ..;

		setParent $parent;

		setUITemplate -popTemplate;

		DRPrefsUpdateSwitcher();
	}

	global proc string[] nPolyBridgeFaces()
	{
		string $bridgeEdges[];

		string $objects[] = `ls -sl -o`;
		if (`size $objects` == 1) {
			string $selectedFaces[] = `filterExpand -sm 34 -ex 1`;
			ConvertSelectionToEdges;
			string $edges[] = `ls -sl`;
			select $selectedFaces;
			ConvertSelectionToContainedEdges;
			string $inEdges[] = `ls -sl`;
			select $edges;
			select -tgl $inEdges;
			string $edgeSet;
			$edgeSet = `sets -name $edgeSet`;
			delete $selectedFaces;
			select -r $edgeSet;
			$bridgeEdges = nPerformPolyBridgeEdge();
			select -r $edgeSet;
			string $outEdges[] = `ls -sl`;
			int $borderFound = 0;

			int $i = 0;
			while($i < `size $outEdges` && ! $borderFound) {
				select -r $outEdges[$i];
				string $faces[] = `polyInfo -ef`;
				string $buffer[];
				$borderFound = `tokenize $faces[0] $buffer` < 4;
				$i = $i + 1;
			}
			if ($borderFound) {
				warning ("extra faces exist");
			}
			select -r $outEdges;
			delete $edgeSet;
		} else {
			error ("too many objects");
		}

		return $bridgeEdges;
	}


	global proc string[] nPerformPolyBridgeEdge()
	{
		string $edges[] = `filterExpand -sm 32 -ex 1`;
		string $faces[] = `filterExpand -sm 34 -ex 1`;

		int $doHistory = `constructionHistory -q -toggle`;

		string $bridgeNodes[];
		if (size($edges) != 0 || size($faces) == 0) {
			int $doHistory = `constructionHistory -q -toggle`;
			string $cmd = "polyBridgeEdge -ch 1 -divisions 5 -twist 0 -taper 1 -curveType 1 -smoothingAngle 30";
			$bridgeNodes = `evalEcho $cmd`;
			for($bridgeNode in $bridgeNodes) {
				setAttr ($bridgeNode + ".dv") 0;
			}
		} else {
			string $cmd = "nPolyBridgeFaces";
			$bridgeNodes = `evalEcho $cmd`;
		}

		select -d;

		int $prevSuppressWarn = `scriptEditorInfo -q -sw`;
		scriptEditorInfo -e -sw true;

	 	for($i = 0; $i < size($bridgeNodes); $i++) {
			string $bridgeManipAttr = $bridgeNodes[$i] + ".manipMatrix";
			string $shNodes[] = `listConnections -shapes true -s true -d false $bridgeManipAttr`;
			if(size($shNodes) == 1) {
				string $sewEdgeCmd = "polySewEdge " + $shNodes[0];
				string $sewNodes[];

				string $edgeAttrib = $shNodes[0] + ".edge";

				int $prevEdgeCount = `getAttr -s $edgeAttrib`;
				catchQuiet( $sewNodes = eval($sewEdgeCmd) );
				int $newEdgeCount = `getAttr -s $edgeAttrib`;

				if($prevEdgeCount == $newEdgeCount) {
					delete $sewNodes;
				} else {
					nexCtx -e -lsn $sewNodes[0];
				}
			}
		}

		scriptEditorInfo -e -sw $prevSuppressWarn;

		select -d;

		return $bridgeNodes;
	}

	global proc DRPrefsCreateManipulators()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexManipPrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		//separator -style "none" -h 1 -w 40;
		setParent $parent;
		frameLayout -l "Manipulators";
		    columnLayout -adj true;
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Free Rotate"
				-cc "nexOpt -e freeRotate #1"
				nexFreeRotate;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Prevent Negative Scaling"
				-cc "nexOpt -e prohibitNegativeScale #1"
				nexProhibitNegativeScale;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 400
				-l1 "Center the translation manipulator for Custom Coordinate Space"
				-cc "nexOpt -e manipCenterCustomTranslate #1"
				nexManipCenterCustomTranslate;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Update transformations in active view only"
				-cc "nexOpt -e refreshActiveOnly #1;"
				nexRefreshAllViews;

			separator -h 10; text -label "" -h 4;

			columnLayout -co "left" 8;
				text -label "" -height 4;
				text -label "On Transform Tool switch" -align "left";
				string $shareRB;
				$shareRB = `radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Reset to Screen Handle"
					-on1 "nexOpt -e resetManipOnToolSwitch 1"
					nexResetManipOnToolSwitchOn`;
				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Keep Last Active Handle"
					-on1 "nexOpt -e resetManipOnToolSwitch 0"
					-shareCollection $shareRB
					nexResetManipOnToolSwitchOff;


				text -label "" -height 4;
				text -label "On Selection change" -align "left";
				$shareRB = `radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Reset to Screen Handle"
					-on1 "nexOpt -e resetManipOnSelChange 1"
					nexResetManipOnSelChangeOn`;
				radioButtonGrp -nrb 1
					-l "" 
					-cw2 1 300
					-l1 "Keep Last Active Handle"
					-on1 "nexOpt -e resetManipOnSelChange 0"
					-shareCollection $shareRB
					nexResetManipOnSelChangeOff;

				setParent ..;

			separator -h 10; text -label "" -h 4;
			columnLayout -co "left" 8;
				intSliderGrp -label "Manipulator Pick Range" -field true -minValue 1 -maxValue 100 -fieldMinValue 1 -fieldMaxValue 100 -cc "nexOpt -e manipPickRange #1" -cal 1 "left" -cw3 144 46 200 nexManipPickRange;

				setParent ..;


		setParent $parent;
		setUITemplate -popTemplate;
		DRPrefsUpdateSwitcher();
	}

	global proc DRPrefsCreateHUD()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexHUDPrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		//separator -style "none" -h 1 -w 40;

		frameLayout -l "On Screen Display" -p $parent;
		    columnLayout -adj true;
			checkBoxGrp
				-ncb 1
				-l "" 
				-w 161
				-cw2 1 160
				-l1 "Show Mode"
				-cc "nexOpt -e hudShowMode #1; dR_refreshHUD;"
				nexHudShowMode;

			checkBoxGrp
				-ncb 1
				-l "" 
				-w 161
				-cw2 1 160
				-l1 "Show Coordinate Space"
				-cc "nexOpt -e hudShowCoordSpace #1; dR_refreshHUD;"
				nexHudShowCoordSpace;

			checkBoxGrp
				-ncb 1
				-l "" 
				-w 161
				-cw2 1 160
				-l1 "Show Soft Selection Info"
				-cc "nexOpt -e hudShowSoftSel #1; dR_refreshHUD;"
				nexHudShowSoftSel;

			separator -h 10; text -label "" -h 4;

			rowLayout -nc 2 -cw2 144 100;
				checkBoxGrp
					-ncb 1
					-l "" 
					-height 24
					-w 161
					-cw2 1 130
					-l1 "Show Caps Lock"
					-cc "nexOpt -e showCapsLock #1; refresh -f"
					nexHudShowCapsLock;
				string $colorSlider = `colorSliderGrp -label "" -rgb 0 0 1 -width 52 -cw3 1 50 1 nexCapsLockColor`;
					colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"capsLockColor\"); refresh -f;") $colorSlider;
				setParent ..;

			text -label "" -h 10 -p $parent;

			rowLayout -nc 2 -cw2 144 100;
				checkBoxGrp -ncb 1
					-l "" 
					-height 24
					-width 145
					-cw2 1 144
					-l1 "Enable Dynamic HUD"
					-cc "nexOpt -e showDynamicHUD #1"
					nexDynamicHUD;

				string $colorSlider = `colorSliderGrp -label "" -rgb 0 0 1 -width 52 -cw3 1 50 1 nexDynamicHUDColor`;
					colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"dynamicHUDColor\")") $colorSlider;
				setParent ..;

		text -label "" -h 10 -p $parent;

		frameLayout -l "Safe Frame" -p $parent;
		    columnLayout -adj true;

			rowLayout -nc 2 -cw2 140 400;
				checkBoxGrp -h 24
					-ncb 1
					-l "" 
					-w 101
					-cw2 1 100
					-l1 "Set Overscan"
					-cc "nexOpt -e setSafeFrameOverscan #1; DRPrefsUpdateSwitcher"
					nexSetSafeFrameOverscan;

				floatSliderGrp -label "" -precision 2 -field true -minValue 1.0 -maxValue 10.0 -fieldMinValue 1.0 -fieldMaxValue 10.0 -cc "nexOpt -e safeFrameOverscan #1" -cw3 1 46 200 nexSafeFrameOverscan;
				setParent ..;

			separator -h 10; text -label "" -h 4;
			intSliderGrp -label "Transparency" -field true -minValue 1 -maxValue 100 -fieldMinValue 1 -fieldMaxValue 100 -cc "nexOpt -e safeFrameTransparency #1; refresh -f;" -cw3 150 46 200 -cat 1 "left" 10 nexSafeFrameTransparency;

			//text -label "" -h 4;
			separator -h 10; text -label "" -h 4;

			rowLayout -nc 1;
				$colorSlider = `colorSliderGrp -label "Color" -rgb 0 0 1 -width 100 -cw3 50 50 1 nexSafeFrameCustomColor`;
					colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"safeFrameCustomColor\"); refresh -f;") $colorSlider;
					setParent ..;

		setParent $parent;
		setUITemplate -popTemplate;
		DRPrefsUpdateSwitcher();
	}

	global proc DRPrefsCreateColors()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexColorPrefsCol";
		
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		nexOpt -s;

		//separator -style "none" -h 1 -w 40;
		setParent $parent;
		frameLayout -l "Colors";
		    columnLayout -adj true;
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 400
				-l1 "Use Inverted Cursor colors"
				-cc "nexOpt -e invertedCursors #1"
				nexUseInvertedCursorColors;
			separator -h 10 ;
			text -l "" -h 4;

			columnLayout -co "left" 8;
				string $colorSlider;
				string $colorRow;

				text -label "" -height 4;
				text -label "Soft Selection Colors" -align "left";
				$colorRow = `rowLayout -nc 2`;
					$colorSlider = `colorSliderGrp -label "Inner" -rgb 0 0 1 -width 100 -cw3 50 50 1 -p $colorRow nexSoftSelInnerColor`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"softSelInnerColor\")") $colorSlider;
					$colorSlider = `colorSliderGrp -label "Outer" -rgb 0 0 1 -width 100 -cw3 50 50 1 -p $colorRow nexSoftSelOuterColor`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"softSelOuterColor\")") $colorSlider;
				setParent ..;

				text -label "" -height 4;
				text -label "Hilite Colors" -align "left";
				$colorRow = `rowLayout -nc 3`;
					$colorSlider = `colorSliderGrp -label "Add" -width 100 -cw3 50 50 1 -p $colorRow nexHiliteColorAdd`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"hiliteColorAdd\")") $colorSlider;
					$colorSlider = `colorSliderGrp -label "Subtract" -width 100 -cw3 50 50 1 -p $colorRow nexHiliteColorSubtract`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"hiliteColorSubtract\")") $colorSlider;
					$colorSlider = `colorSliderGrp -label "Symmetry" -width 120 -cw3 70 50 1 -p $colorRow nexHiliteColorSymmetry`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"hiliteColorSymmetry\")") $colorSlider;
				setParent ..;




				text -label "" -height 4;
				text -label "Paint Selection Colors" -align "left";
				$colorRow = `rowLayout -nc 2`;
					$colorSlider = `colorSliderGrp -label "Add" -width 100 -cw3 50 50 1 -p $colorRow nexPaintColorAdd`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"paintColorAdd\")") $colorSlider;
					$colorSlider = `colorSliderGrp -label "Subtract" -width 100 -cw3 50 50 1 -p $colorRow nexPaintColorSubtract`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"paintColorSubtract\")") $colorSlider;
				setParent ..;

				text -label "" -height 4;
				text -label "Manipulator Handle" -align "left";
				$colorRow = `rowLayout -nc 1`;
					$colorSlider = `colorSliderGrp -label "Active" -width 100 -cw3 50 50 1 -p $colorRow nexActiveManipColor`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"activeManipColor\")") $colorSlider;

				setParent ..;
				setParent ..;

				text -label "" -h 4; separator -h 10; text -label "" -h 4;
				floatSliderGrp -label "Transparency" -field true -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 100 -cc "nexOpt -e hiliteTransparency #1" -cw3 150 46 200 -cat 1 "left" 10 nexHiliteTransparency;

		setParent $parent;
		setUITemplate -popTemplate;
		DRPrefsUpdateSwitcher();
	}

	global proc DRPrefsCreateSwitcher()
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;
		string $parent = "nexGeneralPrefsCol";
		
		// Check to see if this has been created already.
		if (`columnLayout -q -numberOfChildren $parent` > 0) {
			return;
		}

		//  Create the UI
		setParent $parent;
		setUITemplate -pushTemplate prefsTemplate;

		// Save all options
		nexOpt -s;
		setParent $parent;

		frameLayout -l "General";
		    columnLayout -adj true;
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 400
				-l1 "Automatically enter NEX tool when in component mode"
				-cc "nexOpt -e useNexOnSelModeChange #1; nexUpdateStatusLine()"
				nexUseNexOnSelModeChange;
			text -l "            (Currently this option does not apply when the UV Editor is open)" -al "left";

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Use Customized Hotbox Marking Menus"
				-cc "nexOpt -e customViewMM #1; dR_restartOptionDialog;"
				nexCustomViewMM;

			/*
			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 400
				-l1 "Disable selection constraints on selection type change"
				-cc "nexOpt -e disableConstOnSTypeChange #1"
				nexDisableConstOnSTypeChange;
			*/

			separator -h 10 ;
			text -l "" -h 4;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Automatically reload textures"
				-cc "nexOpt -e autoloadTextures #1"
				nexAutoloadTextures;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Display Quad Draw delete history warning"
				-cc "nexOpt -e skipQuaDrawWarning (!#1)"
				nexSkipQuaDrawWarning;

/*
			separator -h 10 ;
			text -l "" -h 4;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Automatically set tumble pivot to selection center on selection change"
				-cc "nexOpt -e tumblePivotOnSelChange #1; tumbleCtx -e -localTumble (!#1) tumbleContext;"
				nexTumblePivotOnSelChange;
			text -l "            (For this to work, the Maya tumble tool must be set to use Tumble pivot)" -al "left";
*/

			separator -h 10 ;
			text -l "" -h 4;
			columnLayout -co "left" 8;
				intSliderGrp -label "Select Dead Space Range" -field true -minValue 0 -maxValue 250 -fieldMinValue 0 -fieldMaxValue 250 -cc "nexOpt -e selectDeadSpaceRange #1" -cal 1 "left" -cw3 144 46 200 nexSelectDeadSpaceRange;
				intSliderGrp -label "Tweak Dead Space Range" -field true -minValue 0 -maxValue 250 -fieldMinValue 0 -fieldMaxValue 250 -cc "nexOpt -e tweakDeadSpaceRange #1" -cal 1 "left" -cw3 144 46 200 nexTweakDeadSpaceRange;

			setParent ..;
				text -l "" -h 4;
				rowLayout -nc 2 -cw2 144 100;
					checkBoxGrp -ncb 1
						-l "" 
						-height 24
						-width 145
						-cw2 1 144
						-l1 "Use Tweak Fishing Line"
						-cc "nexOpt -e tweakFishingLine #1"
						nexTweakFishingLine;
					string $colorSlider = `colorSliderGrp -label "" -rgb 0 0 1 -width 52 -cw3 1 50 1 nexTweakFishingLineColor`;
						colorSliderGrp -e -cc ("dR_adjustColorSliderOpt(\"" + $colorSlider + "\", \"tweakFishingLineColor\")") $colorSlider;

				setParent ..;
			/*
j
			separator -h 10 ;
			text -l "" -h 4;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 360
				-l1 "Use Multi-Component highlighting for vertex and edge Target Weld"
				-cc "nexOpt -e useMultiInWeld #1"
				nexUseMultiInWeld;
			*/

			separator -h 10 ;
			text -l "" -h 4;

			checkBoxGrp -ncb 1
				-l "" 
				-cw2 1 300
				-l1 "Automatically check for NEX updates"
				-cc "nexOpt -e updateCheck #1;"
				nexUpdateCheck;

		setParent $parent;

		setUITemplate -popTemplate;

		DRPrefsUpdateSwitcher();
	}

	global proc dR_manipEntered()
	{
		string $curSelType = `nexOpt -q selType`;
		if($curSelType == "") {
			string $manipType = `nexOpt -q manipType`;
			//if($manipType != "connect") {
				dR_toggleSelectionMode("multi", 0, 0);
			//}
		}
	}

	global proc drSwitchPrefTabs(int $whichTab)
	{
		global string $gDRPreferenceWindow;
		setParent $gDRPreferenceWindow;

		int $index[];
		if ($whichTab == 0) {
			$index = `textScrollList -q -sii prefIndex`;
		} else {
			$index[0] = $whichTab;
			textScrollList -e -sii $whichTab prefIndex;
		}


		switch ($index[0]) {
			case 1:
				DRPrefsCreateSwitcher();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			case 2:
				DRPrefsCreateManipulators();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			case 3:
				DRPrefsCreateHUD();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			case 4:
				DRPrefsCreateColors();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			case 5:
				DRPrefsCreateKbdMouse();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			case 6:
				DRPrefsCreateTab();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;

			/*
			case 7:
				DRPrefsCreateConnect();
				tabLayout -e -selectTabIndex $index[0] prefTabs;
				frameLayout -e -label " " prefTitleFrame;
				break;
			*/
		}
	}

	global proc drPreferencesWnd()
	{
		global string $gDRPreferenceWindow;
		
		// If the window exists already, just show it
		//
		if (`window -exists $gDRPreferenceWindow`) {
			showWindow $gDRPreferenceWindow;
			return;
		}

		if (!`uiTemplate -exists prefsTemplate`) {
			uiTemplate prefsTemplate;

			frameLayout -defineTemplate prefsTemplate 
				-labelVisible true 
				-labelAlign "center" 
				-labelIndent 5 
				-borderVisible true
				-borderStyle "etchedIn"
				-marginWidth 5 -marginHeight 5;

			optionMenuGrp -defineTemplate prefsTemplate
				-columnAlign  1 "right"
				-columnAttach 1 "both" 5
				-columnAlign  2 "left"
				-columnAttach 2 "both" 6
				-columnWidth2 135 290;
		}
		
		// Create the window
		//
		$gDRPreferenceWindow = `window 
			   -tlc 210 390 
			   -wh 600 600
			   -title "NEX Options" 
			   -iconName "Preferences"
			   -menuBar true`;


		// 
		// Create the menus in the menubar
		//
		menu -label "Edit";
		menuItem -label "Revert to Saved" -c "nexOpt -r; DRPrefsUpdate();";
		menuItem -label "Restore Default Settings" -c "nexOpt -d; DRPrefsUpdate();";

		menu -label "Help" -helpMenu true;
			menuItem -label "NEX Online Help - Customization" -enableCommandRepeat false -command "system(\"Load http://draster.com/help/nex/customization.php\")";
		
		setUITemplate -pushTemplate NONE;

		// Create the top level form layout
		//
		string $prefForm = `formLayout`;
			//
			// The left column is the list of pref titles
			//
			frameLayout -label "Categories" -bv false categoryFrame;
			formLayout categoryLayout;
			
			textScrollList -nr 15
				-allowMultiSelection false
				-selectCommand "drSwitchPrefTabs 0"
				prefIndex;

			textScrollList -e -a "General" prefIndex;
			textScrollList -e -a "Manipulators" prefIndex;
			textScrollList -e -a "HUD" prefIndex;
			textScrollList -e -a "Colors" prefIndex;
			textScrollList -e -a "Keyboard / Mouse" prefIndex;
			textScrollList -e -a "    Tab Key Mappings" prefIndex;
			//textScrollList -e -a "    Connect Tool Mappings" prefIndex;

			formLayout -edit
				-af prefIndex "top" 0 
				-af prefIndex "left" 0
				-af prefIndex "right" 0 
				-af prefIndex "bottom" 0 
				categoryLayout;

			setParent $prefForm;
			
			//
			// The right column is the preference layout
			// Create the tabs for each pref section.
			//
			frameLayout -label "General Options"
				-bv false -labelWidth 250 prefTitleFrame; 
				
			string $parentTab = `tabLayout 
				-scrollable true
				-tabsVisible false
				-childResizable true
				prefTabs`;

				// General Appearance
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexGeneralPrefsCol;
				setParent $parentTab;
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexManipPrefsCol;
				setParent $parentTab;
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexHUDPrefsCol;
				setParent $parentTab;
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexColorPrefsCol;
				setParent $parentTab;
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexKbdMousePrefsCol;
				setParent $parentTab;
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexTabPrefsCol;
				setParent $parentTab;

				/*
				frameLayout -lv false -mw 10 -mh 10 -bv false;
				    columnLayout -adj true nexConnectPrefsCol;
				*/

				// Panel Appearance
				//frameLayout -lv false -mw 10 -mh 10 -bv false;
				    //columnLayout -adj true prefIPCol;
				setParent $parentTab;

			//
			// Buttons on the bottom
			//
			setParent $prefForm;
			
			button -l "Save"
				-align "center"
				-c "DRSavePrefsChanges"
				prefsSaveBtn;

			button -l "Cancel" 
				-align "center"
				-c "DRCancelPrefsChanges" 
				prefsCloseBtn;

		setParent $gDRPreferenceWindow;

		// Fix the layout
		//
		formLayout -e
			-af categoryFrame "top" 5 
			-af categoryFrame "left" 5 
			-an categoryFrame "right"  
			-ac categoryFrame "bottom" 5 prefsCloseBtn

			-af prefTitleFrame "top" 5 
			-ac prefTitleFrame "left" 5 categoryFrame
			-af prefTitleFrame "right" 5 
			-ac prefTitleFrame "bottom" 5 prefsCloseBtn

		-af prefsSaveBtn "bottom" 5
			-af prefsSaveBtn "left" 5
			-ap prefsSaveBtn "right" 1 50

			-af prefsCloseBtn "bottom" 5
			-ap prefsCloseBtn "left" 1 50
			-af prefsCloseBtn "right" 5
				
			$prefForm;
		
		// default 
		drSwitchPrefTabs 1;

		// Add a callback to save the preference changes if the
		// user closes the window through the window manager.
		//
		global int $DRPrefWndScriptJob;
		$DRPrefWndScriptJob = `scriptJob -protected
						-runOnce true 
						-uiDeleted $gDRPreferenceWindow 
						DRSavePrefsChanges`;	

		setUITemplate -popTemplate;

		window -e -wh 600 600 $gDRPreferenceWindow;

		showWindow $gDRPreferenceWindow;
	}

	global proc drBuildCustomMenus() {
		global string $gMainWindow;

		if(`nexOpt -q customViewMM`) {
			string $menuArray[] = `window -q -ma $gMainWindow`;
			for ($menu in $menuArray) {
				string $label = `menu -q -label $menu`;

				if($label == "Hotbox Center 3" || $label == "Hotbox Center 2" || $label == "Hotbox Center 1") {
					setParent -m $menu;
					
					// Only do our stuff if the standard items have already been set up
					if(`menu -q -numberOfItems $menu` > 0) {
						string $subMenuArray[] = `menu -q -ia $menu`;
						for ($subMenu in $subMenuArray) {
							string $mItemLabel = `menuItem -q -l $subMenu`;
							if ($mItemLabel == "Perspective View") {
								menuItem -e -c "dR_DoCmd(\"viewPersp\")" $subMenu;
							} else if($mItemLabel == "Side View") {
								menuItem -e -c "dR_DoCmd(\"viewRight\")" -label "Right View" $subMenu;
							} else if($mItemLabel == "Front View") {
								menuItem -e -c "dR_DoCmd(\"viewFront\")" $subMenu;
							} else if($mItemLabel == "Top View") {
								menuItem -e -c "dR_DoCmd(\"viewTop\")" $subMenu;
							} else if($mItemLabel == "Left View" || $mItemLabel == "Back View" || $mItemLabel == "Bottom View" || $mItemLabel == "New Camera") {
								deleteUI -menuItem $subMenu;
							}
						}

						
						menuItem
							-label "Left View" 
							-divider 0
							-subMenu 0
							-command "dR_DoCmd(\"viewLeft\")" 
							-altModifier 0
							-optionModifier 0
							-commandModifier 0
							-ctrlModifier 0
							-shiftModifier 0
							-optionBox 0
							-enable 1
							-data 0
							-radialPosition "NW"
							-enableCommandRepeat 1
							-echoCommand 0
							-italicized 0
							-boldFont 0
							drLeftViewMenuItem;

						menuItem
							-label "Back View" 
							-divider 0
							-subMenu 0
							-command "dR_DoCmd(\"viewBack\")" 
							-altModifier 0
							-optionModifier 0
							-commandModifier 0
							-ctrlModifier 0
							-shiftModifier 0
							-optionBox 0
							-enable 1
							-data 0
							-radialPosition "SW"
							-enableCommandRepeat 1
							-echoCommand 0
							-italicized 0
							-boldFont 0
							drBackViewMenuItem;

						menuItem
							-label "Bottom View" 
							-divider 0
							-subMenu 0
							-command "dR_DoCmd(\"viewBottom\")" 
							-altModifier 0
							-optionModifier 0
							-commandModifier 0
							-ctrlModifier 0
							-shiftModifier 0
							-optionBox 0
							-enable 1
							-data 0
							-radialPosition "SE"
							-enableCommandRepeat 1
							-echoCommand 0
							-italicized 0
							-boldFont 0
							drBottomViewMenuItem;

						menuItem
							-label "New Camera" 
							-divider 0
							-subMenu 0
							-command "dR_DoCmd(\"createCameraFromView\")" 
							-altModifier 0
							-optionModifier 0
							-commandModifier 0
							-ctrlModifier 0
							-shiftModifier 0
							-optionBox 0
							-enable 1
							-data 0
							-radialPosition "NE"
							-enableCommandRepeat 1
							-echoCommand 0
							-italicized 0
							-boldFont 0
							drCreateNewCameraFromView;
					}
				}
			}
		}
	}

	global proc int dR_hasHilitedPoly()
	{
		string $hilites[] = `ls -hilite`;
		string $polyHilites[] = `filterExpand -sm 12 -ex false $hilites`;
		if(size($polyHilites)) {
			return 1;
		} else {
			return 0;
		}
	}

	proc modProc(string $scriptFile, string $procName, string $replaceStr, string $replacePos) {
		string $fullFilePath = (`getenv "MAYA_LOCATION"` + $scriptFile);

		$fHandle = `fopen $fullFilePath "r"`;
		string $nextLine = `fgetline $fHandle`;
		string $funcStr = "";

		int $foundFuncDef = false;
		while(size( $nextLine ) > 0) {
			if(!$foundFuncDef) {
				if(gmatch($nextLine, "* proc *" + $procName + "*(*")) {
					$foundFuncDef = true;
				}
			}

			if($foundFuncDef) {
				if($replacePos == "start") {
					$funcStr += $nextLine;
				}

				if(gmatch($nextLine, "{*")) {
					if($replacePos == "start") {
						$funcStr += $replaceStr;
					}
				} else if(gmatch($nextLine, "}*")) {
					if($replacePos == "end") {
						$funcStr += $replaceStr;
						$funcStr += $nextLine;
					}
					break;
				}

				if($replacePos == "end") {
					$funcStr += $nextLine;
				}
			}

			$nextLine = `fgetline $fHandle`;
		}
		fclose $fHandle;
		//print $funcStr;
		eval $funcStr;
	}

	global proc dR_doMeshConnect() {
		int $numConnItems = `nexCtx -q -numConnItems`;

		if($numConnItems) {
			select -cl;

			string $connSets[];
			int $i;
			for($i = 0; $i < $numConnItems; $i++) {
				string $connItems[] = `nexCtx -connItemSel $i`;
				$connSets[$i] = `sets $connItems`;
			}


			// For each set, retrieve the command
			for($i = 0; $i < $numConnItems; $i++) {
				string $theseConnItems[] = `sets -q $connSets[$i]`;
				string $splitCmd = `nexCtx -gsc $theseConnItems`;
				evalEcho $splitCmd;
			}

			for($i = 0; $i < $numConnItems; $i++) {
				delete $connSets[$i];
			}
		}
	}

	global proc int dR_buildRightMM(string $parentName) {
		global int $gIsMarkingMenuOn;
		string $manipType = `nexCtx -q -sm`;

		if(`currentCtx` == "nexCtx1" && `popupMenu -e -exists $parentName` && (`nexCtx -q -stickyIsDown` || (`dR_isCtrlHeld` && `dR_isShiftHeld`) )) {
			popupMenu -e -deleteAllItems $parentName;	
			if (`popupMenu -q -mm $parentName` != $gIsMarkingMenuOn) {
				popupMenu -e -mm $gIsMarkingMenuOn $parentName;
			}

			setParent -m $parentName;

			string $curSelType = `nexOpt -q selType`;
			int $hasMcm = `nexCtx -q -mcm`;

			switch($manipType)
			{
				case "bevel":
				{
					if(!`nexCtx -q -ctm`) {
						radioMenuItemCollection;

						menuItem
							-label "Segments" 
							-command ("nexOpt -e polyBevelCurLmbMap segments; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q polyBevelCurLmbMap` == "segments")
							-radialPosition "N";

						menuItem
							-label "Offset" 
							-command ("nexOpt -e polyBevelCurLmbMap offset; refresh -f; dR_updateCommandPanel")
							-rb (`nexOpt -q polyBevelCurLmbMap` == "offset")
							-radialPosition "E";

						menuItem -d 1; menuItem -d 1; menuItem -d 1;
						menuItem -label "Reset Settings" -command ("nexCtx -resetManip");

						return true;
					}

					break;
				}

				case "extrudevertex":
				case "extrudeface":
				{
					if($curSelType == "vertex" && !$hasMcm) {
						radioMenuItemCollection;

						menuItem
							-label "Divisions" 
							-command ("nexOpt -e extrudeVertexCurLmbMap divisions; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeVertexCurLmbMap` == "divisions")
							-radialPosition "N";

						menuItem
							-label "Width" 
							-command ("nexOpt -e extrudeVertexCurLmbMap width; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeVertexCurLmbMap` == "width")
							-radialPosition "E";

						menuItem
							-label "Length" 
							-command ("nexOpt -e extrudeVertexCurLmbMap length; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeVertexCurLmbMap` == "length")
							-radialPosition "W";

						menuItem
							-label "Length + Width" 
							-command ("nexOpt -e extrudeVertexCurLmbMap widthlength; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeVertexCurLmbMap` == "widthlength")
							-radialPosition "S";

						menuItem -d 1; menuItem -d 1; menuItem -d 1;
						menuItem -label "Reset Settings" -command ("nexCtx -resetManip");

						return true;
					} else {
						radioMenuItemCollection;

						menuItem
							-label "Local Z" 
							-command ("nexOpt -e extrudeFaceCurLmbMap localz; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeFaceCurLmbMap` == "localz")
							-radialPosition "W";

						if(!`nexCtx -q -ctm`) {
							menuItem
								-label "Divisions" 
								-command ("nexOpt -e extrudeFaceCurLmbMap divisions; refresh -f; dR_updateCommandPanel;")
								-rb (`nexOpt -q extrudeFaceCurLmbMap` == "divisions")
								-radialPosition "N";
						}

						string $offsetCmd;
						if($hasMcm) {
							$offsetCmd = "nexOpt -e polyExtrudeCurLmbMap offset; nexOpt -e polyBevelCurLmbMap offset; refresh -f; dR_updateCommandPanel;";
						} else {
							$offsetCmd = "nexOpt -e extrudeFaceCurLmbMap offset; refresh -f; dR_updateCommandPanel;";
						}

						menuItem
							-label "Offset" 
							-command ("nexOpt -e extrudeFaceCurLmbMap offset; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q extrudeFaceCurLmbMap` == "offset")
							-radialPosition "E";

						menuItem
							-label "Keep Faces Together" 
							-command ("nexCtx -e -kft (!`nexCtx -q -kft`); refresh -f")
							-cb (`nexCtx -q -kft`)
							-radialPosition "S";

						menuItem -d 1; menuItem -d 1; menuItem -d 1;
						menuItem -label "Reset Settings" -command ("nexCtx -resetManip");

						return true;
					}
				}


				case "bridge":
				{
					radioMenuItemCollection;

					menuItem
						-label "Twist" 
						-command ("nexOpt -e bridgeCurLmbMap twist; refresh -f; dR_updateCommandPanel;")
						-rb (`nexOpt -q bridgeCurLmbMap` == "twist")
						-radialPosition "NW";

					menuItem
						-label "Taper" 
						-command ("nexOpt -e bridgeCurLmbMap taper; refresh -f; dR_updateCommandPanel;")
						-rb (`nexOpt -q bridgeCurLmbMap` == "taper")
						-radialPosition "W";

					menuItem
						-label "Offset" 
						-command ("nexOpt -e bridgeCurLmbMap offset; refresh -f; dR_updateCommandPanel;")
						-rb (`nexOpt -q bridgeCurLmbMap` == "offset")
						-radialPosition "E";

					menuItem
						-label "Divisions" 
						-command ("nexOpt -e bridgeCurLmbMap divisions; refresh -f; dR_updateCommandPanel;")
						-rb (`nexOpt -q bridgeCurLmbMap` == "divisions")
						-radialPosition "N";

					menuItem -d 1; menuItem -d 1; menuItem -d 1;
					menuItem
						-label "Reset Settings" 
						-command ("nexCtx -resetManip");

					menuItem
						-label "Curve Types..." 
						-subMenu 1
						-radialPosition "S"
						-allowOptionBoxes 1;

						radioMenuItemCollection;
						
						int $blendType = (`nexCtx -q -bridgeCurveType`);

						menuItem
							-label "Blend" 
							-command ("nexCtx -e -bridgeCurveType 1; refresh -f; dR_updateCommandPanel;")
							-rb $blendType
							-radialPosition "W";

						menuItem
							-label "Linear" 
							-command ("nexCtx -e -bridgeCurveType 0; refresh -f; dR_updateCommandPanel;")
							-rb (!$blendType)
							-radialPosition "S";

					return true;
				}

				case "connect":
				{
					if(!`nexCtx -q -ctm`) {
						radioMenuItemCollection;
						menuItem
							-label "Slide" 
							-command ("nexOpt -e connectCurLmbMap slide; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q connectCurLmbMap` == "slide")
							-radialPosition "E";

						menuItem
							-label "Pinch" 
							-command ("nexOpt -e connectCurLmbMap pinch; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q connectCurLmbMap` == "pinch")
							-radialPosition "W";

						menuItem
							-label "Segments" 
							-command ("nexOpt -e connectCurLmbMap segments; refresh -f; dR_updateCommandPanel;")
							-rb (`nexOpt -q connectCurLmbMap` == "segments")
							-radialPosition "N";

						menuItem -d 1; menuItem -d 1; menuItem -d 1;
						menuItem
							-label "Reset Settings" 
							-command ("nexCtx -resetManip");

						return true;
					}
				}
			}
		}

		return false;
	}

	global proc dR_contextPanel() {
		global string $drTFormLayout, $drQuaDrawPanel, $drConnectFormLayout, $drBridgeFormLayout, $drVertChamferFormLayout, $drVertExtrudeFormLayout, $drFaceExtrudeFormLayout, $drBevelFormLayout, $drCutFormLayout;

		string $manipType = `nexCtx -q -sm`;
		switch($manipType)
		{
			case "move":
			case "rotate":
			case "scale":
			case "pivot":
				layout -e -m 1 $drTFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;

				break;

			case "quadraw":
				setViewAxisVisibility true;
				layout -e -m 1 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;

			case "connect":
				layout -e -m 1 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;

			case "bridge":
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 1 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;

			case "extrudevertex":
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;

				if(`nexOpt -q manipType` == "bevel") {
					layout -e -m 1 $drVertChamferFormLayout;
					layout -e -m 0 $drVertExtrudeFormLayout;
				} else {
					layout -e -m 0 $drVertChamferFormLayout;
					layout -e -m 1 $drVertExtrudeFormLayout;
				}

				break;

			case "extrudeface":
				layout -e -m 1 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;

			case "bevel":
				layout -e -m 1 $drBevelFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;

			case "cut":
				layout -e -m 1 $drCutFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				break;

			default:
				layout -e -m 0 $drTFormLayout;
				layout -e -m 0 $drQuaDrawPanel;
				layout -e -m 0 $drConnectFormLayout;
				layout -e -m 0 $drBridgeFormLayout;
				layout -e -m 0 $drVertExtrudeFormLayout;
				layout -e -m 0 $drVertChamferFormLayout;
				layout -e -m 0 $drFaceExtrudeFormLayout;
				layout -e -m 0 $drBevelFormLayout;
				layout -e -m 0 $drCutFormLayout;
				break;
		}
	}

	global proc dR_buildTransformMM(string $useMode) {
		if (`popupMenu -exists tempMM`) {
			deleteUI tempMM;
		}

		popupMenu -markingMenu true 
			-aob true
			-button 1 
			-parent viewPanes  
			tempMM;

		if($useMode == "select") {
			menuItem -rp "N" -l "NURBS Mask" -ecr false 
				-c "setSelectMode nurbsModeling NURBS; setToolTo selectSuperContext; ";
			menuItem -rp "NE" -l "Hierarchy" -ecr false 
				-c "setSelectMode hierarchy Hierarchy; setToolTo selectSuperContext; ";
			menuItem -rp "E" -l "Animation Mask" -ecr false 
				-c "setSelectMode animation Animation; setToolTo selectSuperContext; ";
			menuItem -rp "SE" -l "Deformations Mask" -ecr false 
				-c "setSelectMode deformations Deformations; setToolTo selectSuperContext; ";
			menuItem -rp "S" -l "Dynamics Mask" -ecr false 
				-c "setSelectMode dynamics Dynamics; setToolTo selectSuperContext; ";
			menuItem -rp "SW" -l "Polygons Mask" -ecr false 
				-c "setSelectMode polyModeling Polygons; setToolTo selectSuperContext; ";
			menuItem -rp "W" -l "Rendering Mask" -ecr false 
				-c "setSelectMode rendering Rendering; setToolTo selectSuperContext; ";

			// If in component mode then switch to Object, any
			// other mode (object, hierarchy, preset) go to 
			// component.
			menuItem -rp "NW" -l "Object/Components" -ecr false 
				-c "if ( `selectMode -q -component` ) { setSelectMode objects Objects; setToolTo selectSuperContext; } else { setSelectMode components Components; }  ";
		} else {
			radioMenuItemCollection;

			menuItem
				-label "Local" 
				-command ("if(`nexOpt -q manipType` != \"" + $useMode + "\") { nexOpt -e manipType " + $useMode + "; } nexOpt -e manipCoordSpace local; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")") 
				-rb (`nexOpt -q manipCoordSpace` == "local" &&  `nexOpt -q manipType` != "pivot")
				-radialPosition "NE";

			menuItem
				-label "World" 
				-command ("if(`nexOpt -q manipType` != \"" + $useMode + "\") { nexOpt -e manipType " + $useMode + "; } nexOpt -e manipCoordSpace world; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
				-rb (`nexOpt -q manipCoordSpace` == "world" && `nexOpt -q manipType` != "pivot")
				-radialPosition "W";

			menuItem
				-label "Object" 
				-command ("if(`nexOpt -q manipType` != \"" + $useMode + "\") { nexOpt -e manipType " + $useMode + "; } nexOpt -e manipCoordSpace object; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
				-rb (`nexOpt -q manipCoordSpace` == "object" && `nexOpt -q manipType` != "pivot")
				-radialPosition "NW";

			menuItem
				-label "NEX Options..." 
				-subMenu 1
				-radialPosition "E" 
				-allowOptionBoxes 1;

				menuItem
					-label "NEX Panel" 
					-command ("dR_ToggleCommandPanel; dR_buildTransformMM(\"" + $useMode + "\")")
					-cb `dR_isPanelVisible`
					-radialPosition "E";

				menuItem
					-label "Highlight Backfaces" 
					-command ("nexOpt -t highlightBackfacing; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
					-cb `nexOpt -q highlightBackfacing`
					-radialPosition "S";

				menuItem
					-label "Preview Loop/Ring" 
					-command ("nexOpt -t previewLoopRing; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
					-cb `nexOpt -q previewLoopRing`
					-radialPosition "SE";

				/*
				menuItem
					-label "Hybrid Raycast/Marquee" 
					-command ("nexOpt -t hybridPaintMarquee; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
					-cb `nexOpt -q hybridPaintMarquee`
					-radialPosition "SW";
				*/

			setParent -m ..;


			menuItem
				-label "Align Along..." 
				-subMenu 1
				-radialPosition "SW" 
				-allowOptionBoxes 1;

				menuItem
					-label "Reset Pivot Position" 
					-command "nexCtx -e -rc \"position\"" 
					-radialPosition "NE";

				menuItem
					-label "Reset Pivot Position and Orientation" 
					-command "nexCtx -e -rc \"all\"" 
					-radialPosition "E";

				menuItem
					-label "Reset Pivot Orientation" 
					-command "nexCtx -e -rc \"orientation\"" 
					-radialPosition "SE";

				menuItem
					-label "Custom Pivot Tool" 
					-command ("nexOpt -e manipType \"pivot\"; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
					-radialPosition "SW";

				menuItem
					-label "Custom Coordinate Space" 
					-command ("if(`nexOpt -q manipType` != \"" + $useMode + "\") { nexOpt -e manipType " + $useMode + "; } nexOpt -e manipCoordSpace custom; dR_updateCommandPanel(); dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`nexOpt -q manipCoordSpace` == "custom" || `nexOpt -q manipType` == "pivot")
					-radialPosition "W";
			setParent -m ..;

			global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;
			menuItem
				-label "Active Axis..." 
				-subMenu 1
				-radialPosition "S" 
				-allowOptionBoxes 1;

				radioMenuItemCollection;

				menuItem
					-label "Y" 
					-c ("dR_setActiveAxis " + $nexHandleY + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleY)
					-radialPosition "N";

				menuItem
					-label "YZ" 
					-c ("dR_setActiveAxis " + $nexHandleYZ + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleYZ)
					-radialPosition "NE";

				menuItem
					-label "Z" 
					-c ("dR_setActiveAxis " + $nexHandleZ + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleZ)
					-radialPosition "E";

				menuItem
					-label "XZ" 
					-c ("dR_setActiveAxis " + $nexHandleXZ + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleXZ)
					-radialPosition "SE";

				menuItem
					-label "XYZ" 
					-c ("dR_setActiveAxis " + $nexHandleXYZ + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleXYZ)
					-radialPosition "S";

				menuItem
					-label "X" 
					-c ("dR_setActiveAxis " + $nexHandleX + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleX)
					-radialPosition "W";

				menuItem
					-label "XY" 
					-c ("dR_setActiveAxis " + $nexHandleXY + "; dR_buildTransformMM(\"" + $useMode + "\")")
					-rb (`dR_getActiveHandle` == $nexHandleXY)
					-radialPosition "NW";

				setParent -m ..;

			menuItem -d 1; menuItem -d 1; menuItem -d 1;
				menuItem
					-label "Symmetrize" 
					-en (`dR_isSymOn`)
					-c ("nexCtx -ses;");

				menuItem
					-label "Symmetry" 
					-c ("if(`nexCtx -q -sym`) { nexCtx -dsm; } else { nexCtx -sym; } dR_buildTransformMM(\"" + $useMode + "\"); ")
					-cb (`nexCtx -q -sym`);

				menuItem -d 1;

				menuItem
					-label "Slide" 
					-c ("nexOpt -t slide; dR_updateCommandPanel; dR_buildTransformMM(\"" + $useMode + "\")")
					-cb (`nexOpt -q slide`);

				menuItem
					-label "Tweak" 
					-c ("nexOpt -e -s useClickDrag #1; dR_updateCommandPanel; ")
					-cb (`nexOpt -q useClickDrag`);

				setParent -m ..;
		}
	}

	global proc dR_releaseAllStickies()
	{
		SelectMaskToolMarkingMenuPopDown;
		TranslateToolWithSnapMarkingMenuPopDown;
		RotateToolWithSnapMarkingMenuPopDown;
		ScaleToolWithSnapMarkingMenuPopDown;
	}

	global proc int dR_isSymOn()
	{
		global string $nexSymName;
		if(`nameField -q -object $nexSymName` != "") {
			return true;
		}
		return false;
	}

	proc reassignCmd(string $nameCommand, string $cbCmd) {
		int $cmdIdx, $count = `assignCommand -query -numElements`;
		for ($cmdIdx = 1; $cmdIdx <= $count; $cmdIdx++) {
			$thisCmdName = `assignCommand -q -name $cmdIdx`;
			if($thisCmdName == $nameCommand) {
				string $curCmd = `assignCommand -q -c $cmdIdx`;
				if(!gmatch($curCmd, $cbCmd)) {
					assignCommand -e -i $cmdIdx -c $cbCmd;
				}
			}
		}
	}

	global proc dR_matchManipSize()
	{
		float $manipSize[] = `manipOptions -q -s`;
		nexOpt -e manipSize ($manipSize[0] * 40);
	}

	global proc dR_snapOptionCB()
	{
		if(`nexOpt -q useSnapKeys`) {
			reassignCmd("NameComSnap_to_Curve_modifierON", "dR_curveSnapPress");
			reassignCmd("NameComSnap_to_Curve_modifierOFF", "dR_curveSnapRelease");
			reassignCmd("NameComSnap_to_Grid_modifierON", "dR_gridSnapPress");
			reassignCmd("NameComSnap_to_Grid_modifierOFF", "dR_gridSnapRelease");
			reassignCmd("NameComSnap_to_Point_modifierON", "dR_pointSnapPress");
			reassignCmd("NameComSnap_to_Point_modifierOFF", "dR_pointSnapRelease");
		} else {
			reassignCmd("NameComSnap_to_Curve_modifierON", "SnapToCurve");
			reassignCmd("NameComSnap_to_Curve_modifierOFF", "SnapToCurve");
			reassignCmd("NameComSnap_to_Grid_modifierON", "SnapToGrid");
			reassignCmd("NameComSnap_to_Grid_modifierOFF", "SnapToGrid");
			reassignCmd("NameComSnap_to_Point_modifierON", "SnapToPoint");
			reassignCmd("NameComSnap_to_Point_modifierOFF", "SnapToPoint");
		}
	}

	global proc dR_manipSizeOptionCB()
	{
		if(`nexOpt -q useManipSizeKeys`) {
			reassignCmd("NameComIncrease_Manipulator_Size", "dR_increaseManipSize");
			reassignCmd("NameComDecrease_Manipulator_Size", "dR_decreaseManipSize");
		} else {
			reassignCmd("NameComIncrease_Manipulator_Size", "IncreaseManipulatorSize");
			reassignCmd("NameComDecrease_Manipulator_Size", "DecreaseManipulatorSize");
		}
	}

	global proc dR_selTransformKeysCB()
	{
		if(`nexOpt -q useSelTransformKeys`) {
			reassignCmd("NameComSelectTool_MaskMMenu", "dR_selectPress");
			reassignCmd("NameComSelectTool_MaskMMenu_release", "dR_selectRelease");

			reassignCmd("TranslateToolWithSnapMarkingMenuNameCommand", "dR_movePress");
			reassignCmd("TranslateToolWithSnapMarkingMenuPopDownNameCommand", "dR_moveRelease");

			reassignCmd("RotateToolWithSnapMarkingMenuNameCommand", "dR_rotatePress");
			reassignCmd("RotateToolWithSnapMarkingMenuPopDownNameCommand", "dR_rotateRelease");

			reassignCmd("ScaleToolWithSnapMarkingMenuNameCommand", "dR_scalePress");
			reassignCmd("ScaleToolWithSnapMarkingMenuPopDownNameCommand", "dR_scaleRelease");
		} else {
			reassignCmd("NameComSelectTool_MaskMMenu", "SelectMaskToolMarkingMenu");
			reassignCmd("NameComSelectTool_MaskMMenu_release", "SelectMaskToolMarkingMenuPopDown");

			reassignCmd("TranslateToolWithSnapMarkingMenuNameCommand", "TranslateToolWithSnapMarkingMenu");
			reassignCmd("TranslateToolWithSnapMarkingMenuPopDownNameCommand", "TranslateToolWithSnapMarkingMenuPopDown");

			reassignCmd("RotateToolWithSnapMarkingMenuNameCommand", "RotateToolWithSnapMarkingMenu");
			reassignCmd("RotateToolWithSnapMarkingMenuPopDownNameCommand", "RotateToolWithSnapMarkingMenuPopDown");

			reassignCmd("ScaleToolWithSnapMarkingMenuNameCommand", "ScaleToolWithSnapMarkingMenu");
			reassignCmd("ScaleToolWithSnapMarkingMenuPopDownNameCommand", "ScaleToolWithSnapMarkingMenuPopDown");
		}
	}

	global proc dR_toolEditKeysCB()
	{
		if(`nexOpt -q useToolEditKeys`) {
			reassignCmd("NameComEnter_Tool_Edit_Mode", "dR_customPivotTool");
		} else {
			reassignCmd("NameComEnter_Tool_Edit_Mode", "EnterEditMode");
		}
	}

	global proc dR_brushResizeKeysCB()
	{
		if(`nexOpt -q useBrushResizeKeys`) {
			reassignCmd("artisanModifyUpperRadius_press", "dR_softSelStickyPress");
			reassignCmd("artisanModifyUpperRadius_release", "dR_softSelStickyRelease");
		} else {
			reassignCmd("artisanModifyUpperRadius_press", "ModifyUpperRadiusPress");
			reassignCmd("artisanModifyUpperRadius_release", "ModifyUpperRadiusRelease");
		}
	}

	global proc dR_reloadTexture(string $ftn)
	{
		int $undoState = `undoInfo -q -st`;

		undoInfo -swf 0;
		string $currFile = `getAttr $ftn`;
		setAttr $ftn -type "string" $currFile;
		undoInfo -swf $undoState;
	}

	global proc dRSaveShelves()
	{
		global string $gDRBottomPane;
		string $shelvesName =  (`internalVar -userPrefDir` + "NEXShelf");
		saveShelf $gDRBottomPane $shelvesName;
	}

	global proc dRRestoreShelves()
	{
		global string $gDRBottomPane;
		string $shelvesName =  (`internalVar -userPrefDir` + "NEXShelf");
		string $shelvesFile = $shelvesName + ".mel";
		if(`filetest -r $shelvesFile`) {
			string $cmd = "source \"" + $shelvesName + "\"";
			eval ($cmd);
			setParent $gDRBottomPane;
			NEXShelf;
		}
	}

	proc string buildSSPanel(string $frmLayout)
	{
		string $softSel = `frameLayout -p $frmLayout -cll true -cl true -l "Soft Selection" -bs "etchedIn" -width 120 -mw 6 -mh 6`;
			string $frmLayout = `formLayout`;
				string $softSelChk = dR_addModeBtn(`checkBox -l "" -width 13 -ann "Soft Selection" -al "left" -cc "nexOpt -e useSoftSel #1; dR_updateCommandPanel();" -p $frmLayout`);
				string $falloffFld = dR_addModeBtn(`floatField -ann "Soft Selection Falloff" -dc "nexOpt -e softSelFalloff #1" -cc "nexOpt -s -e softSelFalloff #1; dR_updateHUD;" -step 0.01 -min .01 -max 1000000 -pre 2 -v 1 -height 26 -width 40 -p $frmLayout`);

				global string $drSoftSelDistType;
				string $drSoftSelDistType = dR_addModeBtn(`optionMenu -label "" -ann "distTypeDropdown" -p $frmLayout`);
				optionMenu -e -cc ("nexOpt -e softSelDistanceType `optionMenu -q -sl " + $drSoftSelDistType + "`") $drSoftSelDistType;
					menuItem -label "Along Faces";
					menuItem -label "Along Edges";
					menuItem -label "Spherical";

				$falloffTypes = `rowLayout -nc 3 -cw3 50 46 49 -ct3 "left" "left" "left" -co3 4 4 4 -p $frmLayout`;
					dR_addModeBtn(`iconTextButton -ann "falloffBubbleBtn" -st "iconOnly" -i "nex/bubbleOff.xpm" -si "nex/bubbleOn.xpm" -c "nexOpt -e softSelFalloffType 0; nexOpt -e useSoftSel 1; dR_updateCommandPanel();" -mh 0 -mw 0 -width 50 -height 47 -p $falloffTypes`);
					dR_addModeBtn(`iconTextButton -ann "falloffPinchBtn" -st "iconOnly" -i "nex/pinchOff.xpm" -si "nex/pinchOn.xpm" -c "nexOpt -e softSelFalloffType 1; nexOpt -e useSoftSel 1; dR_updateCommandPanel();" -mh 0 -mw 0 -width 46 -height 47 -p $falloffTypes`);
					dR_addModeBtn(`iconTextButton -ann "falloffLinearBtn" -st "iconOnly" -i "nex/linearOff.xpm" -si "nex/linearOn.xpm" -c "nexOpt -e softSelFalloffType 2; nexOpt -e useSoftSel 1; dR_updateCommandPanel();" -mh 0 -mw 0 -width 49 -height 47 -p $falloffTypes`);

				formLayout -edit
					-attachForm $softSelChk "top" 6
					-attachForm $softSelChk "left" 0

					-attachForm $drSoftSelDistType "top" 2
					-attachControl $drSoftSelDistType "left" 4 $softSelChk

					-attachForm $falloffFld "top" 1
					-attachControl $falloffFld "left" 2 $drSoftSelDistType

					-attachForm $falloffTypes "left" 0 
					-attachControl $falloffTypes "top" 6 $drSoftSelDistType

					$frmLayout;

		return $softSel;
	}

	global proc dR_transformFloat(string $axis, float $newVal)
	{
		string $manipType = `nexOpt -q manipType`;
		if($manipType == "pivot") {
			int $activePivotHandle = `nexOpt -q activePivotHandle`;
			if($activePivotHandle >= 8 && $activePivotHandle <= 10) {
				$manipType = "rotate";
			}
		}
		switch($manipType)
		{
			case "move":
			case "pivot":
				if($axis == "x") {
					nexCtx -e -mpx $newVal;
				} else if($axis == "y") {
					nexCtx -e -mpy $newVal;
				} else if($axis == "z") {
					nexCtx -e -mpz $newVal;
				}
				break;

			case "rotate":
				if($axis == "x") {
					nexCtx -e -mox $newVal;
				} else if($axis == "y") {
					nexCtx -e -moy $newVal;
				} else if($axis == "z") {
					nexCtx -e -moz $newVal;
				}
				break;

			case "scale":
				if($axis == "x") {
					nexCtx -e -msx $newVal;
				} else if($axis == "y") {
					nexCtx -e -msy $newVal;
				} else if($axis == "z") {
					nexCtx -e -msz $newVal;
				}
				break;
		}
	}

	global proc nexBuildDockMenu(string $dockMenu)
	{
		popupMenu -e -dai $dockMenu;
		radioMenuItemCollection -p $dockMenu;
		int $isDocked = `nexOpt -q panelDock`;
		//menuItem -rb ($isDocked == 2) -c "nexDockPanel(2)" -label "Dock Left" -p $dockMenu;
		menuItem -rb ($isDocked == 1) -c "nexDockPanel(1)" -label "Dock Right" -p $dockMenu;
		menuItem -rb ($isDocked == 0) -c "nexDockPanel(0)" -label "Float" -p $dockMenu;
	}

	global proc string dR_getSelCurve()
	{
		string $origSel[] = `ls -selection -objectsOnly`;
		string $curveNode = "";
		for ($node in $origSel) {
			if (size(`ls ($node+".editPoints")`) > 0) {
				$curveNode = $node;
				break;
			}
		}

		return $curveNode;
	}

	global proc dR_ctxHelp()
	{
		string $title, $body;
		string $manipType = `nexOpt -q manipType`;

		global string $drHelpWindow, $drHelpLabel, $drHelpLink, $link;

		$manipName = "";

		int $width = 500, $height = 360, $numLines = 6;

		switch($manipType)
		{
			case "cut":
				$manipName = "Multi-Cut";
				$body = "The Multi-Cut tool integrates three tools in one: A Split Polygon Tool (Cut), a Cut Faces Tool (Slice), and an Insert Edge Loop Tool.\n\nCut:\nLeft-Click on any component to drop cut points, Right-Click to complete the cut. The Backspace key removes your last slice point.\n\nSlice:\nLeft-Click in dead-space (outside the mesh boundary) to drop a slice point, Left-Click again to specify a slice plane, Right-Click to complete the slice.  Alternatively, you can Left-Click drag to create quick slices. Finally, Middle-Clicking or Middle-Click-Dragging will allow you to start your slice while your cursor is over the mesh. The Backspace key removes your last cut point.\nNote: Only edges that are within the slice plane will be sliced. If backface culling is enabled, it will prevent slices from going through the other side of the mesh.\n\nInsert Edge Loop:\nHolding Ctrl and Left-Clicking will allow for quick cuts to span across the entire edge ring. Middle-Clicking while holding Ctrl will insert the edge-loop exactly in the middle of the edge ring path.\n\nFor all three tools, holding Shift will snap the cut points to percentage increments specified in the Multi-Cut contextual options.";
				$link = "http://draster.com/videos/downloadable/help/NEX-Multi-Cut.mov";
				break;

			case "bevel":
				$manipName = "Bevel";
				$body = "The Bevel tool combines two interaction models:\n(1) If you have a selection, middle-click-drag will adjust the Bevel offset\n(2) If you do not have a selection, Left-click-dragging will Bevel the pre-highlighted component.\n\nThe Ctrl+Shift+Right-Mouse-Button marking menu will allow you to switch editing modes\n\nNote: Performing a Bevel on vertex selections will Chamfer instead (escentially a bevel with the end point(s) removed).\n\nIf a hotkey has been assigned for bevelPress and bevelRelease, you may hold that respective hotkey down and use the Right-Mouse-Button marking menu to switch editing modes.";
				$link = "http://draster.com/videos/downloadable/help/NEX-Bevel.mov";
				break;

			case "bridge":
				$manipName = "Bridge";
				$body = "A selection of two cooresponding edge or polygon islands can be Bridged together.\n\nLeft-Click-Dragging or Middle-Click-Dragging will adjust the amount of connecting face Divisions.\nThe Ctrl+Shift+RMB marking menu will allow you to change the Left-Click-Drag or Middle-Click-Drag editing mode. There are four editing modes for Bridge: Divisions (default), Taper, Twist, and Offset.";
				$link = "http://draster.com/videos/downloadable/help/NEX-Bridge.mov";
				break;

			case "connect":
				$manipName = "Connect";
				$body = "Using your left-mouse-button, select components (vertex, edge, and/or face) to split edges between them.\nMiddle-Click-Drag will adjust the amount of connecting edge segments.\nThe Ctrl+Shift+RMB marking menu will allow you change the Middle-Click-Drag editing mode. There are three editing modes for Connect: Slide, Segments (default), and Pinch.\n\nNote: Single edge selections will automatically connect the entire ring path.";
				$link = "http://draster.com/videos/downloadable/help/NEX-Connect.mov";
				break;

			case "extrude":
				$manipName = "Extrude";
				$body = "The Extrude tool combines two interaction models:\n(1) If you have a selection, middle-click-drag will adjust the Extrude Local Z\n(2) If you do not have a selection, Left-click-dragging will Extrude the pre-highlighted component.\n\nThe Ctrl+Shift+Right-Mouse-Button marking menu will allow you to switch editing modes.\n\nNote: Holding Shift while Middle-Click-Dragging or Left-Click-Dragging will create a new Extrusion.";
				$link = "http://draster.com/videos/downloadable/help/NEX-Extrude.mov";
				break;

			case "quadraw":
				$manipName = "Quad Draw";
				$body = "Details here:\nhttp://draster.com/help/nex/panel.php#quad_draw";
				$link = "http://draster.com/videos/downloadable/help/NEX-QuadDraw.mov";
				break;
		}

		$title = "NEX Help: " + $manipName;

		string $linkCmd = "system(\"Load " + $link + "\")";

		// If the window exists already, just show it
		if (`window -exists $drHelpWindow`) {
			scrollField -e -ip 1 -nl 6 -ed false -text $body $drHelpLabel;
			window -e -title $title -wh $width $height -rtf true $drHelpWindow;
			button -e -c $linkCmd $drHelpLink;
			showWindow $drHelpWindow;
		} else {
			$drHelpWindow = `window -tlc 310 490 -title $title -rtf true`;
			setParent $drHelpWindow;
				$helpLayout = `formLayout`;
					$drHelpLabel = `scrollField -ip 1 -ed false -font "smallPlainLabelFont" -wordWrap true -nl 6 -p $helpLayout -text $body`;
					$drHelpLink = `button -label "Show Video" -c $linkCmd`;

				formLayout -e
					-attachForm $drHelpLabel "left" 4
					-attachForm $drHelpLabel "right" 4
					-attachForm $drHelpLabel "top" 10
					-attachControl $drHelpLabel "bottom" 4 $drHelpLink

					-attachForm	$drHelpLink "left" 4
					-attachForm 	$drHelpLink "right" 4
					-attachForm	$drHelpLink "bottom" 10

					$helpLayout;

			window -e -wh $width $height -title $title $drHelpWindow;
			showWindow $drHelpWindow;
		}
	}

	global proc nexBuildPanel(string $parentForm)
	{
		global int $dRCmdPanelWidth;
		global string $gdRpanel;
		global string $gWorkAreaForm;
		global string $nexRefreshCmd;
		global string $dRModeBtns[];
		global string $gAttributeEditorForm;
		global string $gMainPane;
		global string $gdRPanes;
		global string $gDRTopPane;
		global string $gDRBottomPane;
		global int $dRCompBtnCount;
		global string $gdRCompBtns_Cmds[], $gdRCompBtns_Ann[], $gdRCompBtns_UpImages[], $gdRCompBtns_DownImages[], $gdRCompBtns_Names[], $gdRCompBtns[], $gdRCompBtns_DownImages[], $gdRCompBtns_MultiImages[];
		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;

		$dRModeBtns = { };

		setParent $parentForm;
			$gdRPanes = `paneLayout -cn "horizontal2" -width $dRCmdPanelWidth -ps 1 100 85 -ps 2 100 15`;
				$gDRTopPane = `formLayout -p $gdRPanes`;
				$gDRBottomPane = `shelfLayout -width $dRCmdPanelWidth -p $gdRPanes`;
				dRRestoreShelves();

		formLayout -edit
			-attachForm     	$gdRPanes "top"    0
			-attachForm     	$gdRPanes "bottom" 0
			-attachForm		$gdRPanes "left"   0 
			-attachForm  		$gdRPanes "right"  0
			$parentForm;

		global string $gdRCompBtns[];
		$gdRCompBtns[0] = `iconTextButton 
				-st "iconOnly"
				-i $gdRCompBtns_UpImages[0]
				-si $gdRCompBtns_DownImages[0]
				-width 98 -height 18
				-mh 0 -mw 0
				-annotation $gdRCompBtns_Ann[0]
				-c $gdRCompBtns_Cmds[0] -p $gDRTopPane`;

		int $i;
		for($i = 1; $i < $dRCompBtnCount; $i++) {
			 $gdRCompBtns[$i] = `iconTextButton
				-st "iconOnly"
				-i $gdRCompBtns_UpImages[$i]
				-si $gdRCompBtns_DownImages[$i]
				-width 32 -height 36
				-mh 0 -mw 0
				-annotation $gdRCompBtns_Ann[$i]
				-c ($gdRCompBtns_Cmds[$i]) -p $gDRTopPane`;
		}

		{
			setParent $gDRTopPane;
			global string $gdRpanel;

			$gdRpanel = `frameLayout -lv false -bv false -mh 4 -mw 0 -p $gDRTopPane`;
				string $frmLayout = `formLayout -p $gdRpanel`;
						string $buttonSet = `formLayout -p $frmLayout`;
							string $transformBtnsFrame = `frameLayout -p $buttonSet -lv false -bs "etchedIn" -width 120 -height 40 -mw 6 -mh 2`;
								string $transformBtnsForm = `formLayout -p $transformBtnsFrame`;
									string $selBtn = dR_addModeBtn(`iconTextButton
											-st "iconOnly"
											-i "nex/selectOff.xpm"
											-si "nex/selectOn.xpm"
											-ann "Select"
											-c "nexOpt -e manipType select; dR_updateCommandPanel();"
											-mh 0
											-mw 0
											-width 35 -height 29`);

									string $translateBtn = dR_addModeBtn(`iconTextButton
											-st "iconOnly"
											-i "nex/translateOff.xpm"
											-si "nex/translateOn.xpm"
											-ann "Move"
											-c "nexOpt -e manipType move; dR_updateCommandPanel();"
											-mh 0
											-mw 0
											-width 36 -height 29 -p $transformBtnsForm`);

									string $rotateBtn = dR_addModeBtn(`iconTextButton
											-st "iconOnly"
											-i "nex/rotateOff.xpm"
											-si "nex/rotateOn.xpm"
											-ann "Rotate"
											-c "nexOpt -e manipType rotate; dR_updateCommandPanel();"
											-mh 0
											-mw 0
											-width 37 -height 29 -p $transformBtnsForm`);

									string $scaleBtn = dR_addModeBtn(`iconTextButton
											-st "iconOnly"
											-i "nex/scaleOff.xpm"
											-si "nex/scaleOn.xpm"
											-ann "Scale"
											-c "nexOpt -e manipType scale; dR_updateCommandPanel();"
											-mh 0
											-mw 0
											-width 36 -height 29 -p $transformBtnsForm`);

							formLayout -e 
									-attachForm $selBtn "top" 2 
									-attachForm $selBtn "left" 4 

									-attachForm $translateBtn "top" 2 
									-attachControl $translateBtn "left" 0 $selBtn

									-attachForm $rotateBtn "top" 2
									-attachControl $rotateBtn "left" 0 $translateBtn

									-attachForm $scaleBtn "top" 2
									-attachControl $scaleBtn "left" 0 $rotateBtn

									$transformBtnsForm;

								/*
								string $paintSelBtn = dR_addModeBtn(`iconTextButton
										-st "iconOnly"
										-i "nex/paintOff.xpm"
										-si "nex/paintOn.xpm"
										-ann "Paint Select"
										-c "nexOpt -e manipType paint; dR_updateCommandPanel();"
										-mh 0
										-mw 0
										-width 36 -height 31`);
								*/

								string $checkBoxes = `columnLayout -p $buttonSet`;
									$selectionRBs = dR_addModeBtn(`radioButtonGrp -nrb 1
										-l "" 
										-cw2 1 100
										-l1 "Pick/Marquee"
										-ann "Pick/Marquee"
										-on1 ("nexOpt -e selectOption \"\"; dR_updateCommandPanel;")
										nexPickMarqueeGrp`);

									dR_addModeBtn(`radioButtonGrp -nrb 1
										-l "" 
										-cw2 1 100
										-l1 "Raycast"
										-ann "Raycast"
										-on1 ("nexOpt -e selectOption \"raycast\"; dR_updateCommandPanel;")
										-shareCollection $selectionRBs
										nexRaycastGrp`);

									dR_addModeBtn(`radioButtonGrp -nrb 1
										-l "" 
										-cw2 1 200
										-l1 "Hybrid Raycast/Marquee"
										-ann "Hybrid Raycast/Marquee"
										-on1 ("nexOpt -e selectOption \"hybrid\"; dR_updateCommandPanel;")
										-shareCollection $selectionRBs
										nexHybridRayGrp`);

									string $highlightBackfaces = dR_addModeBtn(`checkBox -p $buttonSet -ann "Highlight Backfaces" -l "Highlight Backfaces" -al "left" -cc "nexOpt -e highlightBackfacing #1; dR_updateCommandPanel();"`);
									string $previewLoopRing = dR_addModeBtn(`checkBox -p $buttonSet -ann "previewLoopRingBtn" -l "Preview Loop/Ring" -al "left" -cc "nexOpt -e previewLoopRing #1; dR_updateCommandPanel();"`);


						string $symFormLayout = `formLayout -p $buttonSet`;
							global string $nexSymBtn;
							$nexSymBtn = `checkBox -w 13 -label "" -ann "selConstChk" -p $symFormLayout -onc "nexCtx -sym" -ofc "nexCtx -dsm"`;

							global string $nexSymText;
							$nexSymText = `textField 
								-ed false 
								-width 142
								-height 25
								-p $symFormLayout
								-tx "Symmetry: Select Edge"
								-ann "Select a center line edge and press the symmetry button to initialize symmetry"`;

							global string $nexSymName;
							$nexSymName = `nameField
								-visible false
								-width 1
								-nameChangeCommand ("dR_updateSymField")
								-p $symFormLayout`;

						// Layout the above form
						formLayout -e


							-attachForm $nexSymBtn left   4
							-attachNone $nexSymBtn right
							-attachNone $nexSymBtn bottom
							-attachForm $nexSymBtn top 6

							-attachNone $nexSymText top
							-attachControl $nexSymText left 4 $nexSymBtn
							-attachForm $nexSymText bottom 0
							-attachNone $nexSymText right
							
							-attachNone $nexSymName top
							-attachControl $nexSymName left 0 $nexSymText
							-attachForm $nexSymName bottom 0
							-attachForm $nexSymName right 0

							$symFormLayout;


					formLayout -edit
						-attachForm $transformBtnsFrame "top" 0
						-attachForm $transformBtnsFrame "left" 0
						-attachForm $transformBtnsFrame "right" 0

						-attachControl $checkBoxes "top" 2 $transformBtnsFrame
						-attachForm $checkBoxes "left" 0
						-attachForm $checkBoxes "right" 0

						-attachControl $highlightBackfaces "top" 2 $checkBoxes
						-attachForm $highlightBackfaces "left" 10

						-attachControl $previewLoopRing "top" 2 $highlightBackfaces
						-attachForm $previewLoopRing "left" 10

						-attachForm $symFormLayout "left" 6
						-attachForm $symFormLayout "right" 0
						-attachControl $symFormLayout "top" 4 $previewLoopRing

						$buttonSet;

/*
					string $selToolsFrame = `frameLayout -p $frmLayout -l "Selection Tools" -bs "etchedIn" -width 120 -height 66 -mw 6 -mh 4 -cll true`;
						string $selToolsForm = `formLayout -p $selToolsFrame`;
							string $growBtn = dR_addModeBtn(`button -ann "growBtn" -l "Grow" -c "dR_growSelection" -width 55 -height 18 -p $selToolsForm`);
							string $shrinkBtn = dR_addModeBtn(`button -ann "shrinkBtn" -l "Shrink" -c "dR_shrinkSelection" -width 55 -height 18 -p $selToolsForm`);
							string $selSimBtn = dR_addModeBtn(`button -ann "selSimBtn" -l "Select Similar" -c "dR_selectSimilar; repeatLast -acl \"Select Similar\" -ac dR_selectSimilar;" -width 116 -height 18 -p $selToolsForm`);
						formLayout -edit
							-attachForm $growBtn "top" 0
							-attachForm $growBtn "left" 18

							-attachForm $shrinkBtn "top" 0
							-attachControl $shrinkBtn "left" 6 $growBtn

							-attachControl $selSimBtn "top" 2 $growBtn
							-attachForm $selSimBtn "left" 18

							$selToolsForm;

					frameLayout -e -cl true $selToolsFrame;
*/

					string $constraintsFrame = dR_addModeBtn(`frameLayout -p $frmLayout -l "Selection Constraints" -ann "Selection Constraints" -bs "etchedIn" -width 120 -height 38 -mw 6 -mh 4`);
						string $constraintsForm = `formLayout -p $constraintsFrame`;
							string $selConstChk = dR_addModeBtn(`checkBox -w 13 -label "" -ann "selConstChk" -p $constraintsForm -cc "nexOpt -e useSpecialSelType #1; dR_updateCommandPanel;"`);
							string $selConstDropdown = dR_addModeBtn(`optionMenu -label "" -ann "selConstDropdown" -p $constraintsForm -cc ("nexOpt -e specialSelType (tolower(strip(\"#1\"))); dR_updateCommandPanel;")`);
								menuItem -p $selConstDropdown -label "Angle                                      ";
								menuItem -p $selConstDropdown -label "Border                                     ";
								menuItem -p $selConstDropdown -label "Shell                                      ";
							float $angleVal = `nexOpt -q angleTolerance`;
							string $selConstField = dR_addModeBtn(`floatField -pre 0 -min 0 -max 180 -w 30 -h 26 -step 1 -ann "selConstField" -p $constraintsForm -cc "nexOpt -e angleTolerance #1" -v $angleVal`);

						formLayout -e
							-attachForm 	$selConstChk "top" 6
							-attachForm 	$selConstChk "left" 0

							-attachForm 	$selConstDropdown "top" 1
							-attachControl 	$selConstDropdown "left" 4 $selConstChk
							-attachControl 	$selConstDropdown "right" 0 $selConstField

							-attachForm 	$selConstField "top" 0
							-attachPosition $selConstField "left" 0 66
							-attachForm 	$selConstField "right" 0

							$constraintsForm;

				string $meshToolsFrame = `frameLayout -p $frmLayout -l "Mesh Editing Tools" -bs "etchedIn" -width 120 -mw 0 -mh 4 -cll true`;
					string $meshToolsLayout = `formLayout -p $meshToolsFrame`;
						string $connectBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/mConnectOff.xpm"
								-si "nex/mConnectOff.xpm"
								-ann "connectBtn"
								-c "nexOpt -e manipType connect; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $bridgeBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/NEXBridgeOff.xpm"
								-si "nex/NEXBridgeOn.xpm"
								-ann "bridgeBtn"
								-c "nexOpt -e manipType bridge; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $bevelBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/NEXBevelOff.xpm"
								-si "nex/NEXBevelOn.xpm"
								-ann "bevelBtn"
								-c "nexOpt -e manipType bevel; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $extrudeBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/extrudeOff.xpm"
								-si "nex/extrudeOn.xpm"
								-ann "extrudeBtn"
								-c "nexOpt -e manipType extrude; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $cutBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/mcutOff.xpm"
								-si "nex/mcutOn.xpm"
								-ann "cutBtn"
								-c "nexOpt -e manipType cut; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $weldBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/targetWeldOff.xpm"
								-si "nex/targetWeldOn.xpm"
								-ann "weldBtn"
								-c "nexOpt -e manipType weld; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

						string $quaDrawBtn = dR_addModeBtn(`iconTextButton
								-st "iconOnly"
								-i "nex/quadDrawOff.xpm"
								-si "nex/quadDrawOn.xpm"
								-ann "quaDrawBtn"
								-c "nexOpt -e manipType quadraw; dR_updateCommandPanel();"
								-mh 0
								-mw 0
								-width 80 -height 22 -p $meshToolsLayout`);

			formLayout -edit
				-attachForm  	$bevelBtn "top" 		4
				-attachForm  	$bevelBtn "left" 		2

				-attachForm  $cutBtn "top" 			4
				-attachControl  $cutBtn "left"			0	$bevelBtn
				-attachForm  $cutBtn "right" 			0

				-attachControl  $bridgeBtn "top" 		4 	$cutBtn
				-attachForm  $bridgeBtn "left" 			2

				-attachControl  $weldBtn "top" 			4	$cutBtn
				-attachControl  $weldBtn "left"			0	$bridgeBtn
				-attachForm  	$weldBtn "right" 		0

				-attachControl  $connectBtn "top"			4 	$bridgeBtn
				-attachForm  $connectBtn "left" 			2

				-attachControl  $quaDrawBtn "top"		4	$weldBtn
				-attachControl  $quaDrawBtn "left"		0	$connectBtn
				-attachForm  	$quaDrawBtn "right" 		0

				-attachControl  $extrudeBtn "top"		4 	$connectBtn
				-attachForm  $extrudeBtn "left" 		2

				$meshToolsLayout;

			formLayout -edit
				-attachForm  	$buttonSet "top" 		0
				-attachForm  	$buttonSet "left" 		0
				-attachForm  	$buttonSet "right" 	0

				-attachControl  $constraintsFrame 	"top" 	4 $buttonSet
				-attachForm  	$constraintsFrame    	"left" 	0
				-attachForm  	$constraintsFrame    	"right"	0

				/*
				-attachControl  $selToolsFrame 	"top" 	4 $constraintsFrame
				-attachForm  	$selToolsFrame 	"left" 	0
				-attachForm  	$selToolsFrame 	"right"	0
				*/

				-attachControl  $meshToolsFrame "top" 	4 $constraintsFrame
				-attachForm  	$meshToolsFrame "left"	0
				-attachForm  	$meshToolsFrame "right"	0

				$frmLayout;

			global string $drOptionPanel, $drTFormLayout, $drQuaDrawPanel, $drConnectFormLayout, $drBridgeFormLayout, $drVertExtrudeFormLayout, $drVertChamferFormLayout, $drFaceExtrudeFormLayout, $drBevelFormLayout, $drCutFormLayout;

			$drOptionPanel = `formLayout -p $gDRTopPane`;
				{
					$drConnectFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $connectFrame = `frameLayout -p $drConnectFormLayout -l "Connect Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $connectFormLayout = `formLayout -p $connectFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								global string $drSlideRB, $drSegRadio, $drPinchRadio, $drSlideField, $drConnSegField, $drConnPinchField;
								$drSlideRB = dR_addModeBtn(`radioButtonGrp
									-nrb 1
									-ann "Connect Slide Radio"
									-l "" 
									-cw2 1 60
									-l1 "Slide"
									-on1 ("nexOpt -e connectCurLmbMap slide; refresh -f;")
									nexConnectSlide`);
								$drSlideField = dR_addModeBtn(`floatField -ann "Connect Slide Field" -cc "nexCtx -e -mv connect slide #1" -step 0.01 -pre 2 -v 0.5 -min 0.01 -max 0.99 -height 22 -width 43`);

								$drSegRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Segments"
									-on1 ("nexOpt -e connectCurLmbMap segments; refresh -f;")
									-shareCollection $drSlideRB
									nexConnectSegments`);

								$drConnSegField = dR_addModeBtn(`intField -ann "Connect Segments Field" -cc "nexCtx -e -mv connect segments #1" -step 1 -v 1 -min 1 -max 50 -height 22 -width 43`);

								$drPinchRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Pinch"
									-on1 ("nexOpt -e connectCurLmbMap pinch; refresh -f;")
									-shareCollection $drSlideRB
									nexConnectPinch`);

								$drConnPinchField = dR_addModeBtn(`floatField -ann "Connect Pinch Field" -cc "nexCtx -e -mv connect pinch #1" -step 0.01 -pre 2 -v 1 -min -0.99 -max 10.0 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $drSlideRB "left" 0
									-attachForm $drSlideRB "top" 2

									-attachControl $drSlideField "left" 10 $drSlideRB
									-attachForm $drSlideField "top" 0

									-attachForm $drSegRadio "left" 0
									-attachControl $drSegRadio "top" 8 $drSlideRB

									-attachOppositeControl $drConnSegField "left" 0 $drSlideField
									-attachControl $drConnSegField "top" 0 $drSlideField

									-attachForm $drPinchRadio "left" 0
									-attachControl $drPinchRadio "top" 8 $drSegRadio

									-attachOppositeControl $drConnPinchField "left" 0 $drConnSegField
									-attachControl $drConnPinchField "top" 0 $drConnSegField

									-attachControl $resetButton "top" 8 $drConnPinchField
									-attachForm $resetButton "left" 20

									$connectFormLayout;

						formLayout -edit
							-attachForm	$connectFrame "top"	0
							-attachForm	$connectFrame "left"	0
							-attachForm	$connectFrame "right"	0
							$drConnectFormLayout;
				}

				{
					$drBridgeFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $bridgeFrame = `frameLayout -p $drBridgeFormLayout -l "Bridge Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $bridgeFormLayout = `formLayout -p $bridgeFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$divisionsRB = dR_addModeBtn(`radioButtonGrp
									-nrb 1
									-ann "Bridge Divisions Radio"
									-l "" 
									-cw2 1 60
									-l1 "Divisions"
									-on1 ("nexOpt -e bridgeCurLmbMap divisions; refresh -f;")
									nexBridgeDivisions`);
								$divisionsField = dR_addModeBtn(`intField -ann "Bridge Divisions Field" -cc "nexCtx -e -mv bridge divisions #1" -step 1 -v 1 -min 0 -max 25 -height 22 -width 43`);

								$taperRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Taper"
									-on1 ("nexOpt -e bridgeCurLmbMap taper; refresh -f;")
									-shareCollection $divisionsRB
									nexBridgeTaper`);
								$taperField = dR_addModeBtn(`floatField -ann "Bridge Taper Field" -cc "nexCtx -e -mv bridge taper #1" -step 0.01 -pre 2 -v 1 -min 0 -max 15 -height 22 -width 43`);

								$twistRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Twist"
									-on1 ("nexOpt -e bridgeCurLmbMap twist; refresh -f;")
									-shareCollection $divisionsRB
									nexBridgeTwist`);
								$twistField = dR_addModeBtn(`floatField -ann "Bridge Twist Field" -cc "nexCtx -e -mv bridge twist #1" -step 0.01 -pre 2 -v 1 -min -180 -max 180 -height 22 -width 43`);

								$offsetRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Offset"
									-on1 ("nexOpt -e bridgeCurLmbMap offset; refresh -f;")
									-shareCollection $divisionsRB
									nexBridgeOffset`);
								$offsetField = dR_addModeBtn(`intField -ann "Bridge Offset Field" -cc "nexCtx -e -mv bridge offset #1" -step 1 -v 1 -min 0 -max 10 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $divisionsRB "left" 0
									-attachForm $divisionsRB "top" 2
									-attachControl $divisionsField "left" 10 $divisionsRB
									-attachForm $divisionsField "top" 0

									-attachForm $taperRadio "left" 0
									-attachControl $taperRadio "top" 8 $divisionsRB
									-attachOppositeControl $taperField "left" 0 $divisionsField
									-attachControl $taperField "top" 0 $divisionsField

									-attachForm $twistRadio "left" 0
									-attachControl $twistRadio "top" 8 $taperRadio
									-attachOppositeControl $twistField "left" 0 $taperField
									-attachControl $twistField "top" 0 $taperField

									-attachForm $offsetRadio "left" 0
									-attachControl $offsetRadio "top" 8 $twistRadio
									-attachOppositeControl $offsetField "left" 0 $twistField
									-attachControl $offsetField "top" 0 $twistField

									-attachControl $resetButton "top" 8 $offsetField
									-attachForm $resetButton "left" 20

									$bridgeFormLayout;

							formLayout -edit
								-attachForm	$bridgeFrame "top"	0
								-attachForm	$bridgeFrame "left"	0
								-attachForm	$bridgeFrame "right"	0
								$drBridgeFormLayout;
				}

				{
					$drVertExtrudeFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $vertExtrudeFrame = `frameLayout -p $drVertExtrudeFormLayout -l "Vertex Extrude Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $vertExtrudeFormLayout = `formLayout -p $vertExtrudeFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$divisionsRB = dR_addModeBtn(`radioButtonGrp
									-nrb 1
									-ann "Vertex Extrude Divisions Radio"
									-l "" 
									-cw2 1 60
									-l1 "Divisions"
									-on1 ("nexOpt -e extrudeVertexCurLmbMap divisions; refresh -f;")
									nexVertExtrudeDivisions`);
								$divisionsField = dR_addModeBtn(`intField -ann "VertExtrude Divisions Field" -cc "nexCtx -e -mv vertExtrude divisions #1" -step 1 -v 1 -min 0 -max 10 -height 22 -width 43`);

								$widthRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Width"
									-on1 ("nexOpt -e extrudeVertexCurLmbMap width; refresh -f;")
									-shareCollection $divisionsRB
									nexVertExtrudeWidth`);
								$widthField = dR_addModeBtn(`floatField -ann "VertExtrude Width Field" -cc "nexCtx -e -mv vertExtrude width #1" -step 0.01 -pre 2 -v 1 -min 0 -max 15 -height 22 -width 43`);

								$heightRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Height"
									-on1 ("nexOpt -e extrudeVertexCurLmbMap length; refresh -f;")
									-shareCollection $divisionsRB
									nexVertExtrudeHeight`);
								$heightField = dR_addModeBtn(`floatField -ann "VertExtrude Height Field" -cc "nexCtx -e -mv vertExtrude height #1" -step 0.01 -pre 2 -v 1 -min 0 -max 15 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $divisionsRB "left" 0
									-attachForm $divisionsRB "top" 2
									-attachControl $divisionsField "left" 10 $divisionsRB
									-attachForm $divisionsField "top" 0

									-attachForm $widthRadio "left" 0
									-attachControl $widthRadio "top" 8 $divisionsRB
									-attachOppositeControl $widthField "left" 0 $divisionsField
									-attachControl $widthField "top" 0 $divisionsField

									-attachForm $heightRadio "left" 0
									-attachControl $heightRadio "top" 8 $widthRadio
									-attachOppositeControl $heightField "left" 0 $widthField
									-attachControl $heightField "top" 0 $widthField

									-attachControl $resetButton "top" 8 $heightField
									-attachForm $resetButton "left" 20

									$vertExtrudeFormLayout;

							formLayout -edit
								-attachForm	$vertExtrudeFrame "top"	0
								-attachForm	$vertExtrudeFrame "left"	0
								-attachForm	$vertExtrudeFrame "right"	0
								$drVertExtrudeFormLayout;
				}

				{
					$drVertChamferFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $vertChamferFrame = `frameLayout -p $drVertChamferFormLayout -l "Vertex Chamfer Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $vertChamferFormLayout = `formLayout -p $vertChamferFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$widthRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-ann "Vertex Extrude Divisions Radio"
									-l "" 
									-cw2 1 60
									-l1 "Width"
									-on1 ("nexOpt -e extrudeVertexCurLmbMap width; refresh -f;")
									nexVertExtrudeWidth`);
								$widthField = dR_addModeBtn(`floatField -ann "VertExtrude Width Field" -cc "nexCtx -e -mv vertExtrude width #1" -step 0.01 -pre 2 -v 1 -min 0 -max 15 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $widthRadio "left" 0
									-attachForm $widthRadio "top" 2
									-attachControl $widthField "left" 10 $widthRadio
									-attachForm $widthField "top" 0

									-attachControl $resetButton "top" 8 $widthField
									-attachForm $resetButton "left" 20

									$vertChamferFormLayout;

							formLayout -edit
								-attachForm	$vertChamferFrame "top"	0
								-attachForm	$vertChamferFrame "left"	0
								-attachForm	$vertChamferFrame "right"	0
								$drVertChamferFormLayout;
				}

				{
					$drFaceExtrudeFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $faceExtrudeFrame = `frameLayout -p $drFaceExtrudeFormLayout -l "Face Extrude Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $faceExtrudeFormLayout = `formLayout -p $faceExtrudeFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$divisionsRB = dR_addModeBtn(`radioButtonGrp
									-nrb 1
									-ann "Face Extrude Divisions Radio"
									-l "" 
									-cw2 1 60
									-l1 "Divisions"
									-on1 ("nexOpt -e extrudeFaceCurLmbMap divisions; refresh -f;")
									nexFaceExtrudeDivisions`);
								$divisionsField = dR_addModeBtn(`intField -ann "Face Extrude Divisions Field" -cc "nexCtx -e -mv faceextrude divisions #1" -step 1 -v 1 -min 0 -max 50 -height 22 -width 43`);

								$localzRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Local Z"
									-on1 ("nexOpt -e extrudeFaceCurLmbMap localz; refresh -f;")
									-shareCollection $divisionsRB
									nexFaceExtrudeLocalZ`);
								$localzField = dR_addModeBtn(`floatField -ann "Face Extrude Local Z Field" -cc "nexCtx -e -mv faceextrude localz #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43`);

								$offsetRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Offset"
									-on1 ("nexOpt -e extrudeFaceCurLmbMap offset; refresh -f;")
									-shareCollection $divisionsRB
									nexFaceExtrudeOffset`);
								$offsetField = dR_addModeBtn(`floatField -ann "Face Extrude Offset Field" -cc "nexCtx -e -mv faceextrude offset #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $divisionsRB "left" 0
									-attachForm $divisionsRB "top" 2
									-attachControl $divisionsField "left" 10 $divisionsRB
									-attachForm $divisionsField "top" 0

									-attachForm $localzRadio "left" 0
									-attachControl $localzRadio "top" 8 $divisionsRB
									-attachOppositeControl $localzField "left" 0 $divisionsField
									-attachControl $localzField "top" 0 $divisionsField

									-attachForm $offsetRadio "left" 0
									-attachControl $offsetRadio "top" 8 $localzRadio
									-attachOppositeControl $offsetField "left" 0 $localzField
									-attachControl $offsetField "top" 0 $localzField

									-attachControl $resetButton "top" 8 $offsetField
									-attachForm $resetButton "left" 20

									$faceExtrudeFormLayout;

							formLayout -edit
								-attachForm	$faceExtrudeFrame "top"	0
								-attachForm	$faceExtrudeFrame "left"	0
								-attachForm	$faceExtrudeFrame "right"	0
								$drFaceExtrudeFormLayout;
				}

				{
					$drBevelFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $bevelFrame = `frameLayout -p $drBevelFormLayout -l "Bevel Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $bevelFormLayout = `formLayout -p $bevelFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$divisionsRB = dR_addModeBtn(`radioButtonGrp
									-nrb 1
									-ann "Bevel Divisions Radio"
									-l "" 
									-cw2 1 60
									-l1 "Segments"
									-on1 ("nexOpt -e polyBevelCurLmbMap segments; refresh -f;")
									nexBevelDivisions`);
								$divisionsField = dR_addModeBtn(`intField -ann "Bevel Divisions Field" -cc "nexCtx -e -mv bevel divisions #1" -step 1 -v 1 -min 1 -max 100 -height 22 -width 43`);

								$offsetRadio = dR_addModeBtn(`radioButtonGrp -nrb 1
									-l "" 
									-cw2 1 60
									-l1 "Offset"
									-on1 ("nexOpt -e polyBevelCurLmbMap offset; refresh -f;")
									-shareCollection $divisionsRB
									nexBevelOffset`);
								$offsetField = dR_addModeBtn(`floatField -ann "Bevel Offset Field" -cc "nexCtx -e -mv bevel offset #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -e 
									-attachForm $helpBtn "right" 2

									-attachForm $divisionsRB "left" 0
									-attachForm $divisionsRB "top" 2
									-attachControl $divisionsField "left" 10 $divisionsRB
									-attachForm $divisionsField "top" 0

									-attachForm $offsetRadio "left" 0
									-attachControl $offsetRadio "top" 8 $divisionsRB
									-attachOppositeControl $offsetField "left" 0 $divisionsField
									-attachControl $offsetField "top" 0 $divisionsField

									-attachControl $resetButton "top" 8 $offsetField
									-attachForm $resetButton "left" 20

									$bevelFormLayout;


							formLayout -edit
								-attachForm	$bevelFrame "top"	0
								-attachForm	$bevelFrame "left"	0
								-attachForm	$bevelFrame "right"	0
								$drBevelFormLayout;
				}

				{
					$drCutFormLayout = `formLayout -m 0 -p $drOptionPanel`;
						string $cutFrame = `frameLayout -p $drCutFormLayout -l "Multi-Cut Options" -bs "etchedIn" -mw 0 -mh 4 -cll true`;
							string $cutFormLayout = `formLayout -p $cutFrame`;
								$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

								$offsetLabel = dR_addModeBtn(`text -label "Snap %"`);
								$snapAngle = `nexOpt -q cutSnapAngle`;
								$offsetField = dR_addModeBtn(`intField -ann "Snap %" -dc "nexOpt -e cutSnapAngle #1" -cc "nexOpt -e cutSnapAngle #1" -step 1 -v $snapAngle -height 22 -width 43 -min 1 -max 90`);

								$smoothingLabel = dR_addModeBtn(`text -label "Smoothing Angle"`);
								$smoothingAngle = `nexOpt -q cutSmoothingAngle`;
								$smoothingField = dR_addModeBtn(`intField -ann "Smoothing Angle" -dc "nexOpt -e cutSmoothingAngle #1" -cc "nexOpt -e cutSmoothingAngle #1" -step 1 -v $smoothingAngle -height 22 -width 43 -min 0 -max 360`);

								$resetButton = `button -label "Reset Settings" -c "nexCtx -resetManip; dR_updateCommandPanel;"`;

								formLayout -edit
									-attachForm $helpBtn "right" 2

									-attachForm $offsetLabel "left" 6
									-attachForm $offsetLabel "top" 6

									-attachControl $offsetField "left" 50 $offsetLabel
									-attachForm $offsetField "top" 2

									-attachForm $smoothingLabel "left" 6
									-attachControl $smoothingLabel "top" 6 $offsetField

									-attachOppositeControl $smoothingField "left" 0 $offsetField
									-attachControl $smoothingField "top" 0 $offsetField

									-attachControl $resetButton "top" 12 $smoothingLabel
									-attachForm $resetButton "left" 40

									$cutFormLayout;

							formLayout -edit

								-attachForm	$cutFrame "top"	0
								-attachForm	$cutFrame "left"	0
								-attachForm	$cutFrame "right"	0

								$drCutFormLayout;
				}

				string $drTFormLayout = `formLayout -m 0 -p $drOptionPanel`;
					string $transformFrame = `frameLayout -p $drTFormLayout -l "Transform Options" -bs "etchedIn" -width 170 -mw 0 -mh 4 -cll true`;
						string $transFormLayout = `formLayout -p $transformFrame`;

							string $clickDragChk = dR_addModeBtn(`checkBox -ann "Tweak" -l "Tweak" -h 24 -cc "nexOpt -e -s useClickDrag #1;"`);

							string $xyzAxis = dR_addModeBtn(`iconTextButton
									-st "iconOnly"
									-i "nex/xyzOff.xpm"
									-si "nex/xyzOn.xpm"
									-c ("dR_setActiveAxis " + $nexHandleXYZ)
									-ann "XYZ Axis"
									-mh 0
									-mw 0
									-width 10 -height 58 -p $transFormLayout`);

							string $xAxis = dR_addModeBtn(`iconTextButton
									-st "iconOnly"
									-i "nex/xOff.xpm"
									-si "nex/xOn.xpm"
									-c ("dR_setActiveAxis " + $nexHandleX)
									-ann "X Axis"
									-mh 0
									-mw 0
									-width 22 -height 20 -p $transFormLayout`);

							string $yAxis = dR_addModeBtn(`iconTextButton
									-st "iconOnly"
									-i "nex/yOff.xpm"
									-si "nex/yOn.xpm"
									-ann "Y Axis"
									-c ("dR_setActiveAxis " + $nexHandleY)
									-mh 0
									-mw 0
									-width 22 -height 20 -p $transFormLayout`);

							string $zAxis = dR_addModeBtn(`iconTextButton
									-st "iconOnly"
									-i "nex/zOff.xpm"
									-si "nex/zOn.xpm"
									-ann "Z Axis"
									-c ("dR_setActiveAxis " + $nexHandleZ)
									-mh 0
									-mw 0
									-width 22 -height 20 -p $transFormLayout`);

							string $slideChk = dR_addModeBtn(`checkBox -ann "Slide" -l "Slide:" -h 24 -w 46 -cc "nexOpt -e -s slide #1;"`);

							string $nexSlideFrame = `formLayout -p $transFormLayout`;
								string $slideBtn = `iconTextButton
									-w 17 -h 26
									-ann "Set the Slide surface"
									-image "popupMenuIcon.xpm" 
									-p $nexSlideFrame`;

								global string $nexSlideText;
								$nexSlideText = `textField 
									-ed false 
									-width 75
									-height 25
									-p $nexSlideFrame
									-tx "Edge"
									-ann "slideTextField"`;

								global string $nexSlideName;
								$nexSlideName = `nameField
									-visible false
									-width 1
									-nameChangeCommand ("dR_updateSlideField")
									-p $nexSlideFrame`;

								string $menu = `popupMenu -b 1 -p $nexSlideFrame`;
									menu -e -pmc ("dR_buildSlideMenu " + $menu) $menu;

							// Layout the above form
							formLayout -e
								-attachForm $slideBtn left   4
								-attachNone $slideBtn right
								-attachForm $slideBtn bottom 0
								-attachNone $slideBtn top
								
								-attachNone $nexSlideText top
								-attachControl $nexSlideText left 0 $slideBtn
								-attachForm $nexSlideText bottom 0
								-attachNone $nexSlideText right

								$nexSlideFrame;

							string $xField = dR_addModeBtn(`floatField -ann "X Field" -dc "" -cc "dR_transformFloat x #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43 -p $transFormLayout`);
							string $yField = dR_addModeBtn(`floatField -ann "Y Field" -dc "" -cc "dR_transformFloat y #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43 -p $transFormLayout`);
							string $zField = dR_addModeBtn(`floatField -ann "Z Field" -dc "" -cc "dR_transformFloat z #1" -step 0.01 -pre 2 -v 1 -height 22 -width 43 -p $transFormLayout`);

							global string $nexManipCoordSpace;
							$nexManipCoordSpace = dR_addModeBtn(`optionMenu -ann "manipCoordSpaceDrop" -label "" -p $transFormLayout -cc "nexOpt -e manipCoordSpace `tolower #1`; dR_updateCommandPanel();"`);
								menuItem -label "World";
								menuItem -label "Object";
								menuItem -label "Local";
								menuItem -label "Custom";

							string $pivotBtn = dR_addModeBtn(`iconTextButton
									-st "iconOnly"
									-i "nex/adjustPivotOff.xpm"
									-si "nex/adjustPivotOn.xpm"
									-ann "pivotBtn"
									-c "nexOpt -e manipType pivot; dR_updateCommandPanel();"
									-mh 0
									-mw 0
									-width 144 -height 22 -p $transFormLayout`);

							string $locksFrame = `frameLayout -p $transFormLayout -l "Vertex Locking" -bs "etchedIn" -mw 6 -mh 4 -cll true`;
								string $locksFormLayout = `formLayout -p $locksFrame`;
									string $lockSelBtn = dR_addModeBtn(`button -ann "lockSelBtn" -l "Lock Selected" -c "nexCtx -ls; dR_updateCommandPanel();" -rs false -height 18 -p $locksFormLayout`);
									string $selLockedBtn = dR_addModeBtn(`button -ann "selLockedBtn" -l "Select Locked" -c "nexCtx -sl; dR_updateCommandPanel();" -rs false -height 18 -p $locksFormLayout`);
									string $unlockAllBtn = dR_addModeBtn(`button -ann "unlockAllBtn" -l "Unlock All" -c "nexCtx -ua; dR_updateCommandPanel();" -rs false -height 18 -p $locksFormLayout`);
								frameLayout -e -cl true $locksFrame;

							formLayout -e 
								-attachForm $lockSelBtn "left" 0
								-attachForm $lockSelBtn "top" 2
								-attachForm $lockSelBtn "right" 0

								-attachForm $selLockedBtn "left" 0
								-attachForm $selLockedBtn "right" 0
								-attachControl $selLockedBtn "top" 4 $lockSelBtn

								-attachForm $unlockAllBtn "left" 0
								-attachForm $unlockAllBtn "right" 0
								-attachControl $unlockAllBtn "top" 4 $selLockedBtn

								$locksFormLayout;

							string $softSel = buildSSPanel($transFormLayout);

							formLayout -e
								-attachForm $clickDragChk "top" 6
								-attachForm $clickDragChk "left" 12

								-attachControl $xyzAxis "left" 6 $nexManipCoordSpace
								-attachForm $xyzAxis "top" 3 

								-attachForm $xAxis "top" 1 
								-attachControl $xAxis "left" 0 $xyzAxis

								-attachForm $xField "top" 0
								-attachControl $xField "left" 0 $xAxis

								-attachControl $yAxis "top" 1 $xAxis
								-attachControl $yAxis "left" 0 $xyzAxis

								-attachControl $yField "top" 0 $xAxis
								-attachControl $yField "left" 0 $yAxis

								-attachControl $zAxis "top" 1 $yAxis
								-attachControl $zAxis "left" 0 $xyzAxis

								-attachControl $zField "top" 0 $yAxis
								-attachControl $zField "left" 0 $zAxis

								-attachForm $pivotBtn "left" 8
								-attachControl $pivotBtn "top" 6 $zField

								-attachForm $nexManipCoordSpace "left" 8 
								-attachControl $nexManipCoordSpace "top" 4 $clickDragChk
								-attachForm $nexManipCoordSpace "top" 1 

								-attachForm $slideChk "left" 12
								-attachControl $slideChk "top" 4 $pivotBtn

								-attachControl $nexSlideFrame "left" 0 $slideChk
								-attachControl $nexSlideFrame "top" 4 $pivotBtn

								-attachForm $locksFrame "left" 0
								-attachForm $locksFrame "right" 0
								-attachControl $locksFrame "top" 6 $nexSlideFrame

								-attachControl  $softSel "top" 			4 $locksFrame
								-attachForm  	$softSel "left" 		0
								-attachForm  	$softSel "right" 		0

								$transFormLayout;
				
				$drQuaDrawPanel = `formLayout -m 0 -p $drOptionPanel`;
					string $quaDrawFrame = `frameLayout -lv true -l "Quad Draw Options" -cll true -bv true -bs "etchedIn" -mh 2 -mw 0 -p $drQuaDrawPanel`;
						//frameLayout -e -cc ("frameLayout -e -l \"Quad Draw Options\" " + $quaDrawFrame) -ec ("frameLayout -e -l \"                                     \" " + $quaDrawFrame) $quaDrawFrame;
						string $quaDrawForm = `formLayout -p $quaDrawFrame`;
							$helpBtn = `button -l "?" -c "dR_ctxHelp"`;

							global string $nexRefFrame;
								$nexRefFrame = `formLayout -p $quaDrawForm`;

								string $nexPickRefSurface = `iconTextButton
									-w 17 -h 26
									-ann "Set the Quad Draw reference surface"
									-image "popupMenuIcon.xpm" 
									-p $nexRefFrame`;

								global string $nexRefSurfaceText;
								$nexRefSurfaceText = `textField 
									-ed false 
									-width 126
									-height 25
									-p $nexRefFrame
									-tx "Grid"
									-ann "Set the Quad Draw reference surface"`;

								global string $nexRefSurfaceName;
								$nexRefSurfaceName = `nameField
									-visible false
									-width 1
									-nameChangeCommand ("dR_updateRefMeshField")
									-p $nexRefFrame`;

								string $menu = `popupMenu -b 1 -p $nexRefFrame`;
									menu -e -pmc ("dR_buildRefMeshMenu " + $menu) $menu;

							//string $shrinkWrapBtn = dR_addModeBtn(`button -ann "Shrink Wrap" -l "Shrink Wrap" -en false -c "nexCtx -qsr;" -rs false -height 18 -p $quaDrawForm`);

			formLayout -edit
				-attachNone	$quaDrawFrame "top"
				-attachForm	$quaDrawFrame "left"	0
				-attachForm	$quaDrawFrame "right"	0
				$drQuaDrawPanel;

			formLayout -edit
				-attachForm $helpBtn "right" 2

				-attachNone	$nexRefFrame "top"
				-attachForm	$nexRefFrame "left"	0
				//-attachForm	$nexRefFrame "right"	0
				//-attachControl	$nexRefFrame "bottom"	3 $shrinkWrapBtn

				/*
				-attachNone	$shrinkWrapBtn "top"
				-attachForm	$shrinkWrapBtn "left"	4
				-attachForm	$shrinkWrapBtn "right"	4
				-attachForm	$shrinkWrapBtn "bottom"	2
				*/

				$quaDrawForm;

			formLayout -edit
				-attachForm	$transformFrame "top"	0
				-attachForm	$transformFrame "left"	0
				-attachForm	$transformFrame "right"	0
				$drTFormLayout;

			formLayout -edit
				-attachForm	$drTFormLayout "top"	0
				-attachForm	$drTFormLayout "left"	0
				-attachForm	$drTFormLayout "right"	0

				-attachForm	$drQuaDrawPanel "top"	0
				-attachForm	$drQuaDrawPanel "left"	0
				-attachForm	$drQuaDrawPanel "right"	0

				-attachForm	$drConnectFormLayout "top"	0
				-attachForm	$drConnectFormLayout "left"	0
				-attachForm	$drConnectFormLayout "right"	0

				-attachForm	$drBridgeFormLayout "top"	0
				-attachForm	$drBridgeFormLayout "left"	0
				-attachForm	$drBridgeFormLayout "right"	0

				-attachForm	$drVertExtrudeFormLayout "top"	0
				-attachForm	$drVertExtrudeFormLayout "left"	0
				-attachForm	$drVertExtrudeFormLayout "right"	0

				-attachForm	$drVertChamferFormLayout "top"	0
				-attachForm	$drVertChamferFormLayout "left"	0
				-attachForm	$drVertChamferFormLayout "right"	0

				-attachForm	$drFaceExtrudeFormLayout "top"	0
				-attachForm	$drFaceExtrudeFormLayout "left"	0
				-attachForm	$drFaceExtrudeFormLayout "right"	0

				-attachForm	$drBevelFormLayout 	"top"	0
				-attachForm	$drBevelFormLayout 	"left"	0
				-attachForm	$drBevelFormLayout 	"right"	0

				-attachForm	$drCutFormLayout 	"top"	0
				-attachForm	$drCutFormLayout 	"left"	0
				-attachForm	$drCutFormLayout 	"right"	0

				$drOptionPanel;

			// Layout the above form
			formLayout -e
				-attachForm $nexPickRefSurface left   4
				-attachNone $nexPickRefSurface right
				-attachForm $nexPickRefSurface bottom 0
				-attachNone $nexPickRefSurface top
				
				-attachNone $nexRefSurfaceText top
				-attachControl $nexRefSurfaceText left 0 $nexPickRefSurface
				-attachForm $nexRefSurfaceText bottom 0
				-attachNone $nexRefSurfaceText right
				
				-attachNone $nexRefSurfaceName top
				-attachControl $nexRefSurfaceName left 0 $nexRefSurfaceText
				-attachForm $nexRefSurfaceName bottom 0
				-attachForm $nexRefSurfaceName right 0

				$nexRefFrame;

			global string $nexVertexLabel, $nexEdgeLabel, $nexFaceLabel, $nexUVLabel;
			$nexVertexLabel = `text -rs false -height 14 -label "0" -align "center" -p $gDRTopPane`;
			$nexEdgeLabel = `text -rs false -height 14 -label "0" -align "center" -p $gDRTopPane`;
			$nexFaceLabel = `text -rs false -height 14 -label "0" -align "center" -p $gDRTopPane`;
			$nexUVLabel = `text -rs false -height 14 -label "0" -align "center" -p $gDRTopPane`;

			formLayout -edit
				-attachForm     $gdRCompBtns[0] "top"    10
				-attachForm	$gdRCompBtns[0] "left"   0 
				-attachForm  	$gdRCompBtns[0] "right"  0

				-attachControl  $gdRCompBtns[1] "top"    0 $gdRCompBtns[0]
				-attachForm	$gdRCompBtns[1] "left"   5
				-attachNone  	$gdRCompBtns[1] "right"

				-attachControl  $gdRCompBtns[2] "top"    0 $gdRCompBtns[0]
				-attachControl	$gdRCompBtns[2] "left"   0 $gdRCompBtns[1]
				-attachNone  	$gdRCompBtns[2] "right"

				-attachControl  $nexVertexLabel "top"    2 $gdRCompBtns[1]
				-attachControl	$nexVertexLabel "left"   0 $gdRCompBtns[1]
				-attachControl 	$nexVertexLabel "right"  0 $gdRCompBtns[3]

				-attachControl  $gdRCompBtns[3] "top"    0 $gdRCompBtns[0]
				-attachControl	$gdRCompBtns[3] "left"   0 $gdRCompBtns[2]
				-attachNone  	$gdRCompBtns[3] "right"

				-attachControl  $nexEdgeLabel "top"    2 $gdRCompBtns[1]
				-attachControl	$nexEdgeLabel "left"   0 $gdRCompBtns[2]
				-attachControl 	$nexEdgeLabel "right"  0 $gdRCompBtns[4]

				-attachControl  $gdRCompBtns[4] "top"    0 $gdRCompBtns[0]
				-attachControl	$gdRCompBtns[4] "left"   0 $gdRCompBtns[3]
				-attachNone  	$gdRCompBtns[4] "right"

				-attachControl  $nexFaceLabel "top"    2 $gdRCompBtns[1]
				-attachControl	$nexFaceLabel "left"   0 $gdRCompBtns[3]
				-attachControl 	$nexFaceLabel "right"  0 $gdRCompBtns[5]

				-attachControl  $gdRCompBtns[5] "top"    0 $gdRCompBtns[0]
				-attachControl	$gdRCompBtns[5] "left"   0 $gdRCompBtns[4]
				-attachForm  	$gdRCompBtns[5] "right"  0

				-attachControl  $nexUVLabel "top"    2 $gdRCompBtns[1]
				-attachControl	$nexUVLabel "left"   0 $gdRCompBtns[4]
				-attachForm  	$nexUVLabel "right"  0
				-attachNone  	$nexUVLabel "bottom"

				-attachNone	$drOptionPanel "top"
				-attachForm	$drOptionPanel "left" 	0
				-attachForm	$drOptionPanel "right" 	0
				-attachForm	$drOptionPanel "bottom" 	0

				-attachControl 	$gdRpanel "top"        2	$nexUVLabel
				-attachForm	$gdRpanel "left"       0
				-attachForm  	$gdRpanel "right"      0
				-attachControl  $gdRpanel "bottom"     0	$drOptionPanel

				$gDRTopPane;
		}

		dR_updateCommandPanel;
	}

	global proc nexToggleStatusLine()
	{
		global string $gStatusLine;
		global string $gNexStatusIntegration;
		global string $gNexCollapse;

		string $renderGlobalsButton = ($gStatusLine + "|" + "renderGlobalsButton");
		string $inputFieldCollapse = ($gStatusLine + "|" + "inputFieldCollapse");

		int $isVisible = (!`iconTextCheckBox -q -m $gNexStatusIntegration`);
		if($isVisible) {
			iconTextCheckBox -edit -manage true $gNexStatusIntegration;
			formLayout -e 
				-ac $inputFieldCollapse left 2 $gNexStatusIntegration
				$gStatusLine;
			iconTextButton -edit -i1 openBar.xpm $gNexCollapse;
		} else {
			iconTextCheckBox -edit -manage false $gNexStatusIntegration;
			formLayout -e 
				-ac $inputFieldCollapse left 2 $gNexCollapse
				$gStatusLine;
			iconTextButton -edit -i1 closeBar.xpm $gNexCollapse;
		}
	}

	global proc nexUpdateStatusLineRender(int $renderIsVisible) {
		global string $gStatusLine;
		global string $gNexStatusIntegration;
		global string $gNexCollapse;

		int $isNexVisible = `iconTextCheckBox -q -m $gNexStatusIntegration`;
		if($isNexVisible) {
			formLayout -e 
				-ac inputFieldCollapse left 2 $gNexStatusIntegration
				$gStatusLine;

		} else {
			formLayout -e 
				-ac inputFieldCollapse left 2 $gNexCollapse
				$gStatusLine;
		}

		if($renderIsVisible) {
			formLayout -e 
				-ac $gNexCollapse left 2 renderGlobalsButton
				$gStatusLine;
		} else {
			formLayout -e 
				-ac $gNexCollapse left 2 renderCollapse
				$gStatusLine;
		}
	}

	global proc dR_init() {
		if(!`contextInfo -q -ex nexCtx1`) {
			nexManipContext nexCtx1;
		}

		global string $gStatusLine, $gWorkAreaForm, $gStatusLineForm;
		global string $gNexStatusIntegration;
		global string $gdRpanel;
		global int $dRCmdPanelWidth;
		global string $gdRpanel;
		global string $nexRefreshCmd;
		global string $dRModeBtns[];
		global string $gAttributeEditorForm;
		global string $gMainPane;
		global string $gdRPanes;
		global string $gDRTopPane;
		global string $gDRBottomPane;
		global int $dRCompBtnCount;
		global string $gdRCompBtns_Cmds[], $gdRCompBtns_Ann[], $gdRCompBtns_UpImages[], $gdRCompBtns_DownImages[], $gdRCompBtns_Names[], $gdRCompBtns[], $gdRCompBtns_DownImages[], $gdRCompBtns_MultiImages[];

		$dRCompBtnCount = 6;
		$dRCmdPanelWidth = 174;
		$nexRefreshCmd = "if(`nexOpt -q refreshActiveOnly`) { refresh -cv; } else { refresh; }";
		$gdRCompBtns_Names = { "multi", "object", "vertex", "edge", "face", "uv" };
		$gdRCompBtns_UpImages = { "nex/multiLabelOff.xpm", "nex/objectOff.xpm", "nex/vertexOff.xpm", "nex/edgeOff.xpm", "nex/polygonOff.xpm", "nex/uvOff.xpm" };
		$gdRCompBtns_DownImages = { "nex/multiLabelOn.xpm", "nex/objectOn.xpm", "nex/vertexOn.xpm", "nex/edgeOn.xpm", "nex/polygonOn.xpm", "nex/uvOn.xpm" };
		$gdRCompBtns_MultiImages = { "nex/multiLabelOn.xpm", "nex/objectOff.xpm", "nex/multiVertex.xpm", "nex/multiEdge.xpm", "nex/multiPolygon.xpm", "nex/uvOff.xpm" };
		$gdRCompBtns_Ann = { "Multi", "Object", "Vertex", "Edge", "Polygon", "UV" };
		$gdRCompBtns_Cmds = { "dR_toggleSelectionMode(\"multi\", 0, 1)", "dR_toggleSelectionMode(\"object\", 0, 1);", "if(dR_toggleSelectionMode(\"vertex\", `dR_isCtrlHeld`, 1)) { nexCtx -res vertex; }", "if(dR_toggleSelectionMode(\"edge\", `dR_isCtrlHeld`, 1)) { nexCtx -res edge; }", "if(dR_toggleSelectionMode(\"face\", `dR_isCtrlHeld`, 1)) { nexCtx -res face; }", "if(dR_toggleSelectionMode(\"uv\", `dR_isCtrlHeld`, 1)) { nexCtx -res uv; }" };

		global int $nexHandleX, $nexHandleY, $nexHandleZ, $nexHandleXY, $nexHandleYZ, $nexHandleXZ, $nexHandleXYZ;
		$nexHandleX=1;
		$nexHandleY=2;
		$nexHandleZ=3;
		$nexHandleXY=4;
		$nexHandleYZ=5;
		$nexHandleXZ=6;
		$nexHandleXYZ=7;

		if($gNexStatusIntegration == "") {
			setParent $gStatusLine;

			$gNexStatusIntegration = `iconTextCheckBox
				-p $gStatusLine
				-i1 "nex/nexStatusOff.xpm"
				-w 26 -h 26 
				-cc "nexOpt -s -e useNexOnSelModeChange #1; if(#1) { dR_nexTool; } else { dR_exitNex; } DRPrefsUpdate;"
				-annotation "Toggle NEX integration"`;

			global string $gNexCollapse;
			$gNexCollapse = `iconTextButton
				-p $gStatusLine
				-vis true -h 27 -w 9
				-annotation ("Show/hide the NEX icons") 
				-i1 "openBar.xpm"
				-c ("nexToggleStatusLine")`;

			string $renderGlobalsButton = ($gStatusLine + "|" + "renderGlobalsButton");
			string $inputFieldCollapse = ($gStatusLine + "|" + "inputFieldCollapse");

			formLayout -e 
				-attachForm    $gNexCollapse     	top     1
				-attachControl $gNexCollapse     	left    2 	$renderGlobalsButton
				-attachNone    $gNexCollapse     	bottom
				-attachNone    $gNexCollapse     	right
			
				-attachForm    $gNexStatusIntegration	top     1
				-attachControl $gNexStatusIntegration	left    2	$gNexCollapse
				-attachNone    $gNexStatusIntegration	bottom
				-attachNone    $gNexStatusIntegration	right

				-attachControl $inputFieldCollapse	left	2	$gNexStatusIntegration

				$gStatusLine;

			nexUpdateStatusLine();
		}


		dR_brushResizeKeysCB;

		modProc("/scripts/startup/statusLine.mel", "changeSelectMode", "if(`exists dR_selTypeChanged` && $mode == \"-object\") { dR_selTypeChanged; dR_exitNex; }\n", "start");
		modProc("/scripts/startup/statusLine.mel", "toggleRenderIcons", "if(`exists nexUpdateStatusLineRender`) { nexUpdateStatusLineRender($state); }\n", "end");
		modProc("/scripts/others/buildObjectMenuItemsNow.mel", "buildObjectMenuItemsNow", "if(`exists dR_buildRightMM` && dR_buildRightMM($parentName)) return; \n", "start");
		modProc("/scripts/others/buildToolOptionsMM.mel", "buildToolOptionsMM", "if(`exists dR_buildRightMM` && dR_buildRightMM($parent)) return; \n", "start");
		//modProc("/scripts/startup/numericalInputChangeCommand.mel", "numericalInputChangeCommand", "if(`currentCtx` == \"nexCtx1\" && `exists dR_numericalInputChangeCommand` && dR_numericalInputChangeCommand($mode)) return; \n", "start");
		modProc("/scripts/others/dagMenuProc.mel", "doMenuComponentSelection", "if(`exists dR_selTypeChanged`) { dR_selTypeChanged; }\n", "start");

		{
			int $alreadyAdded = 0;
			string $gotFormPath = "";
			string $gotBtnPath = "";
			string $layouts[] = `layout -q -ca $gStatusLineForm`;
			string $addRightOf = "ToggleChannelsLayers";

			if(size($layouts))
			{
				int $i;
				for($i=0 ; $i < size($layouts) ; $i++)
				{
					// Try to make as few assumptions about the configuration of
					// these layouts as possible -- some other tools like to add
					// things here too.
					string $childLayouts[];
					if(`layout -q -nch $layouts[$i]` != 0) {
						$childLayouts = `layout -q -ca $layouts[$i]`;
						int $j;
						for($j=0; $j < size($childLayouts); $j++)
						{
							string $fullPath = $gStatusLineForm + "|" + $layouts[$i] + "|" + $childLayouts[$j];
							if(objectTypeUI($fullPath) == "formLayout") {
								string $childControls[] = `layout -q -ca $fullPath`;
								int $controlIdx;
								for($controlIdx=0; $controlIdx < size($childControls); $controlIdx++)
								{
									if(objectTypeUI($childControls[$controlIdx]) == "iconTextButton") {
										if(`iconTextButton -q -c $childControls[$controlIdx]` == $addRightOf) {
											$gotFormPath = $fullPath;
											$gotBtnPath = $fullPath + "|" + $childControls[$controlIdx];
											break;
										}

										if(`iconTextButton -q -c $childControls[$controlIdx]` == "dR_ToggleCommandPanel") {
											$alreadyAdded = 1;
										}
									}
								}
							}

							if($gotBtnPath != "") {
								break;
							}
						}
					}

					if($gotBtnPath != "") {
						break;
					}
				}
			}

			if($gotFormPath != "" && !$alreadyAdded) {
				// Attach the new button
				setParent $gotFormPath;
				string $nexCmdPanelBtn;
				$nexCmdPanelBtn = `iconTextButton
					-image1 "nex/dRBox.xpm"
					-width 26 -height 26
					-annotation ("Show or hide the NEX Panel")
					-c ("dR_ToggleCommandPanel")`;

				formLayout -edit 
					-attachForm $nexCmdPanelBtn	top	1
					-attachControl $nexCmdPanelBtn	left	0 	$gotBtnPath
					-attachNone $nexCmdPanelBtn	bottom
					-attachNone $nexCmdPanelBtn	right
					$gotFormPath;
			}
		}

		{
			string $hotboxFileName = (`getenv "MAYA_LOCATION"` + "/scripts/startup/HotboxMenus.mel");

			// Now begin reading lines from the hotbox file
			$hotboxFile=`fopen $hotboxFileName "r"`;
			string $nextLine = `fgetline $hotboxFile`;
			string $prevLine = "";

			string $funcStr = "";
			int $foundStart = false;
			int $startReading = false;
			int $setMenuLine = false;

			while( size( $nextLine ) > 0) {
				if(gmatch($nextLine, "*global proc buildHotboxMenus()*")) {
					$startReading = true;
				}

				if(!$setMenuLine) {
					if(gmatch($nextLine, "*if ($filename != \"\") {*")) {
						$foundStart = 1;
					} else if($foundStart && gmatch($nextLine, "*} else {*")) {
						$funcStr += "menu -e -pmc (`menu -q -pmc $theMenu` + \" if(`exists drBuildCustomMenus`) { drBuildCustomMenus(); }\") $theMenu;\n";
						$setMenuLine = true;
					}
				}

				if($startReading) {
					$funcStr += $nextLine;
				}

				if($nextLine == "}\n") {
					$startReading = false;
				}

				$nextLine = `fgetline $hotboxFile`;
			}
			fclose $hotboxFile;
			eval $funcStr;
		}

		{
			string $uiCompFilename = (`getenv "MAYA_LOCATION"` + "/scripts/startup/UIComponents.mel");

			// Now begin reading lines from the hotbox file
			$uiCompFile=`fopen $uiCompFilename "r"`;
			string $nextLine = `fgetline $uiCompFile`;
			string $prevLine = "";

			string $funcStr = "";
			int $foundStart = false;
			int $startReading = false;
			int $setMenuLine = false;

			while( size( $nextLine ) > 0) {
				if(`match "^proc string getCurrentUIComponent\\(.*" $nextLine` != "") {
					$startReading = true;
					$funcStr += "global " + $nextLine;
				} else if($startReading) {
					if(gmatch($nextLine, "*break;*")) {
						$foundStart = 1;
					} else if($foundStart && gmatch($nextLine, "*return $current*")) {
						$funcStr += "if($current == \"NEX Panel\") { return \"\"; }\n";
						$setMenuLine = true;
					}

					$funcStr += $nextLine;

					if($nextLine == "}\n") {
						$startReading = false;
						break;
					}
				}

				$nextLine = `fgetline $uiCompFile`;
			}
			fclose $uiCompFile;
			eval $funcStr;
		}

		// Rebuild the menus
		DRRebuildMenus;

		dR_matchManipSize;
		dR_snapOptionCB;
		dR_manipSizeOptionCB;
		dR_selTransformKeysCB;
		dR_toolEditKeysCB;

		// Ready the right side panel
		global string $nexRightPanel;
		if($nexRightPanel == "") {
			string $attributeEditor = `substitute "|[^|]*|[^|]*$" $gAttributeEditorForm ""`;
			string $parentPanel = `formLayout -parent $gWorkAreaForm`;
			$nexRightPanel = createUIComponent("Maya Right Component Bar", "NEX Panel", $parentPanel);
			formLayout -e -width $dRCmdPanelWidth $nexRightPanel;
			formLayout -edit
				-attachForm     $parentPanel "top"    0
				-attachNone     $parentPanel "left"
				-attachForm     $parentPanel "bottom" 0
				-attachControl 	$parentPanel "right"  0 $attributeEditor

				-attachControl  $gMainPane   "right"  0 $parentPanel

				$gWorkAreaForm;	

			setParent $parentPanel;
				string $popMenu = `popupMenu`;
				popupMenu -e -pmc ("nexBuildDockMenu " + $popMenu) $popMenu;
		}

		// Ready the left side panel
		/*
		global string $nexLeftPanel;
		if($nexLeftPanel == "") {
			global string $gToolboxForm;

			string $toolbox = `substitute "|[^|]*|[^|]*$" $gToolboxForm ""`;
			string $parentPanel = `formLayout -parent $gWorkAreaForm`;
			$nexLeftPanel = createUIComponent("Maya Left Component Bar", "NEX Left Panel", $parentPanel);
			formLayout -e -width $dRCmdPanelWidth $nexLeftPanel;
			formLayout -edit
				-attachForm     $parentPanel "top"    0
				-attachControl  $parentPanel "left"   0 $toolbox
				-attachForm     $parentPanel "bottom" 0
				-attachNone 	$parentPanel "right"

				-attachControl  $gMainPane   "left"  0 $parentPanel

				$gWorkAreaForm;	

			setParent $parentPanel;
				string $popMenu = `popupMenu`;
				popupMenu -e -pmc ("nexBuildDockMenu " + $popMenu) $popMenu;
		}
		*/

		// Ready the float layout
		global string $nexFloatWin, $nexFloatForm;
		if($nexFloatForm == "") {
			$nexFloatWin = `window -retain -tlb true -t "NEX" nexFloatWindow`;
				string $pFloatForm = `formLayout -p $nexFloatWin`;
					$nexFloatForm = `formLayout -w $dRCmdPanelWidth`;

			formLayout -e 
				-attachForm $nexFloatForm "bottom" 0
				-attachForm $nexFloatForm "top" 0
				-attachNone $nexFloatForm "right"
				-attachForm $nexFloatForm "left" 0
				$pFloatForm;

			string $popMenu = `popupMenu`;
			popupMenu -e -pmc ("nexBuildDockMenu " + $popMenu) $popMenu;
			window -e -w ($dRCmdPanelWidth+8) -h 800 $nexFloatWin;
		}

		if(`nexOpt -q panelDock` == 2) {
			nexOpt -e panelDock 1;
		}

		nexDockPanel(`nexOpt -q panelDock`);
		setViewAxisVisibility true;
	}
}
