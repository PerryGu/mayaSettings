global proc shelf_PaulScripts () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "Load new script nodes" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -imageOverlayLabel "load" 
        -image "commandButton.xpm" 
        -image1 "commandButton.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "{\r\n\tif(basenameEx(`file -q -sceneName`) == \"Generick_rig_v1.5\")\r\n\t{\r\n\t\tstring $fileName = `workspace -expandName \"scenes/scriptNodes/zooLoadScriptNodes.mel\"`;\r\n\t\tloadFileIntoScriptNode(\"zooLoadScriptNodes\", $fileName, false);\r\n\t\tscriptNode -executeBefore \"zooLoadScriptNodes\";\r\n\t\tloadZooScriptNodes();\r\n\t\tscriptNode -executeBefore \"zooLoadScriptNodes\";\r\n\t}\r\n}\r\n" 
        -sourceType "mel" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "Check Dependencies" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -imageOverlayLabel "DEP" 
        -image "commandButton.xpm" 
        -image1 "commandButton.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "{\r\n\t\teval(\"source PMP_listProcNames;\");\r\n\t\teval(\"source PMP_listProcUses;\");\r\n\r\n\t\tglobal string $zooScriptsUsedByGenerick[];\r\n\r\n\t\tstring $dependencyChecks[];\r\n\r\n\t\tstring $scriptsDir = `internalVar -userAppDir` + \"scripts/\";\r\n\t\tstring $dirs[] = `zooGetRecursedSubDirs $scriptsDir`;\r\n\t\tstring $fileList[];\r\n\t\tstring $file;\r\n\t\t$dirs[size($dirs)] = $scriptsDir;\r\n\r\n\t\tfor($scriptsDir in $dirs)\r\n\t\t{\r\n\t\t\t$fileList = `getFileList -folder $scriptsDir -filespec \"*.mel\"`;\r\n\t\t\tfor($file in $fileList)\r\n\t\t\t{\r\n\t\t\t\t$dependencyChecks[size($dependencyChecks)] = $scriptsDir + $file;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstring $scriptsToCheck[];\r\n\r\n\t\tstring $scriptBaseName;\r\n\t\tstring $workspaceScenesDir = `workspace -q -rootDirectory` + `workspace -ote scene`;\r\n\t\tstring $scriptNodeDir = $workspaceScenesDir + \"/scriptNodes\";\r\n\t\tint $i;\r\n\r\n\t\tfor($i = 0; $i < size($zooScriptsUsedByGenerick); $i++)\r\n\t\t{\r\n\t\t\t$scriptBaseName = $zooScriptsUsedByGenerick[$i];\r\n\t\t\t$scriptsToCheck[$i] = $scriptNodeDir + \"/\" + $scriptBaseName + \"Node_new.mel\";\r\n\t\t}\r\n\r\n\t\tPMP_listProcUses($scriptsToCheck, $dependencyChecks, false);\r\n\r\n\t}\r\n" 
        -sourceType "mel" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "mel Script Lister" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -imageOverlayLabel "LIST" 
        -image "commandButton.xpm" 
        -image1 "commandButton.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/* This file downloaded from Highend3d.com\r''  \r''  Highend3d.com File Information:\r''  \r''    Script Name: MEL LISTER++\r''    Author:  \r''    Last Updated: Aug 11, 2007\r''    Update/Change this file at:\r''    http://Highend3d.com/maya/downloads/mel_scripts/utility_external/misc/4666.html\r''  \r''  Please do not alter any information above this line\r''  it is generated dynamically by Highend3d.com and will\r''  be changed automatically on any updates.\r*/\r/*\rMEL LISTER++ v1.5\r15-4-2007 :: 27-4-2007\r\rLAST MODIFIED:\r13 (Sun) May 2007  - 08:00:29  AM \r\r\rMEL LISTER++ was developed from the key idea of MEL LISTER by Jeremiah Grant. He has developed a tool to List all files present in a specific folder and one can view/edit/save those files. He added a feature to show description about the scripts (popping up first 6 lines of all script). I took that script and did various modifications. And added following features like...\r\r*Automatic Script Sourcing...\r*Automatic Script Executing (If the script is prepared to execute automatically on sourcing)...\r*Switching to the any script folders are made easy to navigate...\r*You can copy/paste the folder path and load them easily...\r*Easily switch to the your favorite script folders quickly(And even open them in explorer)...\r*Listing the Executable Procedures present inside the script files...\r*Navigate around the procedures easily by clicking on them (This makes it easy to see PROCEDURE arguments and return types)...\r*Allowing to easily execute all the procedures, (Just double click, If there is no arguments needed)...\r*Quick/Easily edit and save...\r*Commands and Scripts can be typed directly into the Editor window and it can be sourced or executed easily...\r*You can easily put your scripts to your Shelf...\r*Randomly, ICONs are chosen when you place your scripts to Shelf(Skipping those old gray n black MEL icon)...\r*Both Script AND execution command can be placed on to the Shelf...\r*You can drag drop various scripts and commands from your Shelf, And add random icon to them and place them back to the Shelf....\r*Find/Find Next and Find Previous supports searching...\r*External Editor can be invoked optionally for more flexible editing...\r*Help line provide support for your most actions...\r\r\rI thought of developing a script that will perform most operations like done in MEL STUDIO.\rAs MEL LISTER++ comes as a script and not an API, it can be used for any version of maya.\rI hope, I have achieved (VERY) few of MEL STUDIOS feature.\rSoon I will try to add more features to this.\r\rI humbly request your support!\r\r\r\r\r\r\r\rHow to Install MEL LISTER++ ...\r\r\r* Copy the entire script and paste it into the maya's script editor window......!\r* Then, Drag those entire script(Currently pasted) from the script editor to the Shelf.\r* Now Click the shelf ICON and enjoy.\r\r\rHow to Use MEL LISTER++ ...\r\r- Use \"...\" button to browse a folder and select a MEL file. You will be listed with all files in that directory.\r- Click select the file from the list this will load the file for editing.\r- Double click will SOURCE that file and load that file for editing.\r- List of Procedures it contains will be listed in a list box below.\r- Click them to move your editing cursor to procedure's declaration part. So that you can see ARGUMENTS and RETURN Type.\r- This will also copy the procedure name to separate text box so that you can add your arguments. You can even drag the command from here to your shelf.\r- Double click any of the procedure name from the list to execute them (If it doesn't need any arguments)\r\r- Right click the above address bar to have quick list of favorite folders to quick navigate.\r\r- Move your scripts or execution commands to shelf with random icon. if needed.\r\r- You can drag your commands and scripts from shelf to Mel lister++ editing area and send them back to shelf with random icon.\r\r- You can clear the editing area and start writing your own script.\r- Save them using \"Save as...\" and Source them using \"source script\" button.\r- If it has no procedure your script will be executed automatically.\r- else drag the procedure name to executer text box and click \"ExecuteProc\" button.\r\r\rKnown Bugs...\r*Attempting to load this (MEL LISTER++) script into the MEL LISTER++ might cause some errors.\r\rI will try to remove the above said bugs in my next version.\r\r\r\rUpdated features...\r\rUpdate v1.0.2 - 01.05.2007\r\r*UI size can be extended.\r*Dialog that pops out after Xternal editing is removed and now MEL LISTER PLUS automatically reloads the file.\r*Warning pops out for saving the file if its modified and didn't save.\r\rUpdate v1.5.0 - 13 (Sun) May 2007  - 06:48:28  AM \r\r*Browse and Navigate folders easily.\r*Source all files in a folder.\r*Copy a script file to your maya default script folder.\r*Copy all script file from current folder to maya default script folder.\r\r\r\r\rScript by\rKumaresan \rJeremiah Grant\r\rSpecial Thanks to\rBryan Ewert\rErick Miller\r\rDate\r15-4-2007 :: 27-4-2007\r\rLast Update: \r13 (Sun) May 2007  - 08:14:49  AM \r\rContact\rkaymatrix@gmail.com\r\rChennai - India\r*/\r\r\r\r\r\r\rproc MyFavMenu()\r{\r\t\r\t\t\t\t\r\tmenuItem -p MyFavMenuLst -l \"Maya Default...\" -c \"MyFavFolders(1)\";\r\tmenuItem -p MyFavMenuLst -d 1;\r\tmenuItem -p MyFavMenuLst -l \"Animation...\" -c \"MyFavFolders(2)\";\r\tmenuItem -p MyFavMenuLst -l \"Assorted...\" -c \"MyFavFolders(6)\";\r\tmenuItem -p MyFavMenuLst -l \"Character TD...\" -c \"MyFavFolders(3)\";\r\tmenuItem -p MyFavMenuLst -l \"Lighting...\" -c \"MyFavFolders(5)\";\r\tmenuItem -p MyFavMenuLst -l \"Rigging...\" -c \"MyFavFolders(4)\";\r\tmenuItem -p MyFavMenuLst -l \"Downloaded...\" -c \"MyFavFolders(7)\";\r\t\r}\r\r\r\rproc MyFavFolders(int $z)\r{\r\tglobal string $textList;\r\tstring $nxpath = \"\";\r\tstring $mscriptpath = `internalVar -usd`;\r\tstring $foruse = `substring $mscriptpath 1 (size($mscriptpath)-1)`;\r\t\r\t\r\t//MAKE SURE AT THE END YOU DONT PUT THE \"/\" SIGN.....\r\t\r\t\r\tif($z == 1)\r\t\t$nxpath = $foruse;\r\tif($z == 2)\r\t\t$nxpath = \"E:/GoodScripts/Animation\";\r\tif($z == 3)\r\t\t$nxpath = \"E:/GoodScripts/Character TD\";\r\tif($z == 4)\r\t\t$nxpath = \"E:/GoodScripts/Rigging\";\r\tif($z == 5)\r\t\t$nxpath = \"E:/GoodScripts/Lighting\";\r\tif($z == 6)\r\t\t$nxpath = \"E:/Maya Works/Maya Script Works/Other's Brain\";\r\tif($z == 7)\r\t\t$nxpath = \"C:/Documents and Settings/Antz/My Documents/Maya Scripts/GoodScripts/ForScriptys\";\r\t\r\t\r\t\r\t\r\t\r\ttextField -e -tx $nxpath mylbl;\r\tMyListFiles();\r\t\r}\r\r\r\r\r\r\r\r\r\rglobal string $speedsave = \"\";\rglobal string $melDirectory = \"\";\rglobal string $saveMelDir = \"\";\rglobal string $fillst = \"\";\rglobal int $windwidth;\r\r\r\rproc MyCopier(int $selr)\r{\r\rglobal string $fillst;\rglobal string $melDirectory;\rstring $dirPlusScript;\rstring $fils[];\rstring $selcx[];\r\r\tif ($selr == 0)\r\t{\r\t\t$selcx = `textScrollList -q -si scriptList`;\r\t\tif($selcx[0]!=\"\")\r\t\t{\r\t\t\tglobal string $melDirectory;\r\t\t\tstring $dirPlusScript;\r\t\t\t$dirPlusScript = (\"\\\"\" + $melDirectory+$selcx[0] + \"\\\"\");\r\t\t\tMyCopierSupport ($dirPlusScript);\r\t\t}\t\r\t}\r\telse if ($selr==1)\r\t{\r\r\t\tif($fillst!=\"\")\r\t\t{\r\t\ttokenize $fillst \"\\n\" $fils;\r\r\t\tstring $result = `confirmDialog -message \"This will copy all script files present in the current folder to your default script folder. This might take considerable time. Do you want to proceed?\" -title \"Confirm copying all scripts...\"\r\t\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\"\r\t\t-cancelButton \"No\" -dismissString \"No\"`;\r\t\t\t\t\r\t\tif($result==\"Yes\")\r\t\t\t{\r\r\t\t\t\tfor($i=0;$i<`size($fils)`;$i++)\r\t\t\t\t{\r\t\t\t\t\tif($fils[$i]!=\"\")\r\t\t\t\t\t{\r\t\t\t\t\tiprint ($fils[$i] + \" script contains some errors! Can't proceed!\");\r\t\t\t\t\t$dirPlusScript = (\"\\\"\" + $melDirectory+$fils[$i] + \"\\\"\");\r\t\t\t\t\tMyCopierSupport ($dirPlusScript);\r\t\t\t\t\t}\r\t\t\t\t}\r\t\t\t\tiprint(\"Script files copied.... Check the maya default folder!\");\r\t\t\t\r\t\t\t}\r\t\t}\r\r\r\t}\r\r}\r\rproc MyCopierSupport(string $source)\r{\r\tstring $filname = basename( $source, \"\" );\r\tstring $mscriptpath = `internalVar -usd`;\r\tstring $desti = `substring $mscriptpath 1 (size($mscriptpath)-1)`;\r\t$desti = \"\\\"\" + $desti + \"/\" + $filname;\r\r\t\teval(\"sysFile -copy \" + $desti + \" \" + $source);\r\t\tiprint(\"Copied... \" + $desti);\r\t\tprint(\"\\nCopied... \" + $desti + \"\\nFrom: \" + $source + \"\\n\");\r\r}\r\r\r\rproc MyimportFolder (string $path, string $useless)\r{\r\tglobal string $melDirectory;\r\r\tiprint(\"Listed script files from: \" + $path);\r\t\r\tif(`substring $path 3 3` == \"\\\\\")\r\t\t$path=fromNativePath($path);\r\r\tif(endsWith($path, \"/\")==0)\r\t\t$melDirectory = $path + \"/\";\r\t\r\t\ttextField -e -tx $melDirectory mylbl;\r}\r\r\rproc MyFolderBrowse()\r{\r  string $mPath = `internalVar -userScriptDir`;\r  $mPath = `fileDialog -dm \"*.mel\"`;\r  if($mPath!=\"\")\r  {\r\t  string $melDirectory = dirname ($mPath);\r  \t  MyimportFolder ($melDirectory, \"\");\r  \t  MyListFiles();\r  }\r}\r\rproc MyListFiles()\r{\r\t\r\tglobal string $textList;\t\t\r\tstring $nowpath = `textField -q -tx mylbl`;\r\t\r\tif($nowpath==\"\")\r\t{\r\t\terror \"Please! Enter the vaild folder path that contains MEL Scripts\";\r\t}\r\telse\r\t{\r\tMyimportFolder ($nowpath, \"\");\r\tMyrepopulateList $textList;\r\toptionVar -sv \"mellsplsLASTPATH\" $nowpath;\r\t\r\t}\r\t\r}\r\rproc MyrepopulateList(string $textList)\r{\r\tglobal string $melDirectory;\r\tglobal int $windwidth;\r\tglobal string $fillst;\r\r\tstring $melList[] = `getFileList -folder $melDirectory -filespec \"*.mel\"`;\r\tstring $melDirlststg=`system(\"DIR \\\"\" + $melDirectory  + \"\\\" /AD /B\")`;\r\tstring $melDirlst[];\r\ttokenize $melDirlststg \"\\n\" $melDirlst;\r\r\tstring $inMelList;\r\r\ttextField -e -tx $melDirectory mylbl;\r\ttext -e -l `size( $melList )` scriptCountUI;\r\t\r\t\r\r\ttextScrollList -e -ra $textList;\r\ttextScrollList -e -fn \"boldLabelFont\" -append (\"[ .. ]\") $textList;\r\r\tfor($inMelList in $melDirlst)\r\t{\r\t\tif($inMelList!=\"\")\r\t\t\ttextScrollList -e  -append (\"[\" + $inMelList + \"]\") $textList;\r\t}\r\r\ttextScrollList -e -append (\"[-----------------------------------]\") $textList;\r\t$fillst = \"\";\r\tfor($inMelList in $melList)\r\t{\r\t\ttextScrollList -e -append $inMelList $textList;\r\t\t$fillst = $fillst + \"\\n\" + $inMelList;\r\t}\r\tif($inMelList != \"\")\r\t\ttextScrollList -e -sii 1 $textList;\r\t\r\t\r\t//I donno why this happens.... Some times, While REPOPULATING or LOADING SCRIPT FOR EDIT  this our program window width xpands... To control that I put this here!\r\t\r\twindow -e -w $windwidth -h 558 melListWin;\r}\r\rproc MyxtrnlEdit()\r{\rglobal string $speedsave = \"\";\r\r\tif ($speedsave!=\"\")\r\t{\r\tsystem(\"\\\"\" + $speedsave + \"\\\"\");\r\teval(\"MymelEdit editField \" + \"`textScrollList -q -si scriptList`\");\r\tiprint(\"Script file reloaded!\");\r\t}\r\telse\r\t\tiprint(\"Select a file to edit!\");\r\t\r}\r\rproc MyFolderSystem()\r{\r\tstring $datx = `textField -q -tx mylbl`;\r\tif ($datx != \"\")\r\t{\r\t string $path = toNativePath( $datx );\r\t system (\"explorer \" + $path);\r\t}\r\t \r}\r\r\rproc iprint(string $mdata)\r{\r\tif ($mdata!=\"\")\r\t{\r\ttextField -e -tx $mdata myinfodisper;\r\t}\r\t\r}\r\rproc MyChangeMonitor()\r{\r\r\tstring $mtr = `text -q -l ttlsay`;\r\tint $ss = `size($mtr)`;\r\tstring $lstm = `substring $mtr $ss $ss`;\r\tif($lstm!=\"*\")\r\t\ttext -e -l ($mtr + \" *\") ttlsay;\r}\r\rproc MySafeWarn()\r{\r\r\tstring $mtr = `text -q -l ttlsay`;\r\tint $ss = `size($mtr)`;\r\tstring $lstm = `substring $mtr $ss $ss`;\r\tif($lstm==\"*\")\r\t{\r\t\r\t\t \tstring $result = `confirmDialog -title \"File didn't saved!\" -message \"You have edited this file. Do you want to save?\"\r \t\t-button \"Yes\" -button \"No\" -defaultButton \"Yes\"\r \t\t-cancelButton \"No\" -dismissString \"No\"`;\r\t\t\t\r\t\t\tif($result==\"Yes\")\r\t\t\t\tMyquicksave();\r\t\t\r\t}\r\r}\r\rproc MyAutoexecu()\r{\rglobal string $fillst;\rglobal string $melDirectory;\rstring $dirPlusScript;\rstring $fils[];\rint $ers=0;\rint $scrpt=0;\r\rif($fillst!=\"\")\r{\rtokenize $fillst \"\\n\" $fils;\r\rstring $result = `confirmDialog -message \"This will source all script files present in the current folder. This might take considerable time. Do you want to proceed?\" -title \"Confirm executing all scripts...\"\r-button \"Yes\" -button \"No\" -defaultButton \"Yes\"\r-cancelButton \"No\" -dismissString \"No\"`;\r\t\t\rif($result==\"Yes\")\r{\r\riprint(\"Script source started...\");\r\rfor($i=0;$i<`size($fils)`;$i++)\r{\r\tif($fils[$i]!=\"\")\r\t{\r\tiprint ($fils[$i] + \" script contains some errors! Can't proceed!\");\r\t$dirPlusScript = (\"\\\"\" + $melDirectory+$fils[$i] + \"\\\"\");\r\tstring $source = (\"source \"+$dirPlusScript);\r\tif (catch (eval ($source)))\r\t{\r\t\tprint(\"\\n\\n\\nError in the script... \" + ($i+1) + \"/\" + size($fils) + \" \" + $fils[$i] + \"\\n\\n\");\r\t\t$ers=$ers+1;\r\t}\r\telse\r\t{\r\t\tprint(\"\\nAutomated Sourcing... \" + ($i+1) + \"/\" + size($fils) + \" \" + $fils[$i] + \"\\n\\n\");\r\t\t$scrpt=$scrpt+1;\r\t}\r\tiprint(\"Scripts executing.... \" + ($i+1) + \"/\" + size($fils) + \" Errors: \" + $ers);\r\t}\r\r}\rprint(\"\\n\\n\\nTotal scripts: \" + size($fils) + \" - Executed scripts: \" + $scrpt + \" - Error scripts: \" + $ers + \" - Check script editor!\\n\\n\\n\");\riprint(\"Total scripts: \" + size($fils) + \" - Executed scripts: \" + $scrpt + \" - Error scripts: \" + $ers + \" - Check script editor!\");\rrehash;\r\r\r\t\t}\r\r\t}\r\r}\r\rglobal proc mlPlus()\r{\r\tglobal string $melDirectory;\r\tglobal string $textList;\r\t\r\tglobal int $windwidth;\r\t$windwidth = 695;\r\tif (`window -ex melListWin`)\r\t\tdeleteUI melListWin;\r\r\tstring $melList[] = `getFileList -folder $melDirectory -filespec \"*.mel\"`;\r\tstring $inMelList;\r \r\twindow -title \"MEL LISTER++ v1.5\" -s 1 -rtf 1 -mnb 1 -mxb 0 -w 695 -h 530 -menuBar 0 melListWin;\r\t\r\tcolumnLayout -adj 1;\r\t\trowColumnLayout -nc 3 -columnWidth 1 175 -columnWidth 2 10 -columnWidth 3 500 MBAR;\r\r\t\t\ttext -l \"\";\r\t\t\tseparator -style \"none\";\r\t\t\ttext -l \"\";\r\r\t\t\tbutton -label \"Load Scripts \" -c \"MyListFiles()\";\r\t\t\ttext -l \"\";\r\t\t\trowColumnLayout -nc 3 -columnWidth 1 425 -columnWidth 2 35 -columnWidth 3 35 MPaddressbar; \r\t\t\t\ttextField -tx \"\" mylbl;\r\t\t\t\tbutton -label \"...\" -c \"MyFolderBrowse()\";\r\t\t\t\tbutton -label \"Sys\" -c \"MyFolderSystem()\";\r\t\t\tsetParent..;\r\r\t\t\tpopupMenu -p mylbl -b 3 MyFavMenuLst;\r\t\t\tMyFavMenu;\r\t\t\t\t\t\t\t\r\t\t\ttext -l \"\";\r\t\t\tseparator -style \"none\";\r\t\t\ttext -l \"\";\r\t\r\t\t\trowColumnLayout -nc 2 -columnWidth 1 75 -columnWidth 2 100; \r\t\t\t\ttext \"Mel Scripts\";\r\t\t\t\tbutton -label \"Source All\" -c \"MyAutoexecu()\";\r\t\t\tsetParent..;\r\r\t\t\tseparator -style \"none\";\r\t\t\ttext -l \"Script\" ttlsay;\r\r\t\t\tstring $textList = `textScrollList -w 275 -numberOfRows 25 -ams 0 -aas 1 -shi 4 -sc (\"MymelEdit editField \" + \"`textScrollList -q -si scriptList`\") -dcc (\"MyScriptExecuter\") scriptList`;\r\t\t\tseparator -style \"none\";\r\t\t\tstring $editField = `scrollField -wordWrap 1 -kpc \"MyChangeMonitor\" -bgc 0.0 1.0 0.5 -w 500 -h 200 editField`;\r\t\t\t\r\t\t\tpopupMenu -p scriptList -b 3;\r\t\t\t\tmenuItem -l \"Load and Source selected script...\" -c (\"MyScriptExecuter\");\r\t\t\t\tmenuItem -l \"Copy selected script to Maya scripts folder...\" -c (\"MyCopier(0)\");\r\t\t\t\tmenuItem -l \"Copy all scripts to Maya scripts folder...\" -c (\"MyCopier(1)\");\r\t\t\t\r\t\t\t\r\t\t\trowColumnLayout -nc 2 -columnWidth 1 140 -columnWidth 2 35; \r\t\t\t\ttext -al \"left\" -l \"Number of scripts................... \";\r\t\t\t\ttext -label \"0\" scriptCountUI;\r\t\t\t\r\t\t\tsetParent..;\t\r\t\t\tseparator -style \"none\";\r\t\t\ttextField -ed 0 myinfodisper;\r\t\t\r\t\tsetParent..;\r\t\tsetParent..;\r\t\t\r\tcolumnLayout -adj 1;\r\trowColumnLayout -nc 6 -columnWidth 1 175 -columnWidth 2 155 -columnWidth 3 100 -columnWidth 4 10 -columnWidth 5 90 -columnWidth 6 200 DOWNTOOLS;\r\t\r\ttext -l \"Available Procedure\" Myavlproc;\r\ttext -l \"\";\r\ttext -l \"\";\r\ttext -l \"\";\r\ttext -l \"\";\r\tseparator -style \"none\";\r\r\ttextScrollList -w 275 -numberOfRows 5 -ams 0 -aas 1 -shi 4 -sc \"MyProcExecuter (`textScrollList -q -si exelist`,0)\" -dcc \"MyProcExecuter (`textScrollList -q -si exelist`,1)\" exelist;\r\r\t\r\tcolumnLayout -adj 1;\r\t\ttextField -tx \"\" -w 5 exrd;\r\t\tbutton -label \"ProcName to Shelve\" -c (\"MyToShelSetup(1)\");\r\t\tbutton -label \"Script to Shelve\" -c (\"MyToShelSetup(2)\");\r\t\tbutton -label \"Both to Shelve\" -c (\"MyToShelSetup(3)\");\r\t\tsetParent..;\r\t\t\r\tcolumnLayout -adj 1;\r\t\tbutton -label \"Execute Proc\" -c (\"MyQuickEXR\");\r\t\ttext -l \"\";\r\t\ttext -l \"\";\r\t\ttext -l \"\";\r\t\tsetParent..;\r\t\t\r\ttext -l \"\";\t\r\t\r\tcolumnLayout -adj 1;\r\t\t\r\t\t//text -l \"\";\r\t\tbutton -label \"Find\" -c (\"MyFinderx()\");\r\t\tbutton -label \"FindNext\" -c (\"MyFindNext()\");\r\t\tbutton -label \"FindPrev\" -c (\"MyFindPrev()\");\t\r\t\trowColumnLayout -nc 2 -columnWidth 1 45 -columnWidth 2 45 ; \r\t\t\tbutton -label \"<<<<\" -c (\"MyUIExpand(0)\");\r\t\t\tbutton -label \">>>>\" -c (\"MyUIExpand(1)\");\r\t\t\tsetParent..;\r\t\tsetParent..;\r\t\r\r\t\r\trowColumnLayout -nc 2 -columnWidth 1 75 -columnWidth 2 75 ; \r\r\t\r\t\tbutton -label \"Source Script\" -c (\"MyScriptExecuter\");\r\t\tbutton -label \"Quick save\" -c \"Myquicksave\";\r\t\tbutton -label \"Save as...\" -c (\"MysaveScript \" + $editField);\r\t\tbutton -label \"Xternal Edit\" -c (\"MyxtrnlEdit\");\r\t\tbutton -label \"Clear\" -c (\"scrollField -e -cl \"+$editField);\t\t\t\t\r\t\tbutton -label \"Help\" -c (\"Mymelhelper\");\r\t\tbutton -label \"About\" -c (\"Mymellisterabout\");\r\t\tbutton -label \"Close\" -c \"deleteUI melListWin\";\r\t\t\r\r//This is to store the position number of all the proc that found in selected script file... \rtextScrollList -vis 0 -w 1 -h 1 -numberOfRows 5 posilist;\t\r//This is to store the position for find next setup... \rtextScrollList -vis 0 -w 1 -h 1 -numberOfRows 5 fndnxt;\t\r\r//LAST FOLDER\rif (`optionVar -exists \"mellsplsLASTPATH\"`)\r{\r\t$nowpath = `optionVar -q \"mellsplsLASTPATH\"`;\r\ttextField -e -tx $nowpath mylbl;\r\tMyListFiles();\r}\relse\r{\r\ttextField -e -tx \"\" mylbl;\r}\r\riprint(\"Welcome to MEL LISTER++. Browse for a folder containing MEL scripts. Use above buttons to browse.\");\r\r\twindow -e -w $windwidth -h 558 melListWin;\r\tshowWindow melListWin;\r}\r\r\rproc MyFindNext()\r{\r\t\r\tint $postogo[];\r\tstring $positionx[];\r\tint $ttlfnd = `textScrollList -q -ni fndnxt`;\r\t\r\tif ($ttlfnd != 0)\r\t{\r\t\t\r\t\t\t$postogo = `textScrollList -q -sii fndnxt`;\r\t\t\t\r\t\t\tif ($postogo[0] == $ttlfnd)\r\t\t\t\ttextScrollList -e -sii 1 fndnxt;\r\t\t\telse\r\t\t\t\ttextScrollList -e -sii ($postogo[0]+1) fndnxt;\t\r\r\t\t\t$positionx = `textScrollList -q -si fndnxt`;\r\t\t\teval(\"scrollField -e -ip \" + $positionx[0] + \" editField\");\r\t\t\teval(\"scrollField -e -it \\\"\\\" editField\");\r\t\t\tsetFocus editField;\r\r\t\t\t\r\t\t\tif ($postogo[0] == $ttlfnd)\r\t\t\t\t$toshow = 1;\r\t\t\telse\r\t\t\t\t$toshow = $postogo[0]+1;\r\t\t\t\r\t\t\t\r\t\tiprint(\"Found : \" + $ttlfnd + \" match. You watching the match: \" + $toshow);\r\r\t}\r\telse\r\t\t\r\t\tiprint(\"Error: Search for text using --- Find --- function first. Then use find next!\");\r\t\r}\r\r\rproc MyFindPrev()\r{\r\t\r\tint $postogo[];\r\tstring $positionx[];\r\tint $ttlfnd = `textScrollList -q -ni fndnxt`;\r\t$postogo = `textScrollList -q -sii fndnxt`;\r\t\r\tif ($ttlfnd != 0)\r\t{\r\t\tif ($postogo[0] != 1)\r\t\t\t\ttextScrollList -e -sii ($postogo[0]-1) fndnxt;\t\r\t\telse\r\t\t\t\ttextScrollList -e -sii $ttlfnd fndnxt;\r\t\t\r\t\t$positionx = `textScrollList -q -si fndnxt`;\r\t\teval(\"scrollField -e -ip \" + $positionx[0] + \" editField\");\r\t\teval(\"scrollField -e -it \\\"\\\" editField\");\r\t\tsetFocus editField;\t\t\t\r\r\t\t\tif ($postogo[0] == 1)\r\t\t\t\t$toshow = $ttlfnd;\r\t\t\telse\r\t\t\t\t$toshow = $postogo[0]-1;\r\t\t\t\r\t\tiprint(\"Found : \" + $ttlfnd + \" match. You watching the match: \" + $toshow);\r\r\t}\r\telse\r\t\tiprint(\"Error: Search for text using --- Find --- function first. Then use find next!\");\r\t\r}\r\r\r\rproc MyFindTest( string $editFieldUI, string $searchdata )\r{\r    string $buffer[];\r    int $stringSize = 0;\r    string $text = `scrollField -q -tx $editFieldUI`;\r\ttextScrollList -e -ra fndnxt;\t\r\t\r    // Break the text into lines\r    tokenize $text \"\\n\" $buffer;\r\r    // For each line...\r    for( $i = 0; $i < `size($buffer)`; $i++ )\r    {\r        // The end of the line equals the sum of the size of all the strings before it\r        $stringSize += `size $buffer[$i]`;\r\r        if (`gmatch $buffer[$i] $searchdata`)\r        {\r            // Place the cursor at the end of the matching line\r            scrollField -e -ip $stringSize $editFieldUI;\r            scrollField -e -it \"\" $editFieldUI;\r            setFocus $editFieldUI;\r\t\t\ttextScrollList -e -a $stringSize fndnxt;\r\t\t\ttextScrollList -e -sii 1 fndnxt;\r            // Break out of the loop\r            //break;\r        }\r    }\r\t\r\tint $ttls = `textScrollList -q -ni fndnxt`;\r\t\r\tif ($ttls != 0)\r\t{\r\ttextScrollList -e -sii $ttls fndnxt;\r\tiprint(\"Found : \" + $ttls + \" match\");\r\tMyFindNext;\r\t}\r\telse\r\t{\r\t\tiprint(\"No matching text found in this script!\");\r\t}\r\t\r\t\r}\r\rproc MyFinderx()\r{\r\r\tstring $tempdata = `scrollField -q -tx editField`;\r\tstring $searchdata;\r\tstring $result = `promptDialog -title \"Search the script... \"\t-message \"Text to find: \" -button \"Search\" -button \"Cancel\" \t\t-defaultButton \"Search\" -cancelButton \"Cancel\"\t-dismissString \"Cancel\"`;\t\r\t \tif ($result == \"Search\")\r\t\t{\r \t\t$searchdata = \"*\" + `promptDialog -query -text` + \"*\";\r\t\tMyFindTest \"editField\" $searchdata;\t\r\t\t}\r}\r\r\rproc MyProcExecuter(string $txt[],int $i)\r{\r\tint $postogo[];\r\tstring $positionx[];\r\t\r\tif($i == 0)\r\t{\r\t\ttextField -e -tx ($txt[0] + \";\") exrd;\r\t\t\r\t\t//To move the Insertion Pointer to the position...\r\t\t$postogo = `textScrollList -q -sii exelist`;\r\t\ttextScrollList -e -sii $postogo[0] posilist;\r\t\t$positionx = `textScrollList -q -si posilist`;\r\t\t\r\t\teval(\"scrollField -e -ip \" + $positionx[0] + \" editField\");\r\t\teval(\"scrollField -e -it \\\"\\\" editField\");\r\t\tsetFocus editField;\r\r\t}\r\telse\r\t{\r\t\ttextField -e -tx ($txt[0] + \";\") exrd;\r\t\teval($txt[0]);\r\t\tiprint \"Procedure executed successfully!\";\r\t}\r}\r\rproc MyScriptExecuter()\r{\rstring $txt = `scrollField -q -tx editField`;\r\rif($txt!=\"\")\r{\riprint \"Script present in the script editor may contains some errors or it needs some support scripts!\";\reval($txt);\riprint \"Script executed successfully!\";\r}\relse\r{\riprint \"Select a script file or type some commands to execute or source!\";\r}\r\r}\r\rproc MyQuickEXR()\r{\rstring $txt = `textField -q -tx exrd`;\r\rif($txt!=\"\")\r{\riprint($txt);\reval($txt);\riprint \"Procedure executed successfully!\";\r}\t\r}\r\rproc MyToShelSetup(int $how)\r{\r\tglobal string $gShelfTopLevel;\r\t\r\r       string $XPM[];\r       clear $XPM;\r\t   string $iconname;\r\r       // Gets all bitmap directories. Add more directories to the end of the $folders array as shown below\r       string $folders[] = `xbmLangPathList`;\r//     $folders[`size($folders)`] = \"c:/my_extra_icons/\";\r\t\r       for( $fld in $folders )\r       {\r\t      // Lists all XPM files in above directory\r            string $buffer[] = `getFileList -fld ($fld + \"/\") -fs \"*.xpm\"`;\r\t      $XPM = stringArrayCatenate( $XPM, $buffer );\r\t      clear $buffer;\r       }\r\r       // Get the size of the array\r       $xpmCount = `size( $XPM )`;\r\r\t   \r\t   if($xpmCount==0)\r\t   {\r\t\t   iprint(\"No icons found in your maya icon folders!\");\r\t\t   $iconname = \"menuiconview.xpm\";\r\t   }\r\t   else\r\t   {\r\t\r\t\t// Random number based off the size of the array\r       int $nowxpm = int(`rand $xpmCount`);\r\t   $iconname = $XPM[$nowxpm];\r\t   }\r\t   \r\r\t\r\tstring $cmd = \"\";\r\tstring $seta = \"\";\r\tstring $setb = \"\";\r\t\r\t\tif ($how == 3)\r\t\t{\r\r\t\t\t\t$seta = `textField -q -tx editField`;\r\t\t\t\t$setb = `textField -q -tx exrd`;\r\t\t\t\t$cmd = ($seta + \"\\n\" + $setb);\r\t\t\t\t\r\t\t\t\tif (($seta!=\"\") && ($seta!=\"\"))\r\t\t\t\tif (`tabLayout -exists $gShelfTopLevel`)\r\t\t\t\t{\r\t\t\t\t\tshelfButton\r\t\t\t\t\t-parent ($gShelfTopLevel + \"|\" + `tabLayout -q -st $gShelfTopLevel`)\r\t\t\t\t\t-command $cmd\r\t\t\t\t\t-image1 $iconname\r\t\t\t\t\t-annotation $setb;\r\t\t\t\t\tiprint \"Added to the current Shelf successfully!\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tiprint \"You need a shelf!\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tiprint(\"Script and Proc Name section most be filled!\");\r\t\t\t\t}\r\t\t\t\r\t\t}\r\t\telse if($how == 2)\r\t\t{\t\r\t\t\t\r\t\t\t\t$cmd = `textField -q -tx editField`;\r\t\t\t\t\r\t\t\t\tif ($cmd!=\"\")\r\t\t\t\tif (`tabLayout -exists $gShelfTopLevel`)\r\t\t\t\t{\r\t\t\t\t\tshelfButton\r\t\t\t\t\t-parent ($gShelfTopLevel + \"|\" + `tabLayout -q -st $gShelfTopLevel`)\r\t\t\t\t\t-command $cmd\r\t\t\t\t\t-image1 $iconname\r\t\t\t\t\t-annotation $cmd;\r\t\t\t\t\tiprint \"Added to the current Shelf successfully!\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tiprint \"You need a shelf!\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tiprint(\"Input some script to send them shelf!\");\r\t\t\t\t}\r\t\t}\r\t\telse if($how == 1)\r\t\t{\t\r\t\t\t\t\t\t\r\t\t\t$cmd = `textField -q -tx exrd`;\r\t\t\tif($cmd!=\"\")\r\t\t\t{\r\t\t\tif (`tabLayout -exists $gShelfTopLevel`)\r\t\t\t\t{\r\t\t\t\t\tshelfButton\r\t\t\t\t\t-parent ($gShelfTopLevel + \"|\" + `tabLayout -q -st $gShelfTopLevel`)\r\t\t\t\t\t-command $cmd\r\t\t\t\t\t-image1 $iconname\r\t\t\t\t\t-annotation $cmd;\r\t\t\t\t\tiprint \"Added to the current Shelf successfully!\";\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\tiprint \"You need a shelf!\";\r\t\t\t\t}\r\t\t\t}\r\t\t\telse\r\t\t\t{\r\t\t\t\tiprint(\"Procedure name most not be empty!\");\r\t\t\t}\r\t\t}\r\t\t\r\t\t\r}\r\r/*\rproc MymelLoad(string $script[])\r{\t\r\tif($script[0]!=\"\")\r\t{\r\tglobal string $melDirectory;\r\tstring $dirPlusScript;\r\tiprint \"Above script contains errors! Check your Script Editor.\";\r\t$dirPlusScript = (\"\\\"\" + $melDirectory+$script[0] + \"\\\"\");\r\tstring $source = (\"source \"+$dirPlusScript);\r\teval ($source);\r\trehash;\r\tiprint(\"Script file sourced successfully!\");\r\t}\r}\r\r*/\r\rproc MymelEdit(string $editField, string $script[])\r{\r\tglobal int $windwidth;\r\r\t\r\t\t\r\tif (startsWith($script[0], \"[\"))\r\t{\r\r\t\tstring $strDir  = `substring $script[0] 2 (size($script[0])-1)`;\r\t\t\r\t\tif ($strDir==\"-----------------------------------\")\r\t\t{\r\t\tiprint(\"oh... its just a seperator.. seperates folder and files!\");\r\t\t}\r\t\telse if ($strDir==\" .. \")\r\t\t{\r\t\tstring $nowpath = `textField -q -tx mylbl`;\r\t\tstring $ee = basename($nowpath,\"\");\r\t        string $result = substituteAllString($nowpath , (\"/\" + $ee + \"/\"), \"\");\r\t\ttextField -e -tx $result mylbl;\r\t\tMyListFiles();\r\r\t\t}\r\t\telse if ($strDir==\"\")\r\t\t{\r\t\tiprint(\"hmmm...Empty!\");\r\t\t}\r\t\telse\r\t\t{\r\r\t\tstring $nowpath = `textField -q -tx mylbl`;\r\t\t$nowpath = $nowpath + $strDir;\r\t\ttextField -e -tx $nowpath mylbl;\r\t\tMyListFiles();\r\r\r\t\t}\r\t\t\r\t}\r\telse\r\t{\r\r\r\tif ($script[0]!=\"melPlus.mel\")\r\t{\r\r\tMySafeWarn();\r\r\t\r\tif($script[0]!=\"\")\r\t{\r\tglobal string $melDirectory;\r\tglobal string $speedsave;\r\tstring $dirPlusScript, $nextLine, $fullEdit, $inFile;\r\tstring $file[];\r\tint $count = 0;\r\tint $posit = 0;\r\t\r\ttextScrollList -e -ra exelist;\r\ttextScrollList -e -ra posilist;\r\ttextField -e -tx \"\" exrd;\r\t\r\t$dirPlusScript = $melDirectory+$script[0];\r\t\r\ttext -e -ann (\"Script: \" + $dirPlusScript) -l (\"Script: \" + $dirPlusScript) ttlsay;\r\t$speedsave = $dirPlusScript;\r\r\t\r\t$fileId=`fopen $dirPlusScript \"r\"`;\r\t$nextLine = `fgetline $fileId`;\r\t\r\r\twhile(!`feof $fileId`)\r\t{\r\t\t$file[$count] = $nextLine;\r\t\t$nextLine = `fgetline $fileId`;\r\t\t$count++;\r\t}\r\t\r\t$file[$count] = $nextLine;\r\t$nextLine = `fgetline $fileId`;\r\r\t$count++;\r\t\r\tfclose $fileId;\r\r\tfor($inFile in $file)\r\t{\r\t\t$fullEdit += $inFile;\r\t\t$nextLine = $inFile;\r\t\t$posit = size($fullEdit);\r\t\tMyProcLister ($nextLine, $posit);\r\t}\r\t\r\tscrollField -e -cl $editField;\r\tscrollField -e -it $fullEdit $editField;\r\t}\r\r\tiprint(\"Script file loaded for editing!\");\r\r\t\t//I donno why this happens.... Some times, While REPOPULATING or LOADING SCRIPT FOR EDIT  this our program window width xpands... To control that I put this here!\r\twindow -e -w $windwidth -h 558 melListWin;\r\t\r\t}\r\telse\r\t{\r\t\tiprint(\"Please! Don't try to load -melPlus.mel- script file. Try with other files.\");\r\t}\r\r       }\r}\r\rproc MyUIExpand(int $step)\r{\r\tglobal int $windwidth;\r\tint $raisefactor = 100;\r\t\r\tif($step==1)\r\t{\r\t\t\t\r\t\t\tint $tmp = `rowColumnLayout -q -w MBAR`;\r\t\t\trowColumnLayout -e -w ($tmp+$raisefactor) MBAR;\r\t\t\t$tmp = ($tmp-202)+$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 3 $tmp MBAR;\r\t\t\t\r\t\t\t$tmp = `rowColumnLayout -q -w MPaddressbar`;\r\t\t\trowColumnLayout -e -w ($tmp+$raisefactor) MPaddressbar;\r\t\t\t$tmp = ($tmp-75)+$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 1 $tmp MPaddressbar;\r\t\t\t\r\t\t\t$tmp = `rowColumnLayout -q -w DOWNTOOLS`;\r\t\t\trowColumnLayout -e -w ($tmp+$raisefactor) DOWNTOOLS;\r\t\t\t$tmp = ($tmp-697)+$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 4 $tmp DOWNTOOLS;\r\t\t\r\t\t\t$windwidth=$windwidth+$raisefactor;\r\t\t\twindow -e -w $windwidth -h 558 melListWin;\r\t\t\t\r\t}\r\telse if($step==0)\r\t{\r\r\t\t\tint $tmp = `rowColumnLayout -q -w MBAR`;\r\t\t\trowColumnLayout -e -w ($tmp-$raisefactor) MBAR;\r\t\t\t$tmp = ($tmp-202)-$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 3 $tmp MBAR;\r\t\t\t\r\t\t\t$tmp = `rowColumnLayout -q -w MPaddressbar`;\r\t\t\trowColumnLayout -e -w ($tmp-$raisefactor) MPaddressbar;\r\t\t\t$tmp = ($tmp-75)-$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 1 $tmp MPaddressbar;\r\t\t\t\r\t\t\t$tmp = `rowColumnLayout -q -w DOWNTOOLS`;\r\t\t\trowColumnLayout -e -w ($tmp-$raisefactor) DOWNTOOLS;\r\t\t\t$tmp = ($tmp-697)-$raisefactor;\r\t\t\trowColumnLayout -e -columnWidth 4 $tmp DOWNTOOLS;\r\t\t\r\t\t\t$windwidth=$windwidth-$raisefactor;\r\t\t\twindow -e -w $windwidth -h 558 melListWin;\r\r\t\t\r\t}\r\t\r}\r\rproc MyProcLister(string $nextLine, int $posit)\r{\r\tstring $tl[];\r\t\r\t\r\t\tif (gmatch ($nextLine, \"* proc *\") == 1)\r\t\t{\r\t\t\t\t\t\t\r\t\t\ttokenizeList($nextLine, $tl);\t\r\t\t\tstring $exr;\r\t\t\tif(($tl[2]==\"int\") || ($tl[2]==\"string\") || ($tl[2]==\"float\") || ($tl[2]==\"vector\") || ($tl[2]==\"int[]\") || ($tl[2]==\"string[]\") || ($tl[2]==\"vector[]\") || ($tl[2]==\"float[]\"))\r\t\t\t\t$exr=$tl[3];\r\t\t\telse\r\t\t\t\t$exr=$tl[2];\r\r\t\t\tstring $tt = $exr;\r\t\t\t\r\t\t\twhile (\tendsWith($tt, \"(\") || endsWith($tt, \")\") || endsWith($tt, \"{\") || endsWith($tt, \"}\"))\r\t\t\t\t$tt = eval(\"substring \\\"\" + $tt + \"\\\" 1 \" + (size($tt)-1));\t\r\t\t\t\r\t\t\twhile (gmatch ($tt, \"*(*\"))\r\t\t\t\t$tt = eval(\"substring \\\"\" + $tt + \"\\\" 1 \" + (size($tt)-1));\t\r\t\t\t\r\t\t\ttextScrollList -e -a $tt exelist;\r\t\t\ttextScrollList -e -a $posit posilist;\r\t\t\t\r\t\t}\r\t\telse if (startsWith($nextLine, \"proc\") == 1)\r\t\t{\r\t\t\t\t\r\t\t\ttokenizeList($nextLine, $tl);\t\r\t\t\tstring $exr;\r\t\t\tif(($tl[1]==\"int\") || ($tl[1]==\"string\") || ($tl[1]==\"float\") || ($tl[1]==\"vector\") || ($tl[1]==\"int[]\") || ($tl[1]==\"string[]\") || ($tl[1]==\"vector[]\") || ($tl[1]==\"float[]\"))\r\t\t\t\t$exr=$tl[2];\r\t\t\telse\r\t\t\t\t$exr=$tl[1];\r\r\t\t\tstring $tt = $exr;\r\t\t\t\r\t\t\twhile (\tendsWith($tt, \"(\") || endsWith($tt, \")\") || endsWith($tt, \"{\") || endsWith($tt, \"}\"))\r\t\t\t\t$tt = eval(\"substring \\\"\" + $tt + \"\\\" 1 \" + (size($tt)-1));\t\r\t\t\t\r\t\t\twhile (gmatch ($tt, \"*(*\"))\r\t\t\t\t$tt = eval(\"substring \\\"\" + $tt + \"\\\" 1 \" + (size($tt)-1));\t\r\t\t\t\r\t\t\ttextScrollList -e -a $tt exelist;\r\t\t\ttextScrollList -e -a $posit posilist;\r\t\t\t\r\t\t}\r\t\t\r\t\t\r\t\t\tint $ttlx = `textScrollList -q -ni exelist`;\r\t\t\ttext -e -l (\"Available Procedure...............\" + $ttlx) Myavlproc;\r\t\t\r\t\t\r\t\r}\r\rproc MysaveScript(string $script)\r{\r\r\tstring $newScript = `scrollField -q -tx $script`;\r\r\tif( $newScript == \"\" )\r\t{\r\t\terror \"There is nothing to save.\";\r\t}\r\telse\r\t{\r\t\tfileBrowserDialog -m 1 -fc \"MysaveDir\" -ft \"mel\" -an \"Save As\" -om \"Reference\";\r\t\tglobal string $saveMelDir;\r\t\tstring $object;\r\t\tint $fileOut;\r\r \t\t$fileOut=`fopen $saveMelDir \"w\"`;\r\r\t\tif ($fileOut == 0)\r\t\t{\r\t\t\terror \"Location Invalid: Unable to write file\";\r\t\t}\r\r  \t\tfprint $fileOut $newScript;\r\t \tfclose $fileOut;\r\r\t\tiprint (\"Save to ... \" + $saveMelDir);\r\t\t\r\tstring $mtr = `text -q -l ttlsay`;\r\tint $ss = `size($mtr)`;\r\tstring $lstm = `substring $mtr $ss $ss`;\r\tif($lstm==\"*\")\r\t{\r\t\t$lstm = `substring $mtr 1 ($ss-1)`;\r\t\ttext -e -l $lstm ttlsay;\r\t}\r\t\t\r\t}\r}\r\r\rproc Myquicksave()\r{\r\tglobal string $speedsave;\r\tstring $newScript = `scrollField -q -tx editField`;\r\r\tif( $newScript == \"\" )\r\t{\r\t\tiprint \"There is nothing to save.\";\r\t}\r\telse\r\t{\r\r\t\tif ($speedsave!=\"\")\r\t\t{\r\t\tstring $object;\r\t\tint $fileOut;\r\r \t\t$fileOut=`fopen $speedsave \"w\"`;\r\r\t\tif ($fileOut == 0)\r\t\t{\r\t\t\terror \"Location Invalid: Unable to write file\";\r\t\t}\r\r  \t\tfprint $fileOut $newScript;\r\t \tfclose $fileOut;\r\r\t\tiprint (\"Save to .... \" + $speedsave);\r\t\t\r\tstring $mtr = `text -q -l ttlsay`;\r\tint $ss = `size($mtr)`;\r\tstring $lstm = `substring $mtr $ss $ss`;\r\tif($lstm==\"*\")\r\t{\r\t\t$lstm = `substring $mtr 1 ($ss-1)`;\r\t\ttext -e -l $lstm ttlsay;\r\t}\r\t\t\r\t\t\r\t\t\r\t}\r}\r\r}\r\rproc MysaveDir( string $filename, string $fileType )\r{\r\tglobal string $saveMelDir;\r\t$saveMelDir = $filename;\r}\r\rproc Mymellisterabout()\r{\r\tif (`window -ex mlstrabt`)\r\t\tdeleteUI mlstrabt;\r\r\r\twindow -title \"About MEL LISTER++ v1.5\" -s 0 -rtf 1 -mnb 1 -mxb 0 -w 695 -h 530 -menuBar 0 mlstrabt;\r\t\r\tcolumnLayout -adj 1;\r\ttext -l \"\";\r\ttext -align \"center\" -l \"MEL LISTER++ v1.5\";\r\ttext -l \"\";\r\tscrollField -h 300 -ed 0 -ww 1 -tx \"\\nScript by\\nKumaresan \\nJeremiah Grant\\n\\nSpecial Thanks to\\nBryan Ewert\\nErick Miller\\n\\nDate\\n15-4-2007 :: 27-4-2007\\n\\nLast Update: \\n13 (Sun) May 2007  - 08:14:49  AM \\n\\nContact\\nkaymatrix@gmail.com\\n\\nChennai - India\\n\" sayers;\r\ttext -l \"\";\r\tbutton -label \"Close\" -c \"deleteUI mlstrabt\";\r\tscrollField -q -h sayers;\t\r\twindow -e -w 300 -h 420 mlstrabt;\r\tshowWindow mlstrabt;\r}\r\rproc Mymelhelper()\r{\r\tconfirmDialog -title \"Help\" -message \"Please! Refer the HEADER part of this script for complete help!\" -button \"OK\";\r}\r\rmlPlus;" 
        -sourceType "mel" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "Show Attribute Info" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -imageOverlayLabel "Attr" 
        -image "MENUICONLISTED.xpm" 
        -image1 "MENUICONLISTED.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PMP_showAttribInfo" 
        -sourceType "mel" 
        -doubleClickCommand "{\r\n\tdeleteUI -window showAttribInfoWindow;\r\n\tPMP_showXForm;\r\n}" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "Print attribute connections for selected nodes" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -image "pythonFamily.xpm" 
        -image1 "pythonFamily.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import PMP.maya.connections\r\nPMP.maya.connections.printAllConnections()" 
        -sourceType "python" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -align "center" 
        -label "Connect attributes selected in channel box from first selected node to other selected nodes" 
        -labelOffset 0
        -font "tinyBoldLabelFont" 
        -imageOverlayLabel "cnAttr" 
        -image "pythonFamily.xpm" 
        -image1 "pythonFamily.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import PMP.maya.connections\rPMP.maya.connections.makeSelectedAttrConnections()\r" 
        -sourceType "python" 
        -actionIsSubstitute 0
        -commandRepeatable 1
    ;

} 
